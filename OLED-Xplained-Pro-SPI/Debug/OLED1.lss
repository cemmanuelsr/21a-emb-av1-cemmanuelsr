
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004194  00400000  00400000  00010000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404194  00404194  00014194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000045c  20400000  0040419c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002c8  2040045c  004045f8  0002045c  2**2
                  ALLOC
  4 .stack        00002004  20400724  004048c0  0002045c  2**0
                  ALLOC
  5 .heap         00000200  20402728  004068c4  0002045c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002048a  2**0
                  CONTENTS, READONLY
  8 .debug_info   00015247  00000000  00000000  000204e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002d43  00000000  00000000  0003572a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005510  00000000  00000000  0003846d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a00  00000000  00000000  0003d97d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000998  00000000  00000000  0003e37d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009776  00000000  00000000  0003ed15  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e733  00000000  00000000  0004848b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008f981  00000000  00000000  00056bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002a88  00000000  00000000  000e6540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	28 27 40 20 85 26 40 00 35 27 40 00 35 27 40 00     ('@ .&@.5'@.5'@.
  400010:	35 27 40 00 35 27 40 00 35 27 40 00 00 00 00 00     5'@.5'@.5'@.....
	...
  40002c:	35 27 40 00 35 27 40 00 00 00 00 00 35 27 40 00     5'@.5'@.....5'@.
  40003c:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  40004c:	dd 2a 40 00 35 27 40 00 35 27 40 00 35 27 40 00     .*@.5'@.5'@.5'@.
  40005c:	35 27 40 00 35 27 40 00 00 00 00 00 3d 22 40 00     5'@.5'@.....="@.
  40006c:	55 22 40 00 6d 22 40 00 35 27 40 00 35 27 40 00     U"@.m"@.5'@.5'@.
  40007c:	35 27 40 00 85 22 40 00 9d 22 40 00 35 27 40 00     5'@.."@.."@.5'@.
  40008c:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  40009c:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  4000ac:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  4000bc:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  4000cc:	35 27 40 00 00 00 00 00 35 27 40 00 00 00 00 00     5'@.....5'@.....
  4000dc:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  4000ec:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  4000fc:	35 27 40 00 35 27 40 00 35 27 40 00 35 27 40 00     5'@.5'@.5'@.5'@.
  40010c:	35 27 40 00 35 27 40 00 00 00 00 00 00 00 00 00     5'@.5'@.........
  40011c:	00 00 00 00 35 27 40 00 35 27 40 00 35 27 40 00     ....5'@.5'@.5'@.
  40012c:	35 27 40 00 35 27 40 00 00 00 00 00 35 27 40 00     5'@.5'@.....5'@.
  40013c:	35 27 40 00                                         5'@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040045c 	.word	0x2040045c
  40015c:	00000000 	.word	0x00000000
  400160:	0040419c 	.word	0x0040419c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040419c 	.word	0x0040419c
  4001a0:	20400460 	.word	0x20400460
  4001a4:	0040419c 	.word	0x0040419c
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \param us_prescaler Prescaler value for the RTT.
 *
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
  4001b4:	460b      	mov	r3, r1
  4001b6:	807b      	strh	r3, [r7, #2]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001b8:	887a      	ldrh	r2, [r7, #2]
  4001ba:	4b07      	ldr	r3, [pc, #28]	; (4001d8 <rtt_init+0x2c>)
  4001bc:	681b      	ldr	r3, [r3, #0]
  4001be:	4313      	orrs	r3, r2
  4001c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
  4001c4:	687b      	ldr	r3, [r7, #4]
  4001c6:	601a      	str	r2, [r3, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
  4001c8:	2300      	movs	r3, #0
}
  4001ca:	4618      	mov	r0, r3
  4001cc:	370c      	adds	r7, #12
  4001ce:	46bd      	mov	sp, r7
  4001d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001d4:	4770      	bx	lr
  4001d6:	bf00      	nop
  4001d8:	20400478 	.word	0x20400478

004001dc <rtt_sel_source>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
  4001dc:	b480      	push	{r7}
  4001de:	b083      	sub	sp, #12
  4001e0:	af00      	add	r7, sp, #0
  4001e2:	6078      	str	r0, [r7, #4]
  4001e4:	460b      	mov	r3, r1
  4001e6:	70fb      	strb	r3, [r7, #3]
	if(is_rtc_sel) {
  4001e8:	78fb      	ldrb	r3, [r7, #3]
  4001ea:	2b00      	cmp	r3, #0
  4001ec:	d00d      	beq.n	40020a <rtt_sel_source+0x2e>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001ee:	4b10      	ldr	r3, [pc, #64]	; (400230 <rtt_sel_source+0x54>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001f6:	4a0e      	ldr	r2, [pc, #56]	; (400230 <rtt_sel_source+0x54>)
  4001f8:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	681a      	ldr	r2, [r3, #0]
  4001fe:	4b0c      	ldr	r3, [pc, #48]	; (400230 <rtt_sel_source+0x54>)
  400200:	681b      	ldr	r3, [r3, #0]
  400202:	431a      	orrs	r2, r3
  400204:	687b      	ldr	r3, [r7, #4]
  400206:	601a      	str	r2, [r3, #0]
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	}
}
  400208:	e00c      	b.n	400224 <rtt_sel_source+0x48>
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40020a:	4b09      	ldr	r3, [pc, #36]	; (400230 <rtt_sel_source+0x54>)
  40020c:	681b      	ldr	r3, [r3, #0]
  40020e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400212:	4a07      	ldr	r2, [pc, #28]	; (400230 <rtt_sel_source+0x54>)
  400214:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400216:	687b      	ldr	r3, [r7, #4]
  400218:	681a      	ldr	r2, [r3, #0]
  40021a:	4b05      	ldr	r3, [pc, #20]	; (400230 <rtt_sel_source+0x54>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	431a      	orrs	r2, r3
  400220:	687b      	ldr	r3, [r7, #4]
  400222:	601a      	str	r2, [r3, #0]
}
  400224:	bf00      	nop
  400226:	370c      	adds	r7, #12
  400228:	46bd      	mov	sp, r7
  40022a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40022e:	4770      	bx	lr
  400230:	20400478 	.word	0x20400478

00400234 <rtt_enable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  400234:	b480      	push	{r7}
  400236:	b085      	sub	sp, #20
  400238:	af00      	add	r7, sp, #0
  40023a:	6078      	str	r0, [r7, #4]
  40023c:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	681b      	ldr	r3, [r3, #0]
  400242:	60fb      	str	r3, [r7, #12]
	temp |= ul_sources;
  400244:	68fa      	ldr	r2, [r7, #12]
  400246:	683b      	ldr	r3, [r7, #0]
  400248:	4313      	orrs	r3, r2
  40024a:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40024c:	4b06      	ldr	r3, [pc, #24]	; (400268 <rtt_enable_interrupt+0x34>)
  40024e:	681b      	ldr	r3, [r3, #0]
  400250:	68fa      	ldr	r2, [r7, #12]
  400252:	4313      	orrs	r3, r2
  400254:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400256:	687b      	ldr	r3, [r7, #4]
  400258:	68fa      	ldr	r2, [r7, #12]
  40025a:	601a      	str	r2, [r3, #0]
}
  40025c:	bf00      	nop
  40025e:	3714      	adds	r7, #20
  400260:	46bd      	mov	sp, r7
  400262:	f85d 7b04 	ldr.w	r7, [sp], #4
  400266:	4770      	bx	lr
  400268:	20400478 	.word	0x20400478

0040026c <rtt_disable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  40026c:	b480      	push	{r7}
  40026e:	b085      	sub	sp, #20
  400270:	af00      	add	r7, sp, #0
  400272:	6078      	str	r0, [r7, #4]
  400274:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
  400276:	2300      	movs	r3, #0
  400278:	60fb      	str	r3, [r7, #12]

	temp = p_rtt->RTT_MR;
  40027a:	687b      	ldr	r3, [r7, #4]
  40027c:	681b      	ldr	r3, [r3, #0]
  40027e:	60fb      	str	r3, [r7, #12]
	temp &= (~ul_sources);
  400280:	683b      	ldr	r3, [r7, #0]
  400282:	43db      	mvns	r3, r3
  400284:	68fa      	ldr	r2, [r7, #12]
  400286:	4013      	ands	r3, r2
  400288:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40028a:	4b07      	ldr	r3, [pc, #28]	; (4002a8 <rtt_disable_interrupt+0x3c>)
  40028c:	681b      	ldr	r3, [r3, #0]
  40028e:	68fa      	ldr	r2, [r7, #12]
  400290:	4313      	orrs	r3, r2
  400292:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  400294:	687b      	ldr	r3, [r7, #4]
  400296:	68fa      	ldr	r2, [r7, #12]
  400298:	601a      	str	r2, [r3, #0]
}
  40029a:	bf00      	nop
  40029c:	3714      	adds	r7, #20
  40029e:	46bd      	mov	sp, r7
  4002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002a4:	4770      	bx	lr
  4002a6:	bf00      	nop
  4002a8:	20400478 	.word	0x20400478

004002ac <rtt_read_timer_value>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
  4002ac:	b480      	push	{r7}
  4002ae:	b085      	sub	sp, #20
  4002b0:	af00      	add	r7, sp, #0
  4002b2:	6078      	str	r0, [r7, #4]
	uint32_t rtt_val = p_rtt->RTT_VR;
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	689b      	ldr	r3, [r3, #8]
  4002b8:	60fb      	str	r3, [r7, #12]

	while (rtt_val != p_rtt->RTT_VR) {
  4002ba:	e002      	b.n	4002c2 <rtt_read_timer_value+0x16>
		rtt_val = p_rtt->RTT_VR;
  4002bc:	687b      	ldr	r3, [r7, #4]
  4002be:	689b      	ldr	r3, [r3, #8]
  4002c0:	60fb      	str	r3, [r7, #12]
	while (rtt_val != p_rtt->RTT_VR) {
  4002c2:	687b      	ldr	r3, [r7, #4]
  4002c4:	689a      	ldr	r2, [r3, #8]
  4002c6:	68fb      	ldr	r3, [r7, #12]
  4002c8:	429a      	cmp	r2, r3
  4002ca:	d1f7      	bne.n	4002bc <rtt_read_timer_value+0x10>
	}

	return rtt_val;
  4002cc:	68fb      	ldr	r3, [r7, #12]
}
  4002ce:	4618      	mov	r0, r3
  4002d0:	3714      	adds	r7, #20
  4002d2:	46bd      	mov	sp, r7
  4002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d8:	4770      	bx	lr

004002da <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
  4002da:	b480      	push	{r7}
  4002dc:	b083      	sub	sp, #12
  4002de:	af00      	add	r7, sp, #0
  4002e0:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
  4002e2:	687b      	ldr	r3, [r7, #4]
  4002e4:	68db      	ldr	r3, [r3, #12]
}
  4002e6:	4618      	mov	r0, r3
  4002e8:	370c      	adds	r7, #12
  4002ea:	46bd      	mov	sp, r7
  4002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f0:	4770      	bx	lr
	...

004002f4 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4002f4:	b580      	push	{r7, lr}
  4002f6:	b084      	sub	sp, #16
  4002f8:	af00      	add	r7, sp, #0
  4002fa:	6078      	str	r0, [r7, #4]
  4002fc:	6039      	str	r1, [r7, #0]
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4002fe:	687b      	ldr	r3, [r7, #4]
  400300:	681b      	ldr	r3, [r3, #0]
  400302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  400306:	60fb      	str	r3, [r7, #12]

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400308:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40030c:	480d      	ldr	r0, [pc, #52]	; (400344 <rtt_write_alarm_time+0x50>)
  40030e:	4b0e      	ldr	r3, [pc, #56]	; (400348 <rtt_write_alarm_time+0x54>)
  400310:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400312:	683b      	ldr	r3, [r7, #0]
  400314:	2b00      	cmp	r3, #0
  400316:	d104      	bne.n	400322 <rtt_write_alarm_time+0x2e>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400318:	687b      	ldr	r3, [r7, #4]
  40031a:	f04f 32ff 	mov.w	r2, #4294967295
  40031e:	605a      	str	r2, [r3, #4]
  400320:	e003      	b.n	40032a <rtt_write_alarm_time+0x36>
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400322:	683b      	ldr	r3, [r7, #0]
  400324:	1e5a      	subs	r2, r3, #1
  400326:	687b      	ldr	r3, [r7, #4]
  400328:	605a      	str	r2, [r3, #4]
	}

	if (flag) {
  40032a:	68fb      	ldr	r3, [r7, #12]
  40032c:	2b00      	cmp	r3, #0
  40032e:	d004      	beq.n	40033a <rtt_write_alarm_time+0x46>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400330:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400334:	4803      	ldr	r0, [pc, #12]	; (400344 <rtt_write_alarm_time+0x50>)
  400336:	4b05      	ldr	r3, [pc, #20]	; (40034c <rtt_write_alarm_time+0x58>)
  400338:	4798      	blx	r3
	}

	return 0;
  40033a:	2300      	movs	r3, #0
}
  40033c:	4618      	mov	r0, r3
  40033e:	3710      	adds	r7, #16
  400340:	46bd      	mov	sp, r7
  400342:	bd80      	pop	{r7, pc}
  400344:	400e1830 	.word	0x400e1830
  400348:	0040026d 	.word	0x0040026d
  40034c:	00400235 	.word	0x00400235

00400350 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
  400350:	b480      	push	{r7}
  400352:	b083      	sub	sp, #12
  400354:	af00      	add	r7, sp, #0
  400356:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400358:	687b      	ldr	r3, [r7, #4]
  40035a:	685b      	ldr	r3, [r3, #4]
  40035c:	f003 0302 	and.w	r3, r3, #2
  400360:	2b00      	cmp	r3, #0
  400362:	d001      	beq.n	400368 <spi_get_peripheral_select_mode+0x18>
		return 1;
  400364:	2301      	movs	r3, #1
  400366:	e000      	b.n	40036a <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
  400368:	2300      	movs	r3, #0
	}
}
  40036a:	4618      	mov	r0, r3
  40036c:	370c      	adds	r7, #12
  40036e:	46bd      	mov	sp, r7
  400370:	f85d 7b04 	ldr.w	r7, [sp], #4
  400374:	4770      	bx	lr
	...

00400378 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400378:	b580      	push	{r7, lr}
  40037a:	b082      	sub	sp, #8
  40037c:	af00      	add	r7, sp, #0
  40037e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400380:	6878      	ldr	r0, [r7, #4]
  400382:	4b03      	ldr	r3, [pc, #12]	; (400390 <sysclk_enable_peripheral_clock+0x18>)
  400384:	4798      	blx	r3
}
  400386:	bf00      	nop
  400388:	3708      	adds	r7, #8
  40038a:	46bd      	mov	sp, r7
  40038c:	bd80      	pop	{r7, pc}
  40038e:	bf00      	nop
  400390:	00402579 	.word	0x00402579

00400394 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400394:	b580      	push	{r7, lr}
  400396:	b082      	sub	sp, #8
  400398:	af00      	add	r7, sp, #0
  40039a:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	4a09      	ldr	r2, [pc, #36]	; (4003c4 <spi_enable_clock+0x30>)
  4003a0:	4293      	cmp	r3, r2
  4003a2:	d103      	bne.n	4003ac <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  4003a4:	2015      	movs	r0, #21
  4003a6:	4b08      	ldr	r3, [pc, #32]	; (4003c8 <spi_enable_clock+0x34>)
  4003a8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4003aa:	e006      	b.n	4003ba <spi_enable_clock+0x26>
	else if (p_spi == SPI1) {
  4003ac:	687b      	ldr	r3, [r7, #4]
  4003ae:	4a07      	ldr	r2, [pc, #28]	; (4003cc <spi_enable_clock+0x38>)
  4003b0:	4293      	cmp	r3, r2
  4003b2:	d102      	bne.n	4003ba <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  4003b4:	202a      	movs	r0, #42	; 0x2a
  4003b6:	4b04      	ldr	r3, [pc, #16]	; (4003c8 <spi_enable_clock+0x34>)
  4003b8:	4798      	blx	r3
}
  4003ba:	bf00      	nop
  4003bc:	3708      	adds	r7, #8
  4003be:	46bd      	mov	sp, r7
  4003c0:	bd80      	pop	{r7, pc}
  4003c2:	bf00      	nop
  4003c4:	40008000 	.word	0x40008000
  4003c8:	00400379 	.word	0x00400379
  4003cc:	40058000 	.word	0x40058000

004003d0 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  4003d0:	b480      	push	{r7}
  4003d2:	b083      	sub	sp, #12
  4003d4:	af00      	add	r7, sp, #0
  4003d6:	6078      	str	r0, [r7, #4]
  4003d8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4003da:	687b      	ldr	r3, [r7, #4]
  4003dc:	685b      	ldr	r3, [r3, #4]
  4003de:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  4003e2:	687b      	ldr	r3, [r7, #4]
  4003e4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4003e6:	687b      	ldr	r3, [r7, #4]
  4003e8:	685a      	ldr	r2, [r3, #4]
  4003ea:	683b      	ldr	r3, [r7, #0]
  4003ec:	041b      	lsls	r3, r3, #16
  4003ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  4003f2:	431a      	orrs	r2, r3
  4003f4:	687b      	ldr	r3, [r7, #4]
  4003f6:	605a      	str	r2, [r3, #4]
}
  4003f8:	bf00      	nop
  4003fa:	370c      	adds	r7, #12
  4003fc:	46bd      	mov	sp, r7
  4003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400402:	4770      	bx	lr

00400404 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400404:	b580      	push	{r7, lr}
  400406:	b084      	sub	sp, #16
  400408:	af00      	add	r7, sp, #0
  40040a:	6078      	str	r0, [r7, #4]
  40040c:	4608      	mov	r0, r1
  40040e:	4611      	mov	r1, r2
  400410:	461a      	mov	r2, r3
  400412:	4603      	mov	r3, r0
  400414:	807b      	strh	r3, [r7, #2]
  400416:	460b      	mov	r3, r1
  400418:	707b      	strb	r3, [r7, #1]
  40041a:	4613      	mov	r3, r2
  40041c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  40041e:	f643 2398 	movw	r3, #15000	; 0x3a98
  400422:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400424:	e006      	b.n	400434 <spi_write+0x30>
		if (!timeout--) {
  400426:	68fb      	ldr	r3, [r7, #12]
  400428:	1e5a      	subs	r2, r3, #1
  40042a:	60fa      	str	r2, [r7, #12]
  40042c:	2b00      	cmp	r3, #0
  40042e:	d101      	bne.n	400434 <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  400430:	2301      	movs	r3, #1
  400432:	e020      	b.n	400476 <spi_write+0x72>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400434:	687b      	ldr	r3, [r7, #4]
  400436:	691b      	ldr	r3, [r3, #16]
  400438:	f003 0302 	and.w	r3, r3, #2
  40043c:	2b00      	cmp	r3, #0
  40043e:	d0f2      	beq.n	400426 <spi_write+0x22>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400440:	6878      	ldr	r0, [r7, #4]
  400442:	4b0f      	ldr	r3, [pc, #60]	; (400480 <spi_write+0x7c>)
  400444:	4798      	blx	r3
  400446:	4603      	mov	r3, r0
  400448:	2b00      	cmp	r3, #0
  40044a:	d00e      	beq.n	40046a <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40044c:	887a      	ldrh	r2, [r7, #2]
  40044e:	787b      	ldrb	r3, [r7, #1]
  400450:	041b      	lsls	r3, r3, #16
  400452:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  400456:	4313      	orrs	r3, r2
  400458:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  40045a:	783b      	ldrb	r3, [r7, #0]
  40045c:	2b00      	cmp	r3, #0
  40045e:	d006      	beq.n	40046e <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  400460:	68bb      	ldr	r3, [r7, #8]
  400462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400466:	60bb      	str	r3, [r7, #8]
  400468:	e001      	b.n	40046e <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  40046a:	887b      	ldrh	r3, [r7, #2]
  40046c:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  40046e:	687b      	ldr	r3, [r7, #4]
  400470:	68ba      	ldr	r2, [r7, #8]
  400472:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  400474:	2300      	movs	r3, #0
}
  400476:	4618      	mov	r0, r3
  400478:	3710      	adds	r7, #16
  40047a:	46bd      	mov	sp, r7
  40047c:	bd80      	pop	{r7, pc}
  40047e:	bf00      	nop
  400480:	00400351 	.word	0x00400351

00400484 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  400484:	b480      	push	{r7}
  400486:	b085      	sub	sp, #20
  400488:	af00      	add	r7, sp, #0
  40048a:	60f8      	str	r0, [r7, #12]
  40048c:	60b9      	str	r1, [r7, #8]
  40048e:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  400490:	687b      	ldr	r3, [r7, #4]
  400492:	2b00      	cmp	r3, #0
  400494:	d00c      	beq.n	4004b0 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400496:	68fb      	ldr	r3, [r7, #12]
  400498:	68ba      	ldr	r2, [r7, #8]
  40049a:	320c      	adds	r2, #12
  40049c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004a0:	f043 0101 	orr.w	r1, r3, #1
  4004a4:	68fb      	ldr	r3, [r7, #12]
  4004a6:	68ba      	ldr	r2, [r7, #8]
  4004a8:	320c      	adds	r2, #12
  4004aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  4004ae:	e00b      	b.n	4004c8 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4004b0:	68fb      	ldr	r3, [r7, #12]
  4004b2:	68ba      	ldr	r2, [r7, #8]
  4004b4:	320c      	adds	r2, #12
  4004b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004ba:	f023 0101 	bic.w	r1, r3, #1
  4004be:	68fb      	ldr	r3, [r7, #12]
  4004c0:	68ba      	ldr	r2, [r7, #8]
  4004c2:	320c      	adds	r2, #12
  4004c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4004c8:	bf00      	nop
  4004ca:	3714      	adds	r7, #20
  4004cc:	46bd      	mov	sp, r7
  4004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004d2:	4770      	bx	lr

004004d4 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  4004d4:	b480      	push	{r7}
  4004d6:	b085      	sub	sp, #20
  4004d8:	af00      	add	r7, sp, #0
  4004da:	60f8      	str	r0, [r7, #12]
  4004dc:	60b9      	str	r1, [r7, #8]
  4004de:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  4004e0:	687b      	ldr	r3, [r7, #4]
  4004e2:	2b00      	cmp	r3, #0
  4004e4:	d00c      	beq.n	400500 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4004e6:	68fb      	ldr	r3, [r7, #12]
  4004e8:	68ba      	ldr	r2, [r7, #8]
  4004ea:	320c      	adds	r2, #12
  4004ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004f0:	f043 0102 	orr.w	r1, r3, #2
  4004f4:	68fb      	ldr	r3, [r7, #12]
  4004f6:	68ba      	ldr	r2, [r7, #8]
  4004f8:	320c      	adds	r2, #12
  4004fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  4004fe:	e00b      	b.n	400518 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400500:	68fb      	ldr	r3, [r7, #12]
  400502:	68ba      	ldr	r2, [r7, #8]
  400504:	320c      	adds	r2, #12
  400506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40050a:	f023 0102 	bic.w	r1, r3, #2
  40050e:	68fb      	ldr	r3, [r7, #12]
  400510:	68ba      	ldr	r2, [r7, #8]
  400512:	320c      	adds	r2, #12
  400514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400518:	bf00      	nop
  40051a:	3714      	adds	r7, #20
  40051c:	46bd      	mov	sp, r7
  40051e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400522:	4770      	bx	lr

00400524 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  400524:	b480      	push	{r7}
  400526:	b085      	sub	sp, #20
  400528:	af00      	add	r7, sp, #0
  40052a:	60f8      	str	r0, [r7, #12]
  40052c:	60b9      	str	r1, [r7, #8]
  40052e:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400530:	687b      	ldr	r3, [r7, #4]
  400532:	2b04      	cmp	r3, #4
  400534:	d118      	bne.n	400568 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400536:	68fb      	ldr	r3, [r7, #12]
  400538:	68ba      	ldr	r2, [r7, #8]
  40053a:	320c      	adds	r2, #12
  40053c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400540:	f023 0108 	bic.w	r1, r3, #8
  400544:	68fb      	ldr	r3, [r7, #12]
  400546:	68ba      	ldr	r2, [r7, #8]
  400548:	320c      	adds	r2, #12
  40054a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40054e:	68fb      	ldr	r3, [r7, #12]
  400550:	68ba      	ldr	r2, [r7, #8]
  400552:	320c      	adds	r2, #12
  400554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400558:	f043 0104 	orr.w	r1, r3, #4
  40055c:	68fb      	ldr	r3, [r7, #12]
  40055e:	68ba      	ldr	r2, [r7, #8]
  400560:	320c      	adds	r2, #12
  400562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  400566:	e02a      	b.n	4005be <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400568:	687b      	ldr	r3, [r7, #4]
  40056a:	2b00      	cmp	r3, #0
  40056c:	d118      	bne.n	4005a0 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40056e:	68fb      	ldr	r3, [r7, #12]
  400570:	68ba      	ldr	r2, [r7, #8]
  400572:	320c      	adds	r2, #12
  400574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400578:	f023 0108 	bic.w	r1, r3, #8
  40057c:	68fb      	ldr	r3, [r7, #12]
  40057e:	68ba      	ldr	r2, [r7, #8]
  400580:	320c      	adds	r2, #12
  400582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400586:	68fb      	ldr	r3, [r7, #12]
  400588:	68ba      	ldr	r2, [r7, #8]
  40058a:	320c      	adds	r2, #12
  40058c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400590:	f023 0104 	bic.w	r1, r3, #4
  400594:	68fb      	ldr	r3, [r7, #12]
  400596:	68ba      	ldr	r2, [r7, #8]
  400598:	320c      	adds	r2, #12
  40059a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40059e:	e00e      	b.n	4005be <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	2b08      	cmp	r3, #8
  4005a4:	d10b      	bne.n	4005be <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4005a6:	68fb      	ldr	r3, [r7, #12]
  4005a8:	68ba      	ldr	r2, [r7, #8]
  4005aa:	320c      	adds	r2, #12
  4005ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005b0:	f043 0108 	orr.w	r1, r3, #8
  4005b4:	68fb      	ldr	r3, [r7, #12]
  4005b6:	68ba      	ldr	r2, [r7, #8]
  4005b8:	320c      	adds	r2, #12
  4005ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4005be:	bf00      	nop
  4005c0:	3714      	adds	r7, #20
  4005c2:	46bd      	mov	sp, r7
  4005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005c8:	4770      	bx	lr

004005ca <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4005ca:	b480      	push	{r7}
  4005cc:	b085      	sub	sp, #20
  4005ce:	af00      	add	r7, sp, #0
  4005d0:	60f8      	str	r0, [r7, #12]
  4005d2:	60b9      	str	r1, [r7, #8]
  4005d4:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4005d6:	68fb      	ldr	r3, [r7, #12]
  4005d8:	68ba      	ldr	r2, [r7, #8]
  4005da:	320c      	adds	r2, #12
  4005dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4005e0:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  4005e4:	68fb      	ldr	r3, [r7, #12]
  4005e6:	68ba      	ldr	r2, [r7, #8]
  4005e8:	320c      	adds	r2, #12
  4005ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4005ee:	68fb      	ldr	r3, [r7, #12]
  4005f0:	68ba      	ldr	r2, [r7, #8]
  4005f2:	320c      	adds	r2, #12
  4005f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4005f8:	687b      	ldr	r3, [r7, #4]
  4005fa:	ea42 0103 	orr.w	r1, r2, r3
  4005fe:	68fb      	ldr	r3, [r7, #12]
  400600:	68ba      	ldr	r2, [r7, #8]
  400602:	320c      	adds	r2, #12
  400604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400608:	bf00      	nop
  40060a:	3714      	adds	r7, #20
  40060c:	46bd      	mov	sp, r7
  40060e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400612:	4770      	bx	lr

00400614 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  400614:	b480      	push	{r7}
  400616:	b085      	sub	sp, #20
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
  40061c:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  40061e:	683a      	ldr	r2, [r7, #0]
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	4413      	add	r3, r2
  400624:	1e5a      	subs	r2, r3, #1
  400626:	687b      	ldr	r3, [r7, #4]
  400628:	fbb2 f3f3 	udiv	r3, r2, r3
  40062c:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	2b00      	cmp	r3, #0
  400632:	dd02      	ble.n	40063a <spi_calc_baudrate_div+0x26>
  400634:	68fb      	ldr	r3, [r7, #12]
  400636:	2bff      	cmp	r3, #255	; 0xff
  400638:	dd02      	ble.n	400640 <spi_calc_baudrate_div+0x2c>
		return -1;
  40063a:	f04f 33ff 	mov.w	r3, #4294967295
  40063e:	e001      	b.n	400644 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  400640:	68fb      	ldr	r3, [r7, #12]
  400642:	b21b      	sxth	r3, r3
}
  400644:	4618      	mov	r0, r3
  400646:	3714      	adds	r7, #20
  400648:	46bd      	mov	sp, r7
  40064a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40064e:	4770      	bx	lr

00400650 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  400650:	b480      	push	{r7}
  400652:	b085      	sub	sp, #20
  400654:	af00      	add	r7, sp, #0
  400656:	60f8      	str	r0, [r7, #12]
  400658:	60b9      	str	r1, [r7, #8]
  40065a:	4613      	mov	r3, r2
  40065c:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40065e:	79fb      	ldrb	r3, [r7, #7]
  400660:	2b00      	cmp	r3, #0
  400662:	d102      	bne.n	40066a <spi_set_baudrate_div+0x1a>
        return -1;
  400664:	f04f 33ff 	mov.w	r3, #4294967295
  400668:	e01b      	b.n	4006a2 <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40066a:	68fb      	ldr	r3, [r7, #12]
  40066c:	68ba      	ldr	r2, [r7, #8]
  40066e:	320c      	adds	r2, #12
  400670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400674:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  400678:	68fb      	ldr	r3, [r7, #12]
  40067a:	68ba      	ldr	r2, [r7, #8]
  40067c:	320c      	adds	r2, #12
  40067e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	68ba      	ldr	r2, [r7, #8]
  400686:	320c      	adds	r2, #12
  400688:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  40068c:	79fb      	ldrb	r3, [r7, #7]
  40068e:	021b      	lsls	r3, r3, #8
  400690:	b29b      	uxth	r3, r3
  400692:	ea42 0103 	orr.w	r1, r2, r3
  400696:	68fb      	ldr	r3, [r7, #12]
  400698:	68ba      	ldr	r2, [r7, #8]
  40069a:	320c      	adds	r2, #12
  40069c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  4006a0:	2300      	movs	r3, #0
}
  4006a2:	4618      	mov	r0, r3
  4006a4:	3714      	adds	r7, #20
  4006a6:	46bd      	mov	sp, r7
  4006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006ac:	4770      	bx	lr
	...

004006b0 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
  4006b0:	b480      	push	{r7}
  4006b2:	b083      	sub	sp, #12
  4006b4:	af00      	add	r7, sp, #0
  4006b6:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
  4006b8:	4a04      	ldr	r2, [pc, #16]	; (4006cc <gfx_mono_set_framebuffer+0x1c>)
  4006ba:	687b      	ldr	r3, [r7, #4]
  4006bc:	6013      	str	r3, [r2, #0]
}
  4006be:	bf00      	nop
  4006c0:	370c      	adds	r7, #12
  4006c2:	46bd      	mov	sp, r7
  4006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006c8:	4770      	bx	lr
  4006ca:	bf00      	nop
  4006cc:	2040047c 	.word	0x2040047c

004006d0 <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
  4006d0:	b480      	push	{r7}
  4006d2:	b083      	sub	sp, #12
  4006d4:	af00      	add	r7, sp, #0
  4006d6:	4603      	mov	r3, r0
  4006d8:	71fb      	strb	r3, [r7, #7]
  4006da:	460b      	mov	r3, r1
  4006dc:	71bb      	strb	r3, [r7, #6]
  4006de:	4613      	mov	r3, r2
  4006e0:	717b      	strb	r3, [r7, #5]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4006e2:	4b08      	ldr	r3, [pc, #32]	; (400704 <gfx_mono_framebuffer_put_byte+0x34>)
  4006e4:	681a      	ldr	r2, [r3, #0]
  4006e6:	79fb      	ldrb	r3, [r7, #7]
  4006e8:	01db      	lsls	r3, r3, #7
  4006ea:	4619      	mov	r1, r3
  4006ec:	79bb      	ldrb	r3, [r7, #6]
  4006ee:	440b      	add	r3, r1
  4006f0:	4413      	add	r3, r2
  4006f2:	797a      	ldrb	r2, [r7, #5]
  4006f4:	701a      	strb	r2, [r3, #0]
}
  4006f6:	bf00      	nop
  4006f8:	370c      	adds	r7, #12
  4006fa:	46bd      	mov	sp, r7
  4006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400700:	4770      	bx	lr
  400702:	bf00      	nop
  400704:	2040047c 	.word	0x2040047c

00400708 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  400708:	b480      	push	{r7}
  40070a:	b083      	sub	sp, #12
  40070c:	af00      	add	r7, sp, #0
  40070e:	4603      	mov	r3, r0
  400710:	460a      	mov	r2, r1
  400712:	71fb      	strb	r3, [r7, #7]
  400714:	4613      	mov	r3, r2
  400716:	71bb      	strb	r3, [r7, #6]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400718:	4b07      	ldr	r3, [pc, #28]	; (400738 <gfx_mono_framebuffer_get_byte+0x30>)
  40071a:	681a      	ldr	r2, [r3, #0]
  40071c:	79fb      	ldrb	r3, [r7, #7]
  40071e:	01db      	lsls	r3, r3, #7
  400720:	4619      	mov	r1, r3
  400722:	79bb      	ldrb	r3, [r7, #6]
  400724:	440b      	add	r3, r1
  400726:	4413      	add	r3, r2
  400728:	781b      	ldrb	r3, [r3, #0]
}
  40072a:	4618      	mov	r0, r3
  40072c:	370c      	adds	r7, #12
  40072e:	46bd      	mov	sp, r7
  400730:	f85d 7b04 	ldr.w	r7, [sp], #4
  400734:	4770      	bx	lr
  400736:	bf00      	nop
  400738:	2040047c 	.word	0x2040047c

0040073c <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  40073c:	b590      	push	{r4, r7, lr}
  40073e:	b085      	sub	sp, #20
  400740:	af00      	add	r7, sp, #0
  400742:	4604      	mov	r4, r0
  400744:	4608      	mov	r0, r1
  400746:	4611      	mov	r1, r2
  400748:	461a      	mov	r2, r3
  40074a:	4623      	mov	r3, r4
  40074c:	71fb      	strb	r3, [r7, #7]
  40074e:	4603      	mov	r3, r0
  400750:	71bb      	strb	r3, [r7, #6]
  400752:	460b      	mov	r3, r1
  400754:	717b      	strb	r3, [r7, #5]
  400756:	4613      	mov	r3, r2
  400758:	713b      	strb	r3, [r7, #4]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  40075a:	79fa      	ldrb	r2, [r7, #7]
  40075c:	797b      	ldrb	r3, [r7, #5]
  40075e:	4413      	add	r3, r2
  400760:	2b80      	cmp	r3, #128	; 0x80
  400762:	dd06      	ble.n	400772 <gfx_mono_generic_draw_horizontal_line+0x36>
		length = GFX_MONO_LCD_WIDTH - x;
  400764:	79fb      	ldrb	r3, [r7, #7]
  400766:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
  40076a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  40076e:	3380      	adds	r3, #128	; 0x80
  400770:	717b      	strb	r3, [r7, #5]
	}

	page = y / 8;
  400772:	79bb      	ldrb	r3, [r7, #6]
  400774:	08db      	lsrs	r3, r3, #3
  400776:	73fb      	strb	r3, [r7, #15]
	pixelmask = (1 << (y - (page * 8)));
  400778:	79ba      	ldrb	r2, [r7, #6]
  40077a:	7bfb      	ldrb	r3, [r7, #15]
  40077c:	00db      	lsls	r3, r3, #3
  40077e:	1ad3      	subs	r3, r2, r3
  400780:	2201      	movs	r2, #1
  400782:	fa02 f303 	lsl.w	r3, r2, r3
  400786:	73bb      	strb	r3, [r7, #14]

	if (length == 0) {
  400788:	797b      	ldrb	r3, [r7, #5]
  40078a:	2b00      	cmp	r3, #0
  40078c:	d066      	beq.n	40085c <gfx_mono_generic_draw_horizontal_line+0x120>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  40078e:	793b      	ldrb	r3, [r7, #4]
  400790:	2b01      	cmp	r3, #1
  400792:	d01c      	beq.n	4007ce <gfx_mono_generic_draw_horizontal_line+0x92>
  400794:	2b02      	cmp	r3, #2
  400796:	d05b      	beq.n	400850 <gfx_mono_generic_draw_horizontal_line+0x114>
  400798:	2b00      	cmp	r3, #0
  40079a:	d03b      	beq.n	400814 <gfx_mono_generic_draw_horizontal_line+0xd8>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
  40079c:	e05f      	b.n	40085e <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  40079e:	79fa      	ldrb	r2, [r7, #7]
  4007a0:	797b      	ldrb	r3, [r7, #5]
  4007a2:	4413      	add	r3, r2
  4007a4:	b2da      	uxtb	r2, r3
  4007a6:	7bfb      	ldrb	r3, [r7, #15]
  4007a8:	4611      	mov	r1, r2
  4007aa:	4618      	mov	r0, r3
  4007ac:	4b2d      	ldr	r3, [pc, #180]	; (400864 <gfx_mono_generic_draw_horizontal_line+0x128>)
  4007ae:	4798      	blx	r3
  4007b0:	4603      	mov	r3, r0
  4007b2:	737b      	strb	r3, [r7, #13]
			temp |= pixelmask;
  4007b4:	7b7a      	ldrb	r2, [r7, #13]
  4007b6:	7bbb      	ldrb	r3, [r7, #14]
  4007b8:	4313      	orrs	r3, r2
  4007ba:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  4007bc:	79fa      	ldrb	r2, [r7, #7]
  4007be:	797b      	ldrb	r3, [r7, #5]
  4007c0:	4413      	add	r3, r2
  4007c2:	b2d9      	uxtb	r1, r3
  4007c4:	7b7a      	ldrb	r2, [r7, #13]
  4007c6:	7bf8      	ldrb	r0, [r7, #15]
  4007c8:	2300      	movs	r3, #0
  4007ca:	4c27      	ldr	r4, [pc, #156]	; (400868 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  4007cc:	47a0      	blx	r4
		while (length-- > 0) {
  4007ce:	797b      	ldrb	r3, [r7, #5]
  4007d0:	1e5a      	subs	r2, r3, #1
  4007d2:	717a      	strb	r2, [r7, #5]
  4007d4:	2b00      	cmp	r3, #0
  4007d6:	d1e2      	bne.n	40079e <gfx_mono_generic_draw_horizontal_line+0x62>
		break;
  4007d8:	e041      	b.n	40085e <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  4007da:	79fa      	ldrb	r2, [r7, #7]
  4007dc:	797b      	ldrb	r3, [r7, #5]
  4007de:	4413      	add	r3, r2
  4007e0:	b2da      	uxtb	r2, r3
  4007e2:	7bfb      	ldrb	r3, [r7, #15]
  4007e4:	4611      	mov	r1, r2
  4007e6:	4618      	mov	r0, r3
  4007e8:	4b1e      	ldr	r3, [pc, #120]	; (400864 <gfx_mono_generic_draw_horizontal_line+0x128>)
  4007ea:	4798      	blx	r3
  4007ec:	4603      	mov	r3, r0
  4007ee:	737b      	strb	r3, [r7, #13]
			temp &= ~pixelmask;
  4007f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
  4007f4:	43db      	mvns	r3, r3
  4007f6:	b25a      	sxtb	r2, r3
  4007f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
  4007fc:	4013      	ands	r3, r2
  4007fe:	b25b      	sxtb	r3, r3
  400800:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400802:	79fa      	ldrb	r2, [r7, #7]
  400804:	797b      	ldrb	r3, [r7, #5]
  400806:	4413      	add	r3, r2
  400808:	b2d9      	uxtb	r1, r3
  40080a:	7b7a      	ldrb	r2, [r7, #13]
  40080c:	7bf8      	ldrb	r0, [r7, #15]
  40080e:	2300      	movs	r3, #0
  400810:	4c15      	ldr	r4, [pc, #84]	; (400868 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400812:	47a0      	blx	r4
		while (length-- > 0) {
  400814:	797b      	ldrb	r3, [r7, #5]
  400816:	1e5a      	subs	r2, r3, #1
  400818:	717a      	strb	r2, [r7, #5]
  40081a:	2b00      	cmp	r3, #0
  40081c:	d1dd      	bne.n	4007da <gfx_mono_generic_draw_horizontal_line+0x9e>
		break;
  40081e:	e01e      	b.n	40085e <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400820:	79fa      	ldrb	r2, [r7, #7]
  400822:	797b      	ldrb	r3, [r7, #5]
  400824:	4413      	add	r3, r2
  400826:	b2da      	uxtb	r2, r3
  400828:	7bfb      	ldrb	r3, [r7, #15]
  40082a:	4611      	mov	r1, r2
  40082c:	4618      	mov	r0, r3
  40082e:	4b0d      	ldr	r3, [pc, #52]	; (400864 <gfx_mono_generic_draw_horizontal_line+0x128>)
  400830:	4798      	blx	r3
  400832:	4603      	mov	r3, r0
  400834:	737b      	strb	r3, [r7, #13]
			temp ^= pixelmask;
  400836:	7b7a      	ldrb	r2, [r7, #13]
  400838:	7bbb      	ldrb	r3, [r7, #14]
  40083a:	4053      	eors	r3, r2
  40083c:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  40083e:	79fa      	ldrb	r2, [r7, #7]
  400840:	797b      	ldrb	r3, [r7, #5]
  400842:	4413      	add	r3, r2
  400844:	b2d9      	uxtb	r1, r3
  400846:	7b7a      	ldrb	r2, [r7, #13]
  400848:	7bf8      	ldrb	r0, [r7, #15]
  40084a:	2300      	movs	r3, #0
  40084c:	4c06      	ldr	r4, [pc, #24]	; (400868 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  40084e:	47a0      	blx	r4
		while (length-- > 0) {
  400850:	797b      	ldrb	r3, [r7, #5]
  400852:	1e5a      	subs	r2, r3, #1
  400854:	717a      	strb	r2, [r7, #5]
  400856:	2b00      	cmp	r3, #0
  400858:	d1e2      	bne.n	400820 <gfx_mono_generic_draw_horizontal_line+0xe4>
		break;
  40085a:	e000      	b.n	40085e <gfx_mono_generic_draw_horizontal_line+0x122>
		return;
  40085c:	bf00      	nop
	}
}
  40085e:	3714      	adds	r7, #20
  400860:	46bd      	mov	sp, r7
  400862:	bd90      	pop	{r4, r7, pc}
  400864:	00400c79 	.word	0x00400c79
  400868:	00400bf5 	.word	0x00400bf5

0040086c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40086c:	b590      	push	{r4, r7, lr}
  40086e:	b083      	sub	sp, #12
  400870:	af00      	add	r7, sp, #0
  400872:	4604      	mov	r4, r0
  400874:	4608      	mov	r0, r1
  400876:	4611      	mov	r1, r2
  400878:	461a      	mov	r2, r3
  40087a:	4623      	mov	r3, r4
  40087c:	71fb      	strb	r3, [r7, #7]
  40087e:	4603      	mov	r3, r0
  400880:	71bb      	strb	r3, [r7, #6]
  400882:	460b      	mov	r3, r1
  400884:	717b      	strb	r3, [r7, #5]
  400886:	4613      	mov	r3, r2
  400888:	713b      	strb	r3, [r7, #4]
	if (height == 0) {
  40088a:	793b      	ldrb	r3, [r7, #4]
  40088c:	2b00      	cmp	r3, #0
  40088e:	d00f      	beq.n	4008b0 <gfx_mono_generic_draw_filled_rect+0x44>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
  400890:	e008      	b.n	4008a4 <gfx_mono_generic_draw_filled_rect+0x38>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400892:	79ba      	ldrb	r2, [r7, #6]
  400894:	793b      	ldrb	r3, [r7, #4]
  400896:	4413      	add	r3, r2
  400898:	b2d9      	uxtb	r1, r3
  40089a:	7e3b      	ldrb	r3, [r7, #24]
  40089c:	797a      	ldrb	r2, [r7, #5]
  40089e:	79f8      	ldrb	r0, [r7, #7]
  4008a0:	4c05      	ldr	r4, [pc, #20]	; (4008b8 <gfx_mono_generic_draw_filled_rect+0x4c>)
  4008a2:	47a0      	blx	r4
	while (height-- > 0) {
  4008a4:	793b      	ldrb	r3, [r7, #4]
  4008a6:	1e5a      	subs	r2, r3, #1
  4008a8:	713a      	strb	r2, [r7, #4]
  4008aa:	2b00      	cmp	r3, #0
  4008ac:	d1f1      	bne.n	400892 <gfx_mono_generic_draw_filled_rect+0x26>
  4008ae:	e000      	b.n	4008b2 <gfx_mono_generic_draw_filled_rect+0x46>
		return;
  4008b0:	bf00      	nop
	}
}
  4008b2:	370c      	adds	r7, #12
  4008b4:	46bd      	mov	sp, r7
  4008b6:	bd90      	pop	{r4, r7, pc}
  4008b8:	0040073d 	.word	0x0040073d

004008bc <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
  4008bc:	b580      	push	{r7, lr}
  4008be:	b086      	sub	sp, #24
  4008c0:	af00      	add	r7, sp, #0
  4008c2:	603b      	str	r3, [r7, #0]
  4008c4:	4603      	mov	r3, r0
  4008c6:	71fb      	strb	r3, [r7, #7]
  4008c8:	460b      	mov	r3, r1
  4008ca:	71bb      	strb	r3, [r7, #6]
  4008cc:	4613      	mov	r3, r2
  4008ce:	717b      	strb	r3, [r7, #5]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
  4008d0:	79bb      	ldrb	r3, [r7, #6]
  4008d2:	743b      	strb	r3, [r7, #16]
	gfx_coord_t inc_y = y;
  4008d4:	797b      	ldrb	r3, [r7, #5]
  4008d6:	73fb      	strb	r3, [r7, #15]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  4008d8:	683b      	ldr	r3, [r7, #0]
  4008da:	7a1b      	ldrb	r3, [r3, #8]
  4008dc:	08db      	lsrs	r3, r3, #3
  4008de:	74fb      	strb	r3, [r7, #19]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  4008e0:	683b      	ldr	r3, [r7, #0]
  4008e2:	7a1b      	ldrb	r3, [r3, #8]
  4008e4:	f003 0307 	and.w	r3, r3, #7
  4008e8:	b2db      	uxtb	r3, r3
  4008ea:	2b00      	cmp	r3, #0
  4008ec:	d002      	beq.n	4008f4 <gfx_mono_draw_char_progmem+0x38>
		char_row_size++;
  4008ee:	7cfb      	ldrb	r3, [r7, #19]
  4008f0:	3301      	adds	r3, #1
  4008f2:	74fb      	strb	r3, [r7, #19]
	}

	glyph_data_offset = char_row_size * font->height *
  4008f4:	7cfb      	ldrb	r3, [r7, #19]
  4008f6:	b29a      	uxth	r2, r3
  4008f8:	683b      	ldr	r3, [r7, #0]
  4008fa:	7a5b      	ldrb	r3, [r3, #9]
  4008fc:	b29b      	uxth	r3, r3
  4008fe:	fb12 f303 	smulbb	r3, r2, r3
  400902:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
  400904:	79fb      	ldrb	r3, [r7, #7]
  400906:	6839      	ldr	r1, [r7, #0]
  400908:	7a89      	ldrb	r1, [r1, #10]
  40090a:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
  40090c:	b29b      	uxth	r3, r3
  40090e:	fb12 f303 	smulbb	r3, r2, r3
  400912:	81bb      	strh	r3, [r7, #12]
	glyph_data = font->data.progmem + glyph_data_offset;
  400914:	683b      	ldr	r3, [r7, #0]
  400916:	685a      	ldr	r2, [r3, #4]
  400918:	89bb      	ldrh	r3, [r7, #12]
  40091a:	4413      	add	r3, r2
  40091c:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
  40091e:	683b      	ldr	r3, [r7, #0]
  400920:	7a5b      	ldrb	r3, [r3, #9]
  400922:	74bb      	strb	r3, [r7, #18]

	do {
		uint8_t glyph_byte = 0;
  400924:	2300      	movs	r3, #0
  400926:	73bb      	strb	r3, [r7, #14]
		uint8_t pixelsToDraw = font->width;
  400928:	683b      	ldr	r3, [r7, #0]
  40092a:	7a1b      	ldrb	r3, [r3, #8]
  40092c:	72fb      	strb	r3, [r7, #11]

		for (i = 0; i < pixelsToDraw; i++) {
  40092e:	2300      	movs	r3, #0
  400930:	747b      	strb	r3, [r7, #17]
  400932:	e01e      	b.n	400972 <gfx_mono_draw_char_progmem+0xb6>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400934:	7c7b      	ldrb	r3, [r7, #17]
  400936:	f003 0307 	and.w	r3, r3, #7
  40093a:	b2db      	uxtb	r3, r3
  40093c:	2b00      	cmp	r3, #0
  40093e:	d105      	bne.n	40094c <gfx_mono_draw_char_progmem+0x90>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400940:	697b      	ldr	r3, [r7, #20]
  400942:	781b      	ldrb	r3, [r3, #0]
  400944:	73bb      	strb	r3, [r7, #14]
				glyph_data++;
  400946:	697b      	ldr	r3, [r7, #20]
  400948:	3301      	adds	r3, #1
  40094a:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
  40094c:	f997 300e 	ldrsb.w	r3, [r7, #14]
  400950:	2b00      	cmp	r3, #0
  400952:	da05      	bge.n	400960 <gfx_mono_draw_char_progmem+0xa4>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400954:	7bf9      	ldrb	r1, [r7, #15]
  400956:	7c3b      	ldrb	r3, [r7, #16]
  400958:	2201      	movs	r2, #1
  40095a:	4618      	mov	r0, r3
  40095c:	4b0e      	ldr	r3, [pc, #56]	; (400998 <gfx_mono_draw_char_progmem+0xdc>)
  40095e:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
  400960:	7c3b      	ldrb	r3, [r7, #16]
  400962:	3301      	adds	r3, #1
  400964:	743b      	strb	r3, [r7, #16]
			glyph_byte <<= 1;
  400966:	7bbb      	ldrb	r3, [r7, #14]
  400968:	005b      	lsls	r3, r3, #1
  40096a:	73bb      	strb	r3, [r7, #14]
		for (i = 0; i < pixelsToDraw; i++) {
  40096c:	7c7b      	ldrb	r3, [r7, #17]
  40096e:	3301      	adds	r3, #1
  400970:	747b      	strb	r3, [r7, #17]
  400972:	7c7a      	ldrb	r2, [r7, #17]
  400974:	7afb      	ldrb	r3, [r7, #11]
  400976:	429a      	cmp	r2, r3
  400978:	d3dc      	bcc.n	400934 <gfx_mono_draw_char_progmem+0x78>
		}

		inc_y += 1;
  40097a:	7bfb      	ldrb	r3, [r7, #15]
  40097c:	3301      	adds	r3, #1
  40097e:	73fb      	strb	r3, [r7, #15]
		inc_x = x;
  400980:	79bb      	ldrb	r3, [r7, #6]
  400982:	743b      	strb	r3, [r7, #16]
		rows_left--;
  400984:	7cbb      	ldrb	r3, [r7, #18]
  400986:	3b01      	subs	r3, #1
  400988:	74bb      	strb	r3, [r7, #18]
	} while (rows_left > 0);
  40098a:	7cbb      	ldrb	r3, [r7, #18]
  40098c:	2b00      	cmp	r3, #0
  40098e:	d1c9      	bne.n	400924 <gfx_mono_draw_char_progmem+0x68>
}
  400990:	bf00      	nop
  400992:	3718      	adds	r7, #24
  400994:	46bd      	mov	sp, r7
  400996:	bd80      	pop	{r7, pc}
  400998:	00400b59 	.word	0x00400b59

0040099c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  40099c:	b590      	push	{r4, r7, lr}
  40099e:	b085      	sub	sp, #20
  4009a0:	af02      	add	r7, sp, #8
  4009a2:	603b      	str	r3, [r7, #0]
  4009a4:	4603      	mov	r3, r0
  4009a6:	71fb      	strb	r3, [r7, #7]
  4009a8:	460b      	mov	r3, r1
  4009aa:	71bb      	strb	r3, [r7, #6]
  4009ac:	4613      	mov	r3, r2
  4009ae:	717b      	strb	r3, [r7, #5]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  4009b0:	683b      	ldr	r3, [r7, #0]
  4009b2:	7a1a      	ldrb	r2, [r3, #8]
  4009b4:	683b      	ldr	r3, [r7, #0]
  4009b6:	7a5c      	ldrb	r4, [r3, #9]
  4009b8:	7979      	ldrb	r1, [r7, #5]
  4009ba:	79b8      	ldrb	r0, [r7, #6]
  4009bc:	2300      	movs	r3, #0
  4009be:	9300      	str	r3, [sp, #0]
  4009c0:	4623      	mov	r3, r4
  4009c2:	4c09      	ldr	r4, [pc, #36]	; (4009e8 <gfx_mono_draw_char+0x4c>)
  4009c4:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
  4009c6:	683b      	ldr	r3, [r7, #0]
  4009c8:	781b      	ldrb	r3, [r3, #0]
  4009ca:	2b00      	cmp	r3, #0
  4009cc:	d000      	beq.n	4009d0 <gfx_mono_draw_char+0x34>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
  4009ce:	e006      	b.n	4009de <gfx_mono_draw_char+0x42>
		gfx_mono_draw_char_progmem(c, x, y, font);
  4009d0:	797a      	ldrb	r2, [r7, #5]
  4009d2:	79b9      	ldrb	r1, [r7, #6]
  4009d4:	79f8      	ldrb	r0, [r7, #7]
  4009d6:	683b      	ldr	r3, [r7, #0]
  4009d8:	4c04      	ldr	r4, [pc, #16]	; (4009ec <gfx_mono_draw_char+0x50>)
  4009da:	47a0      	blx	r4
		break;
  4009dc:	bf00      	nop
	}
}
  4009de:	bf00      	nop
  4009e0:	370c      	adds	r7, #12
  4009e2:	46bd      	mov	sp, r7
  4009e4:	bd90      	pop	{r4, r7, pc}
  4009e6:	bf00      	nop
  4009e8:	0040086d 	.word	0x0040086d
  4009ec:	004008bd 	.word	0x004008bd

004009f0 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  4009f0:	b590      	push	{r4, r7, lr}
  4009f2:	b087      	sub	sp, #28
  4009f4:	af00      	add	r7, sp, #0
  4009f6:	60f8      	str	r0, [r7, #12]
  4009f8:	607b      	str	r3, [r7, #4]
  4009fa:	460b      	mov	r3, r1
  4009fc:	72fb      	strb	r3, [r7, #11]
  4009fe:	4613      	mov	r3, r2
  400a00:	72bb      	strb	r3, [r7, #10]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
  400a02:	7afb      	ldrb	r3, [r7, #11]
  400a04:	75fb      	strb	r3, [r7, #23]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
  400a06:	68fb      	ldr	r3, [r7, #12]
  400a08:	781b      	ldrb	r3, [r3, #0]
  400a0a:	2b0a      	cmp	r3, #10
  400a0c:	d109      	bne.n	400a22 <gfx_mono_draw_string+0x32>
			x = start_of_string_position_x;
  400a0e:	7dfb      	ldrb	r3, [r7, #23]
  400a10:	72fb      	strb	r3, [r7, #11]
			y += font->height + 1;
  400a12:	687b      	ldr	r3, [r7, #4]
  400a14:	7a5a      	ldrb	r2, [r3, #9]
  400a16:	7abb      	ldrb	r3, [r7, #10]
  400a18:	4413      	add	r3, r2
  400a1a:	b2db      	uxtb	r3, r3
  400a1c:	3301      	adds	r3, #1
  400a1e:	72bb      	strb	r3, [r7, #10]
  400a20:	e00f      	b.n	400a42 <gfx_mono_draw_string+0x52>
		} else if (*str == '\r') {
  400a22:	68fb      	ldr	r3, [r7, #12]
  400a24:	781b      	ldrb	r3, [r3, #0]
  400a26:	2b0d      	cmp	r3, #13
  400a28:	d00b      	beq.n	400a42 <gfx_mono_draw_string+0x52>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400a2a:	68fb      	ldr	r3, [r7, #12]
  400a2c:	7818      	ldrb	r0, [r3, #0]
  400a2e:	7aba      	ldrb	r2, [r7, #10]
  400a30:	7af9      	ldrb	r1, [r7, #11]
  400a32:	687b      	ldr	r3, [r7, #4]
  400a34:	4c08      	ldr	r4, [pc, #32]	; (400a58 <gfx_mono_draw_string+0x68>)
  400a36:	47a0      	blx	r4
			x += font->width;
  400a38:	687b      	ldr	r3, [r7, #4]
  400a3a:	7a1a      	ldrb	r2, [r3, #8]
  400a3c:	7afb      	ldrb	r3, [r7, #11]
  400a3e:	4413      	add	r3, r2
  400a40:	72fb      	strb	r3, [r7, #11]
		}
	} while (*(++str));
  400a42:	68fb      	ldr	r3, [r7, #12]
  400a44:	3301      	adds	r3, #1
  400a46:	60fb      	str	r3, [r7, #12]
  400a48:	68fb      	ldr	r3, [r7, #12]
  400a4a:	781b      	ldrb	r3, [r3, #0]
  400a4c:	2b00      	cmp	r3, #0
  400a4e:	d1da      	bne.n	400a06 <gfx_mono_draw_string+0x16>
}
  400a50:	bf00      	nop
  400a52:	371c      	adds	r7, #28
  400a54:	46bd      	mov	sp, r7
  400a56:	bd90      	pop	{r4, r7, pc}
  400a58:	0040099d 	.word	0x0040099d

00400a5c <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
  400a5c:	b580      	push	{r7, lr}
  400a5e:	b082      	sub	sp, #8
  400a60:	af00      	add	r7, sp, #0
  400a62:	4603      	mov	r3, r0
  400a64:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400a66:	79fb      	ldrb	r3, [r7, #7]
  400a68:	f003 030f 	and.w	r3, r3, #15
  400a6c:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400a6e:	79fb      	ldrb	r3, [r7, #7]
  400a70:	f063 034f 	orn	r3, r3, #79	; 0x4f
  400a74:	b2db      	uxtb	r3, r3
  400a76:	4618      	mov	r0, r3
  400a78:	4b02      	ldr	r3, [pc, #8]	; (400a84 <ssd1306_set_page_address+0x28>)
  400a7a:	4798      	blx	r3
	
}
  400a7c:	bf00      	nop
  400a7e:	3708      	adds	r7, #8
  400a80:	46bd      	mov	sp, r7
  400a82:	bd80      	pop	{r7, pc}
  400a84:	00401361 	.word	0x00401361

00400a88 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
  400a88:	b580      	push	{r7, lr}
  400a8a:	b082      	sub	sp, #8
  400a8c:	af00      	add	r7, sp, #0
  400a8e:	4603      	mov	r3, r0
  400a90:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
  400a92:	79fb      	ldrb	r3, [r7, #7]
  400a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400a98:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400a9a:	79fb      	ldrb	r3, [r7, #7]
  400a9c:	091b      	lsrs	r3, r3, #4
  400a9e:	b2db      	uxtb	r3, r3
  400aa0:	f043 0310 	orr.w	r3, r3, #16
  400aa4:	b2db      	uxtb	r3, r3
  400aa6:	4618      	mov	r0, r3
  400aa8:	4b06      	ldr	r3, [pc, #24]	; (400ac4 <ssd1306_set_column_address+0x3c>)
  400aaa:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400aac:	79fb      	ldrb	r3, [r7, #7]
  400aae:	f003 030f 	and.w	r3, r3, #15
  400ab2:	b2db      	uxtb	r3, r3
  400ab4:	4618      	mov	r0, r3
  400ab6:	4b03      	ldr	r3, [pc, #12]	; (400ac4 <ssd1306_set_column_address+0x3c>)
  400ab8:	4798      	blx	r3
}
  400aba:	bf00      	nop
  400abc:	3708      	adds	r7, #8
  400abe:	46bd      	mov	sp, r7
  400ac0:	bd80      	pop	{r7, pc}
  400ac2:	bf00      	nop
  400ac4:	00401361 	.word	0x00401361

00400ac8 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
  400ac8:	b580      	push	{r7, lr}
  400aca:	b082      	sub	sp, #8
  400acc:	af00      	add	r7, sp, #0
  400ace:	4603      	mov	r3, r0
  400ad0:	71fb      	strb	r3, [r7, #7]
	// Make sure address is 6 bits
	address &= 0x3F;
  400ad2:	79fb      	ldrb	r3, [r7, #7]
  400ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400ad8:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400ada:	79fb      	ldrb	r3, [r7, #7]
  400adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400ae0:	b2db      	uxtb	r3, r3
  400ae2:	4618      	mov	r0, r3
  400ae4:	4b02      	ldr	r3, [pc, #8]	; (400af0 <ssd1306_set_display_start_line_address+0x28>)
  400ae6:	4798      	blx	r3
}
  400ae8:	bf00      	nop
  400aea:	3708      	adds	r7, #8
  400aec:	46bd      	mov	sp, r7
  400aee:	bd80      	pop	{r7, pc}
  400af0:	00401361 	.word	0x00401361

00400af4 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
  400af4:	b590      	push	{r4, r7, lr}
  400af6:	b083      	sub	sp, #12
  400af8:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
  400afa:	4812      	ldr	r0, [pc, #72]	; (400b44 <gfx_mono_ssd1306_init+0x50>)
  400afc:	4b12      	ldr	r3, [pc, #72]	; (400b48 <gfx_mono_ssd1306_init+0x54>)
  400afe:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
  400b00:	4b12      	ldr	r3, [pc, #72]	; (400b4c <gfx_mono_ssd1306_init+0x58>)
  400b02:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
  400b04:	2000      	movs	r0, #0
  400b06:	4b12      	ldr	r3, [pc, #72]	; (400b50 <gfx_mono_ssd1306_init+0x5c>)
  400b08:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b0a:	2300      	movs	r3, #0
  400b0c:	71fb      	strb	r3, [r7, #7]
  400b0e:	e012      	b.n	400b36 <gfx_mono_ssd1306_init+0x42>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400b10:	2300      	movs	r3, #0
  400b12:	71bb      	strb	r3, [r7, #6]
  400b14:	e008      	b.n	400b28 <gfx_mono_ssd1306_init+0x34>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400b16:	79b9      	ldrb	r1, [r7, #6]
  400b18:	79f8      	ldrb	r0, [r7, #7]
  400b1a:	2301      	movs	r3, #1
  400b1c:	2200      	movs	r2, #0
  400b1e:	4c0d      	ldr	r4, [pc, #52]	; (400b54 <gfx_mono_ssd1306_init+0x60>)
  400b20:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400b22:	79bb      	ldrb	r3, [r7, #6]
  400b24:	3301      	adds	r3, #1
  400b26:	71bb      	strb	r3, [r7, #6]
  400b28:	f997 3006 	ldrsb.w	r3, [r7, #6]
  400b2c:	2b00      	cmp	r3, #0
  400b2e:	daf2      	bge.n	400b16 <gfx_mono_ssd1306_init+0x22>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b30:	79fb      	ldrb	r3, [r7, #7]
  400b32:	3301      	adds	r3, #1
  400b34:	71fb      	strb	r3, [r7, #7]
  400b36:	79fb      	ldrb	r3, [r7, #7]
  400b38:	2b03      	cmp	r3, #3
  400b3a:	d9e9      	bls.n	400b10 <gfx_mono_ssd1306_init+0x1c>
		}
	}
}
  400b3c:	bf00      	nop
  400b3e:	370c      	adds	r7, #12
  400b40:	46bd      	mov	sp, r7
  400b42:	bd90      	pop	{r4, r7, pc}
  400b44:	20400480 	.word	0x20400480
  400b48:	004006b1 	.word	0x004006b1
  400b4c:	004012b1 	.word	0x004012b1
  400b50:	00400ac9 	.word	0x00400ac9
  400b54:	00400bf5 	.word	0x00400bf5

00400b58 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
  400b58:	b590      	push	{r4, r7, lr}
  400b5a:	b085      	sub	sp, #20
  400b5c:	af00      	add	r7, sp, #0
  400b5e:	4603      	mov	r3, r0
  400b60:	71fb      	strb	r3, [r7, #7]
  400b62:	460b      	mov	r3, r1
  400b64:	71bb      	strb	r3, [r7, #6]
  400b66:	4613      	mov	r3, r2
  400b68:	717b      	strb	r3, [r7, #5]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b6e:	2b00      	cmp	r3, #0
  400b70:	db38      	blt.n	400be4 <gfx_mono_ssd1306_draw_pixel+0x8c>
  400b72:	79bb      	ldrb	r3, [r7, #6]
  400b74:	2b1f      	cmp	r3, #31
  400b76:	d835      	bhi.n	400be4 <gfx_mono_ssd1306_draw_pixel+0x8c>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400b78:	79bb      	ldrb	r3, [r7, #6]
  400b7a:	08db      	lsrs	r3, r3, #3
  400b7c:	73bb      	strb	r3, [r7, #14]
	pixel_mask = (1 << (y - (page * 8)));
  400b7e:	79ba      	ldrb	r2, [r7, #6]
  400b80:	7bbb      	ldrb	r3, [r7, #14]
  400b82:	00db      	lsls	r3, r3, #3
  400b84:	1ad3      	subs	r3, r2, r3
  400b86:	2201      	movs	r2, #1
  400b88:	fa02 f303 	lsl.w	r3, r2, r3
  400b8c:	737b      	strb	r3, [r7, #13]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
  400b8e:	79fa      	ldrb	r2, [r7, #7]
  400b90:	7bbb      	ldrb	r3, [r7, #14]
  400b92:	4611      	mov	r1, r2
  400b94:	4618      	mov	r0, r3
  400b96:	4b15      	ldr	r3, [pc, #84]	; (400bec <gfx_mono_ssd1306_draw_pixel+0x94>)
  400b98:	4798      	blx	r3
  400b9a:	4603      	mov	r3, r0
  400b9c:	73fb      	strb	r3, [r7, #15]

	switch (color) {
  400b9e:	797b      	ldrb	r3, [r7, #5]
  400ba0:	2b01      	cmp	r3, #1
  400ba2:	d004      	beq.n	400bae <gfx_mono_ssd1306_draw_pixel+0x56>
  400ba4:	2b02      	cmp	r3, #2
  400ba6:	d011      	beq.n	400bcc <gfx_mono_ssd1306_draw_pixel+0x74>
  400ba8:	2b00      	cmp	r3, #0
  400baa:	d005      	beq.n	400bb8 <gfx_mono_ssd1306_draw_pixel+0x60>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
  400bac:	e013      	b.n	400bd6 <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value |= pixel_mask;
  400bae:	7bfa      	ldrb	r2, [r7, #15]
  400bb0:	7b7b      	ldrb	r3, [r7, #13]
  400bb2:	4313      	orrs	r3, r2
  400bb4:	73fb      	strb	r3, [r7, #15]
		break;
  400bb6:	e00e      	b.n	400bd6 <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value &= ~pixel_mask;
  400bb8:	f997 300d 	ldrsb.w	r3, [r7, #13]
  400bbc:	43db      	mvns	r3, r3
  400bbe:	b25a      	sxtb	r2, r3
  400bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  400bc4:	4013      	ands	r3, r2
  400bc6:	b25b      	sxtb	r3, r3
  400bc8:	73fb      	strb	r3, [r7, #15]
		break;
  400bca:	e004      	b.n	400bd6 <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value ^= pixel_mask;
  400bcc:	7bfa      	ldrb	r2, [r7, #15]
  400bce:	7b7b      	ldrb	r3, [r7, #13]
  400bd0:	4053      	eors	r3, r2
  400bd2:	73fb      	strb	r3, [r7, #15]
		break;
  400bd4:	bf00      	nop
	}

	gfx_mono_put_byte(page, x, pixel_value);
  400bd6:	7bfa      	ldrb	r2, [r7, #15]
  400bd8:	79f9      	ldrb	r1, [r7, #7]
  400bda:	7bb8      	ldrb	r0, [r7, #14]
  400bdc:	2300      	movs	r3, #0
  400bde:	4c04      	ldr	r4, [pc, #16]	; (400bf0 <gfx_mono_ssd1306_draw_pixel+0x98>)
  400be0:	47a0      	blx	r4
  400be2:	e000      	b.n	400be6 <gfx_mono_ssd1306_draw_pixel+0x8e>
		return;
  400be4:	bf00      	nop
}
  400be6:	3714      	adds	r7, #20
  400be8:	46bd      	mov	sp, r7
  400bea:	bd90      	pop	{r4, r7, pc}
  400bec:	00400c79 	.word	0x00400c79
  400bf0:	00400bf5 	.word	0x00400bf5

00400bf4 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400bf4:	b590      	push	{r4, r7, lr}
  400bf6:	b083      	sub	sp, #12
  400bf8:	af00      	add	r7, sp, #0
  400bfa:	4604      	mov	r4, r0
  400bfc:	4608      	mov	r0, r1
  400bfe:	4611      	mov	r1, r2
  400c00:	461a      	mov	r2, r3
  400c02:	4623      	mov	r3, r4
  400c04:	71fb      	strb	r3, [r7, #7]
  400c06:	4603      	mov	r3, r0
  400c08:	71bb      	strb	r3, [r7, #6]
  400c0a:	460b      	mov	r3, r1
  400c0c:	717b      	strb	r3, [r7, #5]
  400c0e:	4613      	mov	r3, r2
  400c10:	713b      	strb	r3, [r7, #4]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400c12:	793b      	ldrb	r3, [r7, #4]
  400c14:	f083 0301 	eor.w	r3, r3, #1
  400c18:	b2db      	uxtb	r3, r3
  400c1a:	2b00      	cmp	r3, #0
  400c1c:	d00a      	beq.n	400c34 <gfx_mono_ssd1306_put_byte+0x40>
  400c1e:	79ba      	ldrb	r2, [r7, #6]
  400c20:	79fb      	ldrb	r3, [r7, #7]
  400c22:	4611      	mov	r1, r2
  400c24:	4618      	mov	r0, r3
  400c26:	4b0f      	ldr	r3, [pc, #60]	; (400c64 <gfx_mono_ssd1306_put_byte+0x70>)
  400c28:	4798      	blx	r3
  400c2a:	4603      	mov	r3, r0
  400c2c:	461a      	mov	r2, r3
  400c2e:	797b      	ldrb	r3, [r7, #5]
  400c30:	4293      	cmp	r3, r2
  400c32:	d012      	beq.n	400c5a <gfx_mono_ssd1306_put_byte+0x66>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400c34:	797a      	ldrb	r2, [r7, #5]
  400c36:	79b9      	ldrb	r1, [r7, #6]
  400c38:	79fb      	ldrb	r3, [r7, #7]
  400c3a:	4618      	mov	r0, r3
  400c3c:	4b0a      	ldr	r3, [pc, #40]	; (400c68 <gfx_mono_ssd1306_put_byte+0x74>)
  400c3e:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
  400c40:	79fb      	ldrb	r3, [r7, #7]
  400c42:	4618      	mov	r0, r3
  400c44:	4b09      	ldr	r3, [pc, #36]	; (400c6c <gfx_mono_ssd1306_put_byte+0x78>)
  400c46:	4798      	blx	r3
	ssd1306_set_column_address(column);
  400c48:	79bb      	ldrb	r3, [r7, #6]
  400c4a:	4618      	mov	r0, r3
  400c4c:	4b08      	ldr	r3, [pc, #32]	; (400c70 <gfx_mono_ssd1306_put_byte+0x7c>)
  400c4e:	4798      	blx	r3

	ssd1306_write_data(data);
  400c50:	797b      	ldrb	r3, [r7, #5]
  400c52:	4618      	mov	r0, r3
  400c54:	4b07      	ldr	r3, [pc, #28]	; (400c74 <gfx_mono_ssd1306_put_byte+0x80>)
  400c56:	4798      	blx	r3
  400c58:	e000      	b.n	400c5c <gfx_mono_ssd1306_put_byte+0x68>
		return;
  400c5a:	bf00      	nop
}
  400c5c:	370c      	adds	r7, #12
  400c5e:	46bd      	mov	sp, r7
  400c60:	bd90      	pop	{r4, r7, pc}
  400c62:	bf00      	nop
  400c64:	00400709 	.word	0x00400709
  400c68:	004006d1 	.word	0x004006d1
  400c6c:	00400a5d 	.word	0x00400a5d
  400c70:	00400a89 	.word	0x00400a89
  400c74:	00401405 	.word	0x00401405

00400c78 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  400c78:	b580      	push	{r7, lr}
  400c7a:	b082      	sub	sp, #8
  400c7c:	af00      	add	r7, sp, #0
  400c7e:	4603      	mov	r3, r0
  400c80:	460a      	mov	r2, r1
  400c82:	71fb      	strb	r3, [r7, #7]
  400c84:	4613      	mov	r3, r2
  400c86:	71bb      	strb	r3, [r7, #6]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400c88:	79ba      	ldrb	r2, [r7, #6]
  400c8a:	79fb      	ldrb	r3, [r7, #7]
  400c8c:	4611      	mov	r1, r2
  400c8e:	4618      	mov	r0, r3
  400c90:	4b03      	ldr	r3, [pc, #12]	; (400ca0 <gfx_mono_ssd1306_get_byte+0x28>)
  400c92:	4798      	blx	r3
  400c94:	4603      	mov	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400c96:	4618      	mov	r0, r3
  400c98:	3708      	adds	r7, #8
  400c9a:	46bd      	mov	sp, r7
  400c9c:	bd80      	pop	{r7, pc}
  400c9e:	bf00      	nop
  400ca0:	00400709 	.word	0x00400709

00400ca4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400ca4:	b480      	push	{r7}
  400ca6:	b083      	sub	sp, #12
  400ca8:	af00      	add	r7, sp, #0
  400caa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400cac:	687b      	ldr	r3, [r7, #4]
  400cae:	2b07      	cmp	r3, #7
  400cb0:	d825      	bhi.n	400cfe <osc_get_rate+0x5a>
  400cb2:	a201      	add	r2, pc, #4	; (adr r2, 400cb8 <osc_get_rate+0x14>)
  400cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400cb8:	00400cd9 	.word	0x00400cd9
  400cbc:	00400cdf 	.word	0x00400cdf
  400cc0:	00400ce5 	.word	0x00400ce5
  400cc4:	00400ceb 	.word	0x00400ceb
  400cc8:	00400cef 	.word	0x00400cef
  400ccc:	00400cf3 	.word	0x00400cf3
  400cd0:	00400cf7 	.word	0x00400cf7
  400cd4:	00400cfb 	.word	0x00400cfb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400cd8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400cdc:	e010      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ce2:	e00d      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ce8:	e00a      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400cea:	4b08      	ldr	r3, [pc, #32]	; (400d0c <osc_get_rate+0x68>)
  400cec:	e008      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400cee:	4b08      	ldr	r3, [pc, #32]	; (400d10 <osc_get_rate+0x6c>)
  400cf0:	e006      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400cf2:	4b08      	ldr	r3, [pc, #32]	; (400d14 <osc_get_rate+0x70>)
  400cf4:	e004      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400cf6:	4b07      	ldr	r3, [pc, #28]	; (400d14 <osc_get_rate+0x70>)
  400cf8:	e002      	b.n	400d00 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400cfa:	4b06      	ldr	r3, [pc, #24]	; (400d14 <osc_get_rate+0x70>)
  400cfc:	e000      	b.n	400d00 <osc_get_rate+0x5c>
	}

	return 0;
  400cfe:	2300      	movs	r3, #0
}
  400d00:	4618      	mov	r0, r3
  400d02:	370c      	adds	r7, #12
  400d04:	46bd      	mov	sp, r7
  400d06:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d0a:	4770      	bx	lr
  400d0c:	003d0900 	.word	0x003d0900
  400d10:	007a1200 	.word	0x007a1200
  400d14:	00b71b00 	.word	0x00b71b00

00400d18 <sysclk_get_main_hz>:
{
  400d18:	b580      	push	{r7, lr}
  400d1a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400d1c:	2006      	movs	r0, #6
  400d1e:	4b05      	ldr	r3, [pc, #20]	; (400d34 <sysclk_get_main_hz+0x1c>)
  400d20:	4798      	blx	r3
  400d22:	4602      	mov	r2, r0
  400d24:	4613      	mov	r3, r2
  400d26:	009b      	lsls	r3, r3, #2
  400d28:	4413      	add	r3, r2
  400d2a:	009a      	lsls	r2, r3, #2
  400d2c:	4413      	add	r3, r2
}
  400d2e:	4618      	mov	r0, r3
  400d30:	bd80      	pop	{r7, pc}
  400d32:	bf00      	nop
  400d34:	00400ca5 	.word	0x00400ca5

00400d38 <sysclk_get_cpu_hz>:
{
  400d38:	b580      	push	{r7, lr}
  400d3a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400d3c:	4b02      	ldr	r3, [pc, #8]	; (400d48 <sysclk_get_cpu_hz+0x10>)
  400d3e:	4798      	blx	r3
  400d40:	4603      	mov	r3, r0
}
  400d42:	4618      	mov	r0, r3
  400d44:	bd80      	pop	{r7, pc}
  400d46:	bf00      	nop
  400d48:	00400d19 	.word	0x00400d19

00400d4c <sysclk_get_peripheral_hz>:
{
  400d4c:	b580      	push	{r7, lr}
  400d4e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400d50:	4b02      	ldr	r3, [pc, #8]	; (400d5c <sysclk_get_peripheral_hz+0x10>)
  400d52:	4798      	blx	r3
  400d54:	4603      	mov	r3, r0
  400d56:	085b      	lsrs	r3, r3, #1
}
  400d58:	4618      	mov	r0, r3
  400d5a:	bd80      	pop	{r7, pc}
  400d5c:	00400d19 	.word	0x00400d19

00400d60 <ioport_enable_pin>:
 * IOPORT_CREATE_PIN().
 *
 * \param pin  IOPORT pin to enable
 */
static inline void ioport_enable_pin(ioport_pin_t pin)
{
  400d60:	b480      	push	{r7}
  400d62:	b089      	sub	sp, #36	; 0x24
  400d64:	af00      	add	r7, sp, #0
  400d66:	6078      	str	r0, [r7, #4]
  400d68:	687b      	ldr	r3, [r7, #4]
  400d6a:	61fb      	str	r3, [r7, #28]
  400d6c:	69fb      	ldr	r3, [r7, #28]
  400d6e:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400d70:	69bb      	ldr	r3, [r7, #24]
  400d72:	095a      	lsrs	r2, r3, #5
  400d74:	69fb      	ldr	r3, [r7, #28]
  400d76:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400d78:	697b      	ldr	r3, [r7, #20]
  400d7a:	f003 031f 	and.w	r3, r3, #31
  400d7e:	2101      	movs	r1, #1
  400d80:	fa01 f303 	lsl.w	r3, r1, r3
  400d84:	613a      	str	r2, [r7, #16]
  400d86:	60fb      	str	r3, [r7, #12]
  400d88:	693b      	ldr	r3, [r7, #16]
  400d8a:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400d8c:	68ba      	ldr	r2, [r7, #8]
  400d8e:	4b06      	ldr	r3, [pc, #24]	; (400da8 <ioport_enable_pin+0x48>)
  400d90:	4413      	add	r3, r2
  400d92:	025b      	lsls	r3, r3, #9
  400d94:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400d96:	68fb      	ldr	r3, [r7, #12]
  400d98:	6013      	str	r3, [r2, #0]
	arch_ioport_enable_pin(pin);
}
  400d9a:	bf00      	nop
  400d9c:	3724      	adds	r7, #36	; 0x24
  400d9e:	46bd      	mov	sp, r7
  400da0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400da4:	4770      	bx	lr
  400da6:	bf00      	nop
  400da8:	00200707 	.word	0x00200707

00400dac <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400dac:	b480      	push	{r7}
  400dae:	b08d      	sub	sp, #52	; 0x34
  400db0:	af00      	add	r7, sp, #0
  400db2:	6078      	str	r0, [r7, #4]
  400db4:	6039      	str	r1, [r7, #0]
  400db6:	687b      	ldr	r3, [r7, #4]
  400db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  400dba:	683b      	ldr	r3, [r7, #0]
  400dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  400dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400dc0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400dc4:	095a      	lsrs	r2, r3, #5
  400dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400dc8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400dca:	6a3b      	ldr	r3, [r7, #32]
  400dcc:	f003 031f 	and.w	r3, r3, #31
  400dd0:	2101      	movs	r1, #1
  400dd2:	fa01 f303 	lsl.w	r3, r1, r3
  400dd6:	61fa      	str	r2, [r7, #28]
  400dd8:	61bb      	str	r3, [r7, #24]
  400dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400ddc:	617b      	str	r3, [r7, #20]
  400dde:	69fb      	ldr	r3, [r7, #28]
  400de0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400de2:	693a      	ldr	r2, [r7, #16]
  400de4:	4b37      	ldr	r3, [pc, #220]	; (400ec4 <ioport_set_pin_mode+0x118>)
  400de6:	4413      	add	r3, r2
  400de8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400dea:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400dec:	697b      	ldr	r3, [r7, #20]
  400dee:	f003 0308 	and.w	r3, r3, #8
  400df2:	2b00      	cmp	r3, #0
  400df4:	d003      	beq.n	400dfe <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  400df6:	68fb      	ldr	r3, [r7, #12]
  400df8:	69ba      	ldr	r2, [r7, #24]
  400dfa:	665a      	str	r2, [r3, #100]	; 0x64
  400dfc:	e002      	b.n	400e04 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  400dfe:	68fb      	ldr	r3, [r7, #12]
  400e00:	69ba      	ldr	r2, [r7, #24]
  400e02:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400e04:	697b      	ldr	r3, [r7, #20]
  400e06:	f003 0310 	and.w	r3, r3, #16
  400e0a:	2b00      	cmp	r3, #0
  400e0c:	d004      	beq.n	400e18 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  400e0e:	68fb      	ldr	r3, [r7, #12]
  400e10:	69ba      	ldr	r2, [r7, #24]
  400e12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400e16:	e003      	b.n	400e20 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400e18:	68fb      	ldr	r3, [r7, #12]
  400e1a:	69ba      	ldr	r2, [r7, #24]
  400e1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400e20:	697b      	ldr	r3, [r7, #20]
  400e22:	f003 0320 	and.w	r3, r3, #32
  400e26:	2b00      	cmp	r3, #0
  400e28:	d003      	beq.n	400e32 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400e2a:	68fb      	ldr	r3, [r7, #12]
  400e2c:	69ba      	ldr	r2, [r7, #24]
  400e2e:	651a      	str	r2, [r3, #80]	; 0x50
  400e30:	e002      	b.n	400e38 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400e32:	68fb      	ldr	r3, [r7, #12]
  400e34:	69ba      	ldr	r2, [r7, #24]
  400e36:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400e38:	697b      	ldr	r3, [r7, #20]
  400e3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400e3e:	2b00      	cmp	r3, #0
  400e40:	d003      	beq.n	400e4a <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400e42:	68fb      	ldr	r3, [r7, #12]
  400e44:	69ba      	ldr	r2, [r7, #24]
  400e46:	621a      	str	r2, [r3, #32]
  400e48:	e002      	b.n	400e50 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400e4a:	68fb      	ldr	r3, [r7, #12]
  400e4c:	69ba      	ldr	r2, [r7, #24]
  400e4e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400e50:	697b      	ldr	r3, [r7, #20]
  400e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400e56:	2b00      	cmp	r3, #0
  400e58:	d004      	beq.n	400e64 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400e5a:	68fb      	ldr	r3, [r7, #12]
  400e5c:	69ba      	ldr	r2, [r7, #24]
  400e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400e62:	e003      	b.n	400e6c <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400e64:	68fb      	ldr	r3, [r7, #12]
  400e66:	69ba      	ldr	r2, [r7, #24]
  400e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400e6c:	697b      	ldr	r3, [r7, #20]
  400e6e:	f003 0301 	and.w	r3, r3, #1
  400e72:	2b00      	cmp	r3, #0
  400e74:	d006      	beq.n	400e84 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400e76:	68fb      	ldr	r3, [r7, #12]
  400e78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e7a:	69bb      	ldr	r3, [r7, #24]
  400e7c:	431a      	orrs	r2, r3
  400e7e:	68fb      	ldr	r3, [r7, #12]
  400e80:	671a      	str	r2, [r3, #112]	; 0x70
  400e82:	e006      	b.n	400e92 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400e84:	68fb      	ldr	r3, [r7, #12]
  400e86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400e88:	69bb      	ldr	r3, [r7, #24]
  400e8a:	43db      	mvns	r3, r3
  400e8c:	401a      	ands	r2, r3
  400e8e:	68fb      	ldr	r3, [r7, #12]
  400e90:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400e92:	697b      	ldr	r3, [r7, #20]
  400e94:	f003 0302 	and.w	r3, r3, #2
  400e98:	2b00      	cmp	r3, #0
  400e9a:	d006      	beq.n	400eaa <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400e9c:	68fb      	ldr	r3, [r7, #12]
  400e9e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400ea0:	69bb      	ldr	r3, [r7, #24]
  400ea2:	431a      	orrs	r2, r3
  400ea4:	68fb      	ldr	r3, [r7, #12]
  400ea6:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400ea8:	e006      	b.n	400eb8 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400eaa:	68fb      	ldr	r3, [r7, #12]
  400eac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400eae:	69bb      	ldr	r3, [r7, #24]
  400eb0:	43db      	mvns	r3, r3
  400eb2:	401a      	ands	r2, r3
  400eb4:	68fb      	ldr	r3, [r7, #12]
  400eb6:	675a      	str	r2, [r3, #116]	; 0x74
  400eb8:	bf00      	nop
  400eba:	3734      	adds	r7, #52	; 0x34
  400ebc:	46bd      	mov	sp, r7
  400ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ec2:	4770      	bx	lr
  400ec4:	00200707 	.word	0x00200707

00400ec8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400ec8:	b480      	push	{r7}
  400eca:	b08d      	sub	sp, #52	; 0x34
  400ecc:	af00      	add	r7, sp, #0
  400ece:	6078      	str	r0, [r7, #4]
  400ed0:	460b      	mov	r3, r1
  400ed2:	70fb      	strb	r3, [r7, #3]
  400ed4:	687b      	ldr	r3, [r7, #4]
  400ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  400ed8:	78fb      	ldrb	r3, [r7, #3]
  400eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400ee0:	627b      	str	r3, [r7, #36]	; 0x24
  400ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400ee4:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400ee6:	6a3b      	ldr	r3, [r7, #32]
  400ee8:	095b      	lsrs	r3, r3, #5
  400eea:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400eec:	69fa      	ldr	r2, [r7, #28]
  400eee:	4b17      	ldr	r3, [pc, #92]	; (400f4c <ioport_set_pin_dir+0x84>)
  400ef0:	4413      	add	r3, r2
  400ef2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400ef4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400efa:	2b01      	cmp	r3, #1
  400efc:	d109      	bne.n	400f12 <ioport_set_pin_dir+0x4a>
  400efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f00:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400f02:	697b      	ldr	r3, [r7, #20]
  400f04:	f003 031f 	and.w	r3, r3, #31
  400f08:	2201      	movs	r2, #1
  400f0a:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400f0c:	69bb      	ldr	r3, [r7, #24]
  400f0e:	611a      	str	r2, [r3, #16]
  400f10:	e00c      	b.n	400f2c <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  400f12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400f16:	2b00      	cmp	r3, #0
  400f18:	d108      	bne.n	400f2c <ioport_set_pin_dir+0x64>
  400f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f1c:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400f1e:	693b      	ldr	r3, [r7, #16]
  400f20:	f003 031f 	and.w	r3, r3, #31
  400f24:	2201      	movs	r2, #1
  400f26:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400f28:	69bb      	ldr	r3, [r7, #24]
  400f2a:	615a      	str	r2, [r3, #20]
  400f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f2e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400f30:	68fb      	ldr	r3, [r7, #12]
  400f32:	f003 031f 	and.w	r3, r3, #31
  400f36:	2201      	movs	r2, #1
  400f38:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400f3a:	69bb      	ldr	r3, [r7, #24]
  400f3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400f40:	bf00      	nop
  400f42:	3734      	adds	r7, #52	; 0x34
  400f44:	46bd      	mov	sp, r7
  400f46:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f4a:	4770      	bx	lr
  400f4c:	00200707 	.word	0x00200707

00400f50 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400f50:	b480      	push	{r7}
  400f52:	b08b      	sub	sp, #44	; 0x2c
  400f54:	af00      	add	r7, sp, #0
  400f56:	6078      	str	r0, [r7, #4]
  400f58:	460b      	mov	r3, r1
  400f5a:	70fb      	strb	r3, [r7, #3]
  400f5c:	687b      	ldr	r3, [r7, #4]
  400f5e:	627b      	str	r3, [r7, #36]	; 0x24
  400f60:	78fb      	ldrb	r3, [r7, #3]
  400f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400f68:	61fb      	str	r3, [r7, #28]
  400f6a:	69fb      	ldr	r3, [r7, #28]
  400f6c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400f6e:	69bb      	ldr	r3, [r7, #24]
  400f70:	095b      	lsrs	r3, r3, #5
  400f72:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400f74:	697a      	ldr	r2, [r7, #20]
  400f76:	4b10      	ldr	r3, [pc, #64]	; (400fb8 <ioport_set_pin_level+0x68>)
  400f78:	4413      	add	r3, r2
  400f7a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400f7c:	613b      	str	r3, [r7, #16]

	if (level) {
  400f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400f82:	2b00      	cmp	r3, #0
  400f84:	d009      	beq.n	400f9a <ioport_set_pin_level+0x4a>
  400f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400f88:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400f8a:	68fb      	ldr	r3, [r7, #12]
  400f8c:	f003 031f 	and.w	r3, r3, #31
  400f90:	2201      	movs	r2, #1
  400f92:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400f94:	693b      	ldr	r3, [r7, #16]
  400f96:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400f98:	e008      	b.n	400fac <ioport_set_pin_level+0x5c>
  400f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400f9c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400f9e:	68bb      	ldr	r3, [r7, #8]
  400fa0:	f003 031f 	and.w	r3, r3, #31
  400fa4:	2201      	movs	r2, #1
  400fa6:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400fa8:	693b      	ldr	r3, [r7, #16]
  400faa:	635a      	str	r2, [r3, #52]	; 0x34
  400fac:	bf00      	nop
  400fae:	372c      	adds	r7, #44	; 0x2c
  400fb0:	46bd      	mov	sp, r7
  400fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fb6:	4770      	bx	lr
  400fb8:	00200707 	.word	0x00200707

00400fbc <spi_reset>:
{
  400fbc:	b480      	push	{r7}
  400fbe:	b083      	sub	sp, #12
  400fc0:	af00      	add	r7, sp, #0
  400fc2:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400fc4:	687b      	ldr	r3, [r7, #4]
  400fc6:	2280      	movs	r2, #128	; 0x80
  400fc8:	601a      	str	r2, [r3, #0]
}
  400fca:	bf00      	nop
  400fcc:	370c      	adds	r7, #12
  400fce:	46bd      	mov	sp, r7
  400fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fd4:	4770      	bx	lr

00400fd6 <spi_enable>:
{
  400fd6:	b480      	push	{r7}
  400fd8:	b083      	sub	sp, #12
  400fda:	af00      	add	r7, sp, #0
  400fdc:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400fde:	687b      	ldr	r3, [r7, #4]
  400fe0:	2201      	movs	r2, #1
  400fe2:	601a      	str	r2, [r3, #0]
}
  400fe4:	bf00      	nop
  400fe6:	370c      	adds	r7, #12
  400fe8:	46bd      	mov	sp, r7
  400fea:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fee:	4770      	bx	lr

00400ff0 <spi_disable>:
{
  400ff0:	b480      	push	{r7}
  400ff2:	b083      	sub	sp, #12
  400ff4:	af00      	add	r7, sp, #0
  400ff6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400ff8:	687b      	ldr	r3, [r7, #4]
  400ffa:	2202      	movs	r2, #2
  400ffc:	601a      	str	r2, [r3, #0]
}
  400ffe:	bf00      	nop
  401000:	370c      	adds	r7, #12
  401002:	46bd      	mov	sp, r7
  401004:	f85d 7b04 	ldr.w	r7, [sp], #4
  401008:	4770      	bx	lr

0040100a <spi_set_master_mode>:
{
  40100a:	b480      	push	{r7}
  40100c:	b083      	sub	sp, #12
  40100e:	af00      	add	r7, sp, #0
  401010:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  401012:	687b      	ldr	r3, [r7, #4]
  401014:	685b      	ldr	r3, [r3, #4]
  401016:	f043 0201 	orr.w	r2, r3, #1
  40101a:	687b      	ldr	r3, [r7, #4]
  40101c:	605a      	str	r2, [r3, #4]
}
  40101e:	bf00      	nop
  401020:	370c      	adds	r7, #12
  401022:	46bd      	mov	sp, r7
  401024:	f85d 7b04 	ldr.w	r7, [sp], #4
  401028:	4770      	bx	lr

0040102a <spi_set_fixed_peripheral_select>:
{
  40102a:	b480      	push	{r7}
  40102c:	b083      	sub	sp, #12
  40102e:	af00      	add	r7, sp, #0
  401030:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  401032:	687b      	ldr	r3, [r7, #4]
  401034:	685b      	ldr	r3, [r3, #4]
  401036:	f023 0202 	bic.w	r2, r3, #2
  40103a:	687b      	ldr	r3, [r7, #4]
  40103c:	605a      	str	r2, [r3, #4]
}
  40103e:	bf00      	nop
  401040:	370c      	adds	r7, #12
  401042:	46bd      	mov	sp, r7
  401044:	f85d 7b04 	ldr.w	r7, [sp], #4
  401048:	4770      	bx	lr

0040104a <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  40104a:	b480      	push	{r7}
  40104c:	b083      	sub	sp, #12
  40104e:	af00      	add	r7, sp, #0
  401050:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  401052:	687b      	ldr	r3, [r7, #4]
  401054:	685b      	ldr	r3, [r3, #4]
  401056:	f043 0210 	orr.w	r2, r3, #16
  40105a:	687b      	ldr	r3, [r7, #4]
  40105c:	605a      	str	r2, [r3, #4]
}
  40105e:	bf00      	nop
  401060:	370c      	adds	r7, #12
  401062:	46bd      	mov	sp, r7
  401064:	f85d 7b04 	ldr.w	r7, [sp], #4
  401068:	4770      	bx	lr

0040106a <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  40106a:	b480      	push	{r7}
  40106c:	b083      	sub	sp, #12
  40106e:	af00      	add	r7, sp, #0
  401070:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  401072:	687b      	ldr	r3, [r7, #4]
  401074:	685b      	ldr	r3, [r3, #4]
  401076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  40107a:	687b      	ldr	r3, [r7, #4]
  40107c:	605a      	str	r2, [r3, #4]
}
  40107e:	bf00      	nop
  401080:	370c      	adds	r7, #12
  401082:	46bd      	mov	sp, r7
  401084:	f85d 7b04 	ldr.w	r7, [sp], #4
  401088:	4770      	bx	lr
	...

0040108c <ssd1306_hard_reset>:
{
  40108c:	b580      	push	{r7, lr}
  40108e:	b082      	sub	sp, #8
  401090:	af00      	add	r7, sp, #0
	uint32_t delay_10us = 10 * (sysclk_get_cpu_hz()/1000000);
  401092:	4b0f      	ldr	r3, [pc, #60]	; (4010d0 <ssd1306_hard_reset+0x44>)
  401094:	4798      	blx	r3
  401096:	4602      	mov	r2, r0
  401098:	4b0e      	ldr	r3, [pc, #56]	; (4010d4 <ssd1306_hard_reset+0x48>)
  40109a:	fba3 2302 	umull	r2, r3, r3, r2
  40109e:	0c9a      	lsrs	r2, r3, #18
  4010a0:	4613      	mov	r3, r2
  4010a2:	009b      	lsls	r3, r3, #2
  4010a4:	4413      	add	r3, r2
  4010a6:	005b      	lsls	r3, r3, #1
  4010a8:	607b      	str	r3, [r7, #4]
	ioport_set_pin_level(SSD1306_RES_PIN, false);
  4010aa:	2100      	movs	r1, #0
  4010ac:	2051      	movs	r0, #81	; 0x51
  4010ae:	4b0a      	ldr	r3, [pc, #40]	; (4010d8 <ssd1306_hard_reset+0x4c>)
  4010b0:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  4010b2:	6878      	ldr	r0, [r7, #4]
  4010b4:	4b09      	ldr	r3, [pc, #36]	; (4010dc <ssd1306_hard_reset+0x50>)
  4010b6:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  4010b8:	2101      	movs	r1, #1
  4010ba:	2051      	movs	r0, #81	; 0x51
  4010bc:	4b06      	ldr	r3, [pc, #24]	; (4010d8 <ssd1306_hard_reset+0x4c>)
  4010be:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  4010c0:	6878      	ldr	r0, [r7, #4]
  4010c2:	4b06      	ldr	r3, [pc, #24]	; (4010dc <ssd1306_hard_reset+0x50>)
  4010c4:	4798      	blx	r3
}
  4010c6:	bf00      	nop
  4010c8:	3708      	adds	r7, #8
  4010ca:	46bd      	mov	sp, r7
  4010cc:	bd80      	pop	{r7, pc}
  4010ce:	bf00      	nop
  4010d0:	00400d39 	.word	0x00400d39
  4010d4:	431bde83 	.word	0x431bde83
  4010d8:	00400f51 	.word	0x00400f51
  4010dc:	20400001 	.word	0x20400001

004010e0 <ssd1306_display_on>:
 * \brief Turn the OLED display on
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
  4010e0:	b580      	push	{r7, lr}
  4010e2:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4010e4:	20af      	movs	r0, #175	; 0xaf
  4010e6:	4b02      	ldr	r3, [pc, #8]	; (4010f0 <ssd1306_display_on+0x10>)
  4010e8:	4798      	blx	r3
}
  4010ea:	bf00      	nop
  4010ec:	bd80      	pop	{r7, pc}
  4010ee:	bf00      	nop
  4010f0:	00401361 	.word	0x00401361

004010f4 <ssd1306_set_contrast>:
 * \param contrast a number between 0 and 0xFF
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
  4010f4:	b580      	push	{r7, lr}
  4010f6:	b082      	sub	sp, #8
  4010f8:	af00      	add	r7, sp, #0
  4010fa:	4603      	mov	r3, r0
  4010fc:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  4010fe:	2081      	movs	r0, #129	; 0x81
  401100:	4b05      	ldr	r3, [pc, #20]	; (401118 <ssd1306_set_contrast+0x24>)
  401102:	4798      	blx	r3
	ssd1306_write_command(contrast);
  401104:	79fb      	ldrb	r3, [r7, #7]
  401106:	4618      	mov	r0, r3
  401108:	4b03      	ldr	r3, [pc, #12]	; (401118 <ssd1306_set_contrast+0x24>)
  40110a:	4798      	blx	r3
	return contrast;
  40110c:	79fb      	ldrb	r3, [r7, #7]
}
  40110e:	4618      	mov	r0, r3
  401110:	3708      	adds	r7, #8
  401112:	46bd      	mov	sp, r7
  401114:	bd80      	pop	{r7, pc}
  401116:	bf00      	nop
  401118:	00401361 	.word	0x00401361

0040111c <ssd1306_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
  40111c:	b580      	push	{r7, lr}
  40111e:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  401120:	20a6      	movs	r0, #166	; 0xa6
  401122:	4b02      	ldr	r3, [pc, #8]	; (40112c <ssd1306_display_invert_disable+0x10>)
  401124:	4798      	blx	r3
}
  401126:	bf00      	nop
  401128:	bd80      	pop	{r7, pc}
  40112a:	bf00      	nop
  40112c:	00401361 	.word	0x00401361

00401130 <ssd1306_interface_init>:
#define SPI_MOSI_MASK 21
#define SPI_CLK_MASK 22


static void ssd1306_interface_init(void)
{
  401130:	b590      	push	{r4, r7, lr}
  401132:	b083      	sub	sp, #12
  401134:	af00      	add	r7, sp, #0
	
	ioport_set_pin_dir(SSD1306_RES_PIN, IOPORT_DIR_OUTPUT);
  401136:	2101      	movs	r1, #1
  401138:	2051      	movs	r0, #81	; 0x51
  40113a:	4b46      	ldr	r3, [pc, #280]	; (401254 <ssd1306_interface_init+0x124>)
  40113c:	4798      	blx	r3
	ioport_set_pin_dir(SSD1306_DC_PIN, IOPORT_DIR_OUTPUT);
  40113e:	2101      	movs	r1, #1
  401140:	2023      	movs	r0, #35	; 0x23
  401142:	4b44      	ldr	r3, [pc, #272]	; (401254 <ssd1306_interface_init+0x124>)
  401144:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_RES_PIN, IOPORT_MODE_PULLUP);
  401146:	2108      	movs	r1, #8
  401148:	2051      	movs	r0, #81	; 0x51
  40114a:	4b43      	ldr	r3, [pc, #268]	; (401258 <ssd1306_interface_init+0x128>)
  40114c:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_DC_PIN, IOPORT_MODE_PULLUP);
  40114e:	2108      	movs	r1, #8
  401150:	2023      	movs	r0, #35	; 0x23
  401152:	4b41      	ldr	r3, [pc, #260]	; (401258 <ssd1306_interface_init+0x128>)
  401154:	4798      	blx	r3
	ioport_enable_pin(SSD1306_DC_PIN);
  401156:	2023      	movs	r0, #35	; 0x23
  401158:	4b40      	ldr	r3, [pc, #256]	; (40125c <ssd1306_interface_init+0x12c>)
  40115a:	4798      	blx	r3
	ioport_enable_pin(SSD1306_RES_PIN);
  40115c:	2051      	movs	r0, #81	; 0x51
  40115e:	4b3f      	ldr	r3, [pc, #252]	; (40125c <ssd1306_interface_init+0x12c>)
  401160:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  401162:	2101      	movs	r1, #1
  401164:	2023      	movs	r0, #35	; 0x23
  401166:	4b3e      	ldr	r3, [pc, #248]	; (401260 <ssd1306_interface_init+0x130>)
  401168:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  40116a:	2101      	movs	r1, #1
  40116c:	2051      	movs	r0, #81	; 0x51
  40116e:	4b3c      	ldr	r3, [pc, #240]	; (401260 <ssd1306_interface_init+0x130>)
  401170:	4798      	blx	r3
	
	
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  401172:	2300      	movs	r3, #0
  401174:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401178:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40117c:	4839      	ldr	r0, [pc, #228]	; (401264 <ssd1306_interface_init+0x134>)
  40117e:	4c3a      	ldr	r4, [pc, #232]	; (401268 <ssd1306_interface_init+0x138>)
  401180:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  401182:	2300      	movs	r3, #0
  401184:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401188:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40118c:	4835      	ldr	r0, [pc, #212]	; (401264 <ssd1306_interface_init+0x134>)
  40118e:	4c36      	ldr	r4, [pc, #216]	; (401268 <ssd1306_interface_init+0x138>)
  401190:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  401192:	2300      	movs	r3, #0
  401194:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401198:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40119c:	4831      	ldr	r0, [pc, #196]	; (401264 <ssd1306_interface_init+0x134>)
  40119e:	4c32      	ldr	r4, [pc, #200]	; (401268 <ssd1306_interface_init+0x138>)
  4011a0:	47a0      	blx	r4
	
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4011a2:	2300      	movs	r3, #0
  4011a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4011a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011ac:	482d      	ldr	r0, [pc, #180]	; (401264 <ssd1306_interface_init+0x134>)
  4011ae:	4c2e      	ldr	r4, [pc, #184]	; (401268 <ssd1306_interface_init+0x138>)
  4011b0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4011b2:	2300      	movs	r3, #0
  4011b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4011b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011bc:	4829      	ldr	r0, [pc, #164]	; (401264 <ssd1306_interface_init+0x134>)
  4011be:	4c2a      	ldr	r4, [pc, #168]	; (401268 <ssd1306_interface_init+0x138>)
  4011c0:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4011c2:	2300      	movs	r3, #0
  4011c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4011c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4011cc:	4825      	ldr	r0, [pc, #148]	; (401264 <ssd1306_interface_init+0x134>)
  4011ce:	4c26      	ldr	r4, [pc, #152]	; (401268 <ssd1306_interface_init+0x138>)
  4011d0:	47a0      	blx	r4
		
		spi_disable(SPI0);
  4011d2:	4826      	ldr	r0, [pc, #152]	; (40126c <ssd1306_interface_init+0x13c>)
  4011d4:	4b26      	ldr	r3, [pc, #152]	; (401270 <ssd1306_interface_init+0x140>)
  4011d6:	4798      	blx	r3
		spi_reset(SPI0);
  4011d8:	4824      	ldr	r0, [pc, #144]	; (40126c <ssd1306_interface_init+0x13c>)
  4011da:	4b26      	ldr	r3, [pc, #152]	; (401274 <ssd1306_interface_init+0x144>)
  4011dc:	4798      	blx	r3
		spi_set_master_mode(SPI0);
  4011de:	4823      	ldr	r0, [pc, #140]	; (40126c <ssd1306_interface_init+0x13c>)
  4011e0:	4b25      	ldr	r3, [pc, #148]	; (401278 <ssd1306_interface_init+0x148>)
  4011e2:	4798      	blx	r3
		//spi_set_transfer_delay(SPI0, 1, 40, 30);
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4011e4:	2208      	movs	r2, #8
  4011e6:	2101      	movs	r1, #1
  4011e8:	4820      	ldr	r0, [pc, #128]	; (40126c <ssd1306_interface_init+0x13c>)
  4011ea:	4b24      	ldr	r3, [pc, #144]	; (40127c <ssd1306_interface_init+0x14c>)
  4011ec:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  4011ee:	2200      	movs	r2, #0
  4011f0:	2101      	movs	r1, #1
  4011f2:	481e      	ldr	r0, [pc, #120]	; (40126c <ssd1306_interface_init+0x13c>)
  4011f4:	4b22      	ldr	r3, [pc, #136]	; (401280 <ssd1306_interface_init+0x150>)
  4011f6:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  4011f8:	2200      	movs	r2, #0
  4011fa:	2101      	movs	r1, #1
  4011fc:	481b      	ldr	r0, [pc, #108]	; (40126c <ssd1306_interface_init+0x13c>)
  4011fe:	4b21      	ldr	r3, [pc, #132]	; (401284 <ssd1306_interface_init+0x154>)
  401200:	4798      	blx	r3
		spi_set_fixed_peripheral_select(SPI0);
  401202:	481a      	ldr	r0, [pc, #104]	; (40126c <ssd1306_interface_init+0x13c>)
  401204:	4b20      	ldr	r3, [pc, #128]	; (401288 <ssd1306_interface_init+0x158>)
  401206:	4798      	blx	r3
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  401208:	2200      	movs	r2, #0
  40120a:	2101      	movs	r1, #1
  40120c:	4817      	ldr	r0, [pc, #92]	; (40126c <ssd1306_interface_init+0x13c>)
  40120e:	4b1f      	ldr	r3, [pc, #124]	; (40128c <ssd1306_interface_init+0x15c>)
  401210:	4798      	blx	r3
		spi_disable_loopback(SPI0);
  401212:	4816      	ldr	r0, [pc, #88]	; (40126c <ssd1306_interface_init+0x13c>)
  401214:	4b1e      	ldr	r3, [pc, #120]	; (401290 <ssd1306_interface_init+0x160>)
  401216:	4798      	blx	r3

		spi_disable_mode_fault_detect(SPI0);
  401218:	4814      	ldr	r0, [pc, #80]	; (40126c <ssd1306_interface_init+0x13c>)
  40121a:	4b1e      	ldr	r3, [pc, #120]	; (401294 <ssd1306_interface_init+0x164>)
  40121c:	4798      	blx	r3
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  40121e:	4b1e      	ldr	r3, [pc, #120]	; (401298 <ssd1306_interface_init+0x168>)
  401220:	4798      	blx	r3
  401222:	4603      	mov	r3, r0
  401224:	4619      	mov	r1, r3
  401226:	481d      	ldr	r0, [pc, #116]	; (40129c <ssd1306_interface_init+0x16c>)
  401228:	4b1d      	ldr	r3, [pc, #116]	; (4012a0 <ssd1306_interface_init+0x170>)
  40122a:	4798      	blx	r3
  40122c:	4603      	mov	r3, r0
  40122e:	607b      	str	r3, [r7, #4]
		spi_set_baudrate_div(SPI0,1, div);
  401230:	687b      	ldr	r3, [r7, #4]
  401232:	b2db      	uxtb	r3, r3
  401234:	461a      	mov	r2, r3
  401236:	2101      	movs	r1, #1
  401238:	480c      	ldr	r0, [pc, #48]	; (40126c <ssd1306_interface_init+0x13c>)
  40123a:	4b1a      	ldr	r3, [pc, #104]	; (4012a4 <ssd1306_interface_init+0x174>)
  40123c:	4798      	blx	r3
		spi_enable_clock(SPI0);
  40123e:	480b      	ldr	r0, [pc, #44]	; (40126c <ssd1306_interface_init+0x13c>)
  401240:	4b19      	ldr	r3, [pc, #100]	; (4012a8 <ssd1306_interface_init+0x178>)
  401242:	4798      	blx	r3
		
		spi_enable(SPI0);
  401244:	4809      	ldr	r0, [pc, #36]	; (40126c <ssd1306_interface_init+0x13c>)
  401246:	4b19      	ldr	r3, [pc, #100]	; (4012ac <ssd1306_interface_init+0x17c>)
  401248:	4798      	blx	r3
}
  40124a:	bf00      	nop
  40124c:	370c      	adds	r7, #12
  40124e:	46bd      	mov	sp, r7
  401250:	bd90      	pop	{r4, r7, pc}
  401252:	bf00      	nop
  401254:	00400ec9 	.word	0x00400ec9
  401258:	00400dad 	.word	0x00400dad
  40125c:	00400d61 	.word	0x00400d61
  401260:	00400f51 	.word	0x00400f51
  401264:	400e1400 	.word	0x400e1400
  401268:	00401f49 	.word	0x00401f49
  40126c:	40008000 	.word	0x40008000
  401270:	00400ff1 	.word	0x00400ff1
  401274:	00400fbd 	.word	0x00400fbd
  401278:	0040100b 	.word	0x0040100b
  40127c:	00400525 	.word	0x00400525
  401280:	00400485 	.word	0x00400485
  401284:	004004d5 	.word	0x004004d5
  401288:	0040102b 	.word	0x0040102b
  40128c:	004005cb 	.word	0x004005cb
  401290:	0040106b 	.word	0x0040106b
  401294:	0040104b 	.word	0x0040104b
  401298:	00400d4d 	.word	0x00400d4d
  40129c:	000f4240 	.word	0x000f4240
  4012a0:	00400615 	.word	0x00400615
  4012a4:	00400651 	.word	0x00400651
  4012a8:	00400395 	.word	0x00400395
  4012ac:	00400fd7 	.word	0x00400fd7

004012b0 <ssd1306_init>:
 a
 a
 a
 */
void ssd1306_init(void)
{
  4012b0:	b580      	push	{r7, lr}
  4012b2:	af00      	add	r7, sp, #0
	// Initialize delay routine
	delay_init();

	// Initialize the interface
	ssd1306_interface_init();
  4012b4:	4b23      	ldr	r3, [pc, #140]	; (401344 <ssd1306_init+0x94>)
  4012b6:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
  4012b8:	4b23      	ldr	r3, [pc, #140]	; (401348 <ssd1306_init+0x98>)
  4012ba:	4798      	blx	r3

	// Set the reset pin to the default state
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  4012bc:	2101      	movs	r1, #1
  4012be:	2051      	movs	r0, #81	; 0x51
  4012c0:	4b22      	ldr	r3, [pc, #136]	; (40134c <ssd1306_init+0x9c>)
  4012c2:	4798      	blx	r3
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4012c4:	20a8      	movs	r0, #168	; 0xa8
  4012c6:	4b22      	ldr	r3, [pc, #136]	; (401350 <ssd1306_init+0xa0>)
  4012c8:	4798      	blx	r3
	ssd1306_write_command(0x1F);
  4012ca:	201f      	movs	r0, #31
  4012cc:	4b20      	ldr	r3, [pc, #128]	; (401350 <ssd1306_init+0xa0>)
  4012ce:	4798      	blx	r3

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4012d0:	20d3      	movs	r0, #211	; 0xd3
  4012d2:	4b1f      	ldr	r3, [pc, #124]	; (401350 <ssd1306_init+0xa0>)
  4012d4:	4798      	blx	r3
	ssd1306_write_command(0x00);
  4012d6:	2000      	movs	r0, #0
  4012d8:	4b1d      	ldr	r3, [pc, #116]	; (401350 <ssd1306_init+0xa0>)
  4012da:	4798      	blx	r3

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  4012dc:	2040      	movs	r0, #64	; 0x40
  4012de:	4b1c      	ldr	r3, [pc, #112]	; (401350 <ssd1306_init+0xa0>)
  4012e0:	4798      	blx	r3

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4012e2:	20a1      	movs	r0, #161	; 0xa1
  4012e4:	4b1a      	ldr	r3, [pc, #104]	; (401350 <ssd1306_init+0xa0>)
  4012e6:	4798      	blx	r3

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4012e8:	20c8      	movs	r0, #200	; 0xc8
  4012ea:	4b19      	ldr	r3, [pc, #100]	; (401350 <ssd1306_init+0xa0>)
  4012ec:	4798      	blx	r3

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4012ee:	20da      	movs	r0, #218	; 0xda
  4012f0:	4b17      	ldr	r3, [pc, #92]	; (401350 <ssd1306_init+0xa0>)
  4012f2:	4798      	blx	r3
	ssd1306_write_command(0x02);
  4012f4:	2002      	movs	r0, #2
  4012f6:	4b16      	ldr	r3, [pc, #88]	; (401350 <ssd1306_init+0xa0>)
  4012f8:	4798      	blx	r3

	ssd1306_set_contrast(0x8F);
  4012fa:	208f      	movs	r0, #143	; 0x8f
  4012fc:	4b15      	ldr	r3, [pc, #84]	; (401354 <ssd1306_init+0xa4>)
  4012fe:	4798      	blx	r3

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  401300:	20a4      	movs	r0, #164	; 0xa4
  401302:	4b13      	ldr	r3, [pc, #76]	; (401350 <ssd1306_init+0xa0>)
  401304:	4798      	blx	r3

	ssd1306_display_invert_disable();
  401306:	4b14      	ldr	r3, [pc, #80]	; (401358 <ssd1306_init+0xa8>)
  401308:	4798      	blx	r3

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  40130a:	20d5      	movs	r0, #213	; 0xd5
  40130c:	4b10      	ldr	r3, [pc, #64]	; (401350 <ssd1306_init+0xa0>)
  40130e:	4798      	blx	r3
	ssd1306_write_command(0x80);
  401310:	2080      	movs	r0, #128	; 0x80
  401312:	4b0f      	ldr	r3, [pc, #60]	; (401350 <ssd1306_init+0xa0>)
  401314:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  401316:	208d      	movs	r0, #141	; 0x8d
  401318:	4b0d      	ldr	r3, [pc, #52]	; (401350 <ssd1306_init+0xa0>)
  40131a:	4798      	blx	r3
	ssd1306_write_command(0x14);
  40131c:	2014      	movs	r0, #20
  40131e:	4b0c      	ldr	r3, [pc, #48]	; (401350 <ssd1306_init+0xa0>)
  401320:	4798      	blx	r3

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  401322:	20db      	movs	r0, #219	; 0xdb
  401324:	4b0a      	ldr	r3, [pc, #40]	; (401350 <ssd1306_init+0xa0>)
  401326:	4798      	blx	r3
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  401328:	2040      	movs	r0, #64	; 0x40
  40132a:	4b09      	ldr	r3, [pc, #36]	; (401350 <ssd1306_init+0xa0>)
  40132c:	4798      	blx	r3

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  40132e:	20d9      	movs	r0, #217	; 0xd9
  401330:	4b07      	ldr	r3, [pc, #28]	; (401350 <ssd1306_init+0xa0>)
  401332:	4798      	blx	r3
	ssd1306_write_command(0xF1);
  401334:	20f1      	movs	r0, #241	; 0xf1
  401336:	4b06      	ldr	r3, [pc, #24]	; (401350 <ssd1306_init+0xa0>)
  401338:	4798      	blx	r3

	
	ssd1306_display_on();
  40133a:	4b08      	ldr	r3, [pc, #32]	; (40135c <ssd1306_init+0xac>)
  40133c:	4798      	blx	r3
}
  40133e:	bf00      	nop
  401340:	bd80      	pop	{r7, pc}
  401342:	bf00      	nop
  401344:	00401131 	.word	0x00401131
  401348:	0040108d 	.word	0x0040108d
  40134c:	00400f51 	.word	0x00400f51
  401350:	00401361 	.word	0x00401361
  401354:	004010f5 	.word	0x004010f5
  401358:	0040111d 	.word	0x0040111d
  40135c:	004010e1 	.word	0x004010e1

00401360 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  401360:	b5f0      	push	{r4, r5, r6, r7, lr}
  401362:	b083      	sub	sp, #12
  401364:	af00      	add	r7, sp, #0
  401366:	4603      	mov	r3, r0
  401368:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, false);
  40136a:	2100      	movs	r1, #0
  40136c:	2023      	movs	r0, #35	; 0x23
  40136e:	4b1c      	ldr	r3, [pc, #112]	; (4013e0 <ssd1306_write_command+0x80>)
  401370:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  401372:	2101      	movs	r1, #1
  401374:	481b      	ldr	r0, [pc, #108]	; (4013e4 <ssd1306_write_command+0x84>)
  401376:	4b1c      	ldr	r3, [pc, #112]	; (4013e8 <ssd1306_write_command+0x88>)
  401378:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  40137a:	79fb      	ldrb	r3, [r7, #7]
  40137c:	b299      	uxth	r1, r3
  40137e:	2301      	movs	r3, #1
  401380:	2201      	movs	r2, #1
  401382:	4818      	ldr	r0, [pc, #96]	; (4013e4 <ssd1306_write_command+0x84>)
  401384:	4c19      	ldr	r4, [pc, #100]	; (4013ec <ssd1306_write_command+0x8c>)
  401386:	47a0      	blx	r4
	delay_us(10);
  401388:	4b19      	ldr	r3, [pc, #100]	; (4013f0 <ssd1306_write_command+0x90>)
  40138a:	4798      	blx	r3
  40138c:	4603      	mov	r3, r0
  40138e:	4619      	mov	r1, r3
  401390:	f04f 0200 	mov.w	r2, #0
  401394:	460b      	mov	r3, r1
  401396:	4614      	mov	r4, r2
  401398:	00a6      	lsls	r6, r4, #2
  40139a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40139e:	009d      	lsls	r5, r3, #2
  4013a0:	462b      	mov	r3, r5
  4013a2:	4634      	mov	r4, r6
  4013a4:	185b      	adds	r3, r3, r1
  4013a6:	eb44 0402 	adc.w	r4, r4, r2
  4013aa:	18db      	adds	r3, r3, r3
  4013ac:	eb44 0404 	adc.w	r4, r4, r4
  4013b0:	4619      	mov	r1, r3
  4013b2:	4622      	mov	r2, r4
  4013b4:	4b0f      	ldr	r3, [pc, #60]	; (4013f4 <ssd1306_write_command+0x94>)
  4013b6:	f04f 0400 	mov.w	r4, #0
  4013ba:	18cd      	adds	r5, r1, r3
  4013bc:	eb42 0604 	adc.w	r6, r2, r4
  4013c0:	4628      	mov	r0, r5
  4013c2:	4631      	mov	r1, r6
  4013c4:	4c0c      	ldr	r4, [pc, #48]	; (4013f8 <ssd1306_write_command+0x98>)
  4013c6:	4a0d      	ldr	r2, [pc, #52]	; (4013fc <ssd1306_write_command+0x9c>)
  4013c8:	f04f 0300 	mov.w	r3, #0
  4013cc:	47a0      	blx	r4
  4013ce:	4603      	mov	r3, r0
  4013d0:	460c      	mov	r4, r1
  4013d2:	4618      	mov	r0, r3
  4013d4:	4b0a      	ldr	r3, [pc, #40]	; (401400 <ssd1306_write_command+0xa0>)
  4013d6:	4798      	blx	r3
}
  4013d8:	bf00      	nop
  4013da:	370c      	adds	r7, #12
  4013dc:	46bd      	mov	sp, r7
  4013de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4013e0:	00400f51 	.word	0x00400f51
  4013e4:	40008000 	.word	0x40008000
  4013e8:	004003d1 	.word	0x004003d1
  4013ec:	00400405 	.word	0x00400405
  4013f0:	00400d39 	.word	0x00400d39
  4013f4:	005a83df 	.word	0x005a83df
  4013f8:	00402f75 	.word	0x00402f75
  4013fc:	005a83e0 	.word	0x005a83e0
  401400:	20400001 	.word	0x20400001

00401404 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  401404:	b5f0      	push	{r4, r5, r6, r7, lr}
  401406:	b083      	sub	sp, #12
  401408:	af00      	add	r7, sp, #0
  40140a:	4603      	mov	r3, r0
  40140c:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  40140e:	2101      	movs	r1, #1
  401410:	2023      	movs	r0, #35	; 0x23
  401412:	4b1c      	ldr	r3, [pc, #112]	; (401484 <ssd1306_write_data+0x80>)
  401414:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  401416:	2101      	movs	r1, #1
  401418:	481b      	ldr	r0, [pc, #108]	; (401488 <ssd1306_write_data+0x84>)
  40141a:	4b1c      	ldr	r3, [pc, #112]	; (40148c <ssd1306_write_data+0x88>)
  40141c:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  40141e:	79fb      	ldrb	r3, [r7, #7]
  401420:	b299      	uxth	r1, r3
  401422:	2301      	movs	r3, #1
  401424:	2201      	movs	r2, #1
  401426:	4818      	ldr	r0, [pc, #96]	; (401488 <ssd1306_write_data+0x84>)
  401428:	4c19      	ldr	r4, [pc, #100]	; (401490 <ssd1306_write_data+0x8c>)
  40142a:	47a0      	blx	r4
	delay_us(10);
  40142c:	4b19      	ldr	r3, [pc, #100]	; (401494 <ssd1306_write_data+0x90>)
  40142e:	4798      	blx	r3
  401430:	4603      	mov	r3, r0
  401432:	4619      	mov	r1, r3
  401434:	f04f 0200 	mov.w	r2, #0
  401438:	460b      	mov	r3, r1
  40143a:	4614      	mov	r4, r2
  40143c:	00a6      	lsls	r6, r4, #2
  40143e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  401442:	009d      	lsls	r5, r3, #2
  401444:	462b      	mov	r3, r5
  401446:	4634      	mov	r4, r6
  401448:	185b      	adds	r3, r3, r1
  40144a:	eb44 0402 	adc.w	r4, r4, r2
  40144e:	18db      	adds	r3, r3, r3
  401450:	eb44 0404 	adc.w	r4, r4, r4
  401454:	4619      	mov	r1, r3
  401456:	4622      	mov	r2, r4
  401458:	4b0f      	ldr	r3, [pc, #60]	; (401498 <ssd1306_write_data+0x94>)
  40145a:	f04f 0400 	mov.w	r4, #0
  40145e:	18cd      	adds	r5, r1, r3
  401460:	eb42 0604 	adc.w	r6, r2, r4
  401464:	4628      	mov	r0, r5
  401466:	4631      	mov	r1, r6
  401468:	4c0c      	ldr	r4, [pc, #48]	; (40149c <ssd1306_write_data+0x98>)
  40146a:	4a0d      	ldr	r2, [pc, #52]	; (4014a0 <ssd1306_write_data+0x9c>)
  40146c:	f04f 0300 	mov.w	r3, #0
  401470:	47a0      	blx	r4
  401472:	4603      	mov	r3, r0
  401474:	460c      	mov	r4, r1
  401476:	4618      	mov	r0, r3
  401478:	4b0a      	ldr	r3, [pc, #40]	; (4014a4 <ssd1306_write_data+0xa0>)
  40147a:	4798      	blx	r3
}
  40147c:	bf00      	nop
  40147e:	370c      	adds	r7, #12
  401480:	46bd      	mov	sp, r7
  401482:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401484:	00400f51 	.word	0x00400f51
  401488:	40008000 	.word	0x40008000
  40148c:	004003d1 	.word	0x004003d1
  401490:	00400405 	.word	0x00400405
  401494:	00400d39 	.word	0x00400d39
  401498:	005a83df 	.word	0x005a83df
  40149c:	00402f75 	.word	0x00402f75
  4014a0:	005a83e0 	.word	0x005a83e0
  4014a4:	20400001 	.word	0x20400001

004014a8 <osc_enable>:
{
  4014a8:	b580      	push	{r7, lr}
  4014aa:	b082      	sub	sp, #8
  4014ac:	af00      	add	r7, sp, #0
  4014ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4014b0:	687b      	ldr	r3, [r7, #4]
  4014b2:	2b07      	cmp	r3, #7
  4014b4:	d831      	bhi.n	40151a <osc_enable+0x72>
  4014b6:	a201      	add	r2, pc, #4	; (adr r2, 4014bc <osc_enable+0x14>)
  4014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4014bc:	00401519 	.word	0x00401519
  4014c0:	004014dd 	.word	0x004014dd
  4014c4:	004014e5 	.word	0x004014e5
  4014c8:	004014ed 	.word	0x004014ed
  4014cc:	004014f5 	.word	0x004014f5
  4014d0:	004014fd 	.word	0x004014fd
  4014d4:	00401505 	.word	0x00401505
  4014d8:	0040150f 	.word	0x0040150f
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4014dc:	2000      	movs	r0, #0
  4014de:	4b11      	ldr	r3, [pc, #68]	; (401524 <osc_enable+0x7c>)
  4014e0:	4798      	blx	r3
		break;
  4014e2:	e01a      	b.n	40151a <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4014e4:	2001      	movs	r0, #1
  4014e6:	4b0f      	ldr	r3, [pc, #60]	; (401524 <osc_enable+0x7c>)
  4014e8:	4798      	blx	r3
		break;
  4014ea:	e016      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4014ec:	2000      	movs	r0, #0
  4014ee:	4b0e      	ldr	r3, [pc, #56]	; (401528 <osc_enable+0x80>)
  4014f0:	4798      	blx	r3
		break;
  4014f2:	e012      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4014f4:	2010      	movs	r0, #16
  4014f6:	4b0c      	ldr	r3, [pc, #48]	; (401528 <osc_enable+0x80>)
  4014f8:	4798      	blx	r3
		break;
  4014fa:	e00e      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4014fc:	2020      	movs	r0, #32
  4014fe:	4b0a      	ldr	r3, [pc, #40]	; (401528 <osc_enable+0x80>)
  401500:	4798      	blx	r3
		break;
  401502:	e00a      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401504:	213e      	movs	r1, #62	; 0x3e
  401506:	2000      	movs	r0, #0
  401508:	4b08      	ldr	r3, [pc, #32]	; (40152c <osc_enable+0x84>)
  40150a:	4798      	blx	r3
		break;
  40150c:	e005      	b.n	40151a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40150e:	213e      	movs	r1, #62	; 0x3e
  401510:	2001      	movs	r0, #1
  401512:	4b06      	ldr	r3, [pc, #24]	; (40152c <osc_enable+0x84>)
  401514:	4798      	blx	r3
		break;
  401516:	e000      	b.n	40151a <osc_enable+0x72>
		break;
  401518:	bf00      	nop
}
  40151a:	bf00      	nop
  40151c:	3708      	adds	r7, #8
  40151e:	46bd      	mov	sp, r7
  401520:	bd80      	pop	{r7, pc}
  401522:	bf00      	nop
  401524:	004023b5 	.word	0x004023b5
  401528:	00402421 	.word	0x00402421
  40152c:	00402491 	.word	0x00402491

00401530 <osc_is_ready>:
{
  401530:	b580      	push	{r7, lr}
  401532:	b082      	sub	sp, #8
  401534:	af00      	add	r7, sp, #0
  401536:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401538:	687b      	ldr	r3, [r7, #4]
  40153a:	2b07      	cmp	r3, #7
  40153c:	d826      	bhi.n	40158c <osc_is_ready+0x5c>
  40153e:	a201      	add	r2, pc, #4	; (adr r2, 401544 <osc_is_ready+0x14>)
  401540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401544:	00401565 	.word	0x00401565
  401548:	00401569 	.word	0x00401569
  40154c:	00401569 	.word	0x00401569
  401550:	0040157b 	.word	0x0040157b
  401554:	0040157b 	.word	0x0040157b
  401558:	0040157b 	.word	0x0040157b
  40155c:	0040157b 	.word	0x0040157b
  401560:	0040157b 	.word	0x0040157b
		return 1;
  401564:	2301      	movs	r3, #1
  401566:	e012      	b.n	40158e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  401568:	4b0b      	ldr	r3, [pc, #44]	; (401598 <osc_is_ready+0x68>)
  40156a:	4798      	blx	r3
  40156c:	4603      	mov	r3, r0
  40156e:	2b00      	cmp	r3, #0
  401570:	bf14      	ite	ne
  401572:	2301      	movne	r3, #1
  401574:	2300      	moveq	r3, #0
  401576:	b2db      	uxtb	r3, r3
  401578:	e009      	b.n	40158e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  40157a:	4b08      	ldr	r3, [pc, #32]	; (40159c <osc_is_ready+0x6c>)
  40157c:	4798      	blx	r3
  40157e:	4603      	mov	r3, r0
  401580:	2b00      	cmp	r3, #0
  401582:	bf14      	ite	ne
  401584:	2301      	movne	r3, #1
  401586:	2300      	moveq	r3, #0
  401588:	b2db      	uxtb	r3, r3
  40158a:	e000      	b.n	40158e <osc_is_ready+0x5e>
	return 0;
  40158c:	2300      	movs	r3, #0
}
  40158e:	4618      	mov	r0, r3
  401590:	3708      	adds	r7, #8
  401592:	46bd      	mov	sp, r7
  401594:	bd80      	pop	{r7, pc}
  401596:	bf00      	nop
  401598:	004023ed 	.word	0x004023ed
  40159c:	00402509 	.word	0x00402509

004015a0 <osc_get_rate>:
{
  4015a0:	b480      	push	{r7}
  4015a2:	b083      	sub	sp, #12
  4015a4:	af00      	add	r7, sp, #0
  4015a6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4015a8:	687b      	ldr	r3, [r7, #4]
  4015aa:	2b07      	cmp	r3, #7
  4015ac:	d825      	bhi.n	4015fa <osc_get_rate+0x5a>
  4015ae:	a201      	add	r2, pc, #4	; (adr r2, 4015b4 <osc_get_rate+0x14>)
  4015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4015b4:	004015d5 	.word	0x004015d5
  4015b8:	004015db 	.word	0x004015db
  4015bc:	004015e1 	.word	0x004015e1
  4015c0:	004015e7 	.word	0x004015e7
  4015c4:	004015eb 	.word	0x004015eb
  4015c8:	004015ef 	.word	0x004015ef
  4015cc:	004015f3 	.word	0x004015f3
  4015d0:	004015f7 	.word	0x004015f7
		return OSC_SLCK_32K_RC_HZ;
  4015d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4015d8:	e010      	b.n	4015fc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4015da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4015de:	e00d      	b.n	4015fc <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4015e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4015e4:	e00a      	b.n	4015fc <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4015e6:	4b08      	ldr	r3, [pc, #32]	; (401608 <osc_get_rate+0x68>)
  4015e8:	e008      	b.n	4015fc <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4015ea:	4b08      	ldr	r3, [pc, #32]	; (40160c <osc_get_rate+0x6c>)
  4015ec:	e006      	b.n	4015fc <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4015ee:	4b08      	ldr	r3, [pc, #32]	; (401610 <osc_get_rate+0x70>)
  4015f0:	e004      	b.n	4015fc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4015f2:	4b07      	ldr	r3, [pc, #28]	; (401610 <osc_get_rate+0x70>)
  4015f4:	e002      	b.n	4015fc <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4015f6:	4b06      	ldr	r3, [pc, #24]	; (401610 <osc_get_rate+0x70>)
  4015f8:	e000      	b.n	4015fc <osc_get_rate+0x5c>
	return 0;
  4015fa:	2300      	movs	r3, #0
}
  4015fc:	4618      	mov	r0, r3
  4015fe:	370c      	adds	r7, #12
  401600:	46bd      	mov	sp, r7
  401602:	f85d 7b04 	ldr.w	r7, [sp], #4
  401606:	4770      	bx	lr
  401608:	003d0900 	.word	0x003d0900
  40160c:	007a1200 	.word	0x007a1200
  401610:	00b71b00 	.word	0x00b71b00

00401614 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401614:	b580      	push	{r7, lr}
  401616:	b082      	sub	sp, #8
  401618:	af00      	add	r7, sp, #0
  40161a:	4603      	mov	r3, r0
  40161c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40161e:	bf00      	nop
  401620:	79fb      	ldrb	r3, [r7, #7]
  401622:	4618      	mov	r0, r3
  401624:	4b05      	ldr	r3, [pc, #20]	; (40163c <osc_wait_ready+0x28>)
  401626:	4798      	blx	r3
  401628:	4603      	mov	r3, r0
  40162a:	f083 0301 	eor.w	r3, r3, #1
  40162e:	b2db      	uxtb	r3, r3
  401630:	2b00      	cmp	r3, #0
  401632:	d1f5      	bne.n	401620 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401634:	bf00      	nop
  401636:	3708      	adds	r7, #8
  401638:	46bd      	mov	sp, r7
  40163a:	bd80      	pop	{r7, pc}
  40163c:	00401531 	.word	0x00401531

00401640 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  401640:	b580      	push	{r7, lr}
  401642:	b086      	sub	sp, #24
  401644:	af00      	add	r7, sp, #0
  401646:	60f8      	str	r0, [r7, #12]
  401648:	607a      	str	r2, [r7, #4]
  40164a:	603b      	str	r3, [r7, #0]
  40164c:	460b      	mov	r3, r1
  40164e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  401650:	687b      	ldr	r3, [r7, #4]
  401652:	2b00      	cmp	r3, #0
  401654:	d107      	bne.n	401666 <pll_config_init+0x26>
  401656:	683b      	ldr	r3, [r7, #0]
  401658:	2b00      	cmp	r3, #0
  40165a:	d104      	bne.n	401666 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  40165c:	68fb      	ldr	r3, [r7, #12]
  40165e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  401662:	601a      	str	r2, [r3, #0]
  401664:	e019      	b.n	40169a <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  401666:	7afb      	ldrb	r3, [r7, #11]
  401668:	4618      	mov	r0, r3
  40166a:	4b0e      	ldr	r3, [pc, #56]	; (4016a4 <pll_config_init+0x64>)
  40166c:	4798      	blx	r3
  40166e:	4602      	mov	r2, r0
  401670:	687b      	ldr	r3, [r7, #4]
  401672:	fbb2 f3f3 	udiv	r3, r2, r3
  401676:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  401678:	697b      	ldr	r3, [r7, #20]
  40167a:	683a      	ldr	r2, [r7, #0]
  40167c:	fb02 f303 	mul.w	r3, r2, r3
  401680:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  401682:	683b      	ldr	r3, [r7, #0]
  401684:	3b01      	subs	r3, #1
  401686:	041a      	lsls	r2, r3, #16
  401688:	4b07      	ldr	r3, [pc, #28]	; (4016a8 <pll_config_init+0x68>)
  40168a:	4013      	ands	r3, r2
  40168c:	687a      	ldr	r2, [r7, #4]
  40168e:	b2d2      	uxtb	r2, r2
  401690:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  401692:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  401696:	68fb      	ldr	r3, [r7, #12]
  401698:	601a      	str	r2, [r3, #0]
	}
}
  40169a:	bf00      	nop
  40169c:	3718      	adds	r7, #24
  40169e:	46bd      	mov	sp, r7
  4016a0:	bd80      	pop	{r7, pc}
  4016a2:	bf00      	nop
  4016a4:	004015a1 	.word	0x004015a1
  4016a8:	07ff0000 	.word	0x07ff0000

004016ac <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4016ac:	b580      	push	{r7, lr}
  4016ae:	b082      	sub	sp, #8
  4016b0:	af00      	add	r7, sp, #0
  4016b2:	6078      	str	r0, [r7, #4]
  4016b4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4016b6:	683b      	ldr	r3, [r7, #0]
  4016b8:	2b00      	cmp	r3, #0
  4016ba:	d108      	bne.n	4016ce <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4016bc:	4b09      	ldr	r3, [pc, #36]	; (4016e4 <pll_enable+0x38>)
  4016be:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4016c0:	4a09      	ldr	r2, [pc, #36]	; (4016e8 <pll_enable+0x3c>)
  4016c2:	687b      	ldr	r3, [r7, #4]
  4016c4:	681b      	ldr	r3, [r3, #0]
  4016c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4016ca:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4016cc:	e005      	b.n	4016da <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4016ce:	4a06      	ldr	r2, [pc, #24]	; (4016e8 <pll_enable+0x3c>)
  4016d0:	687b      	ldr	r3, [r7, #4]
  4016d2:	681b      	ldr	r3, [r3, #0]
  4016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4016d8:	61d3      	str	r3, [r2, #28]
}
  4016da:	bf00      	nop
  4016dc:	3708      	adds	r7, #8
  4016de:	46bd      	mov	sp, r7
  4016e0:	bd80      	pop	{r7, pc}
  4016e2:	bf00      	nop
  4016e4:	00402525 	.word	0x00402525
  4016e8:	400e0600 	.word	0x400e0600

004016ec <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4016ec:	b580      	push	{r7, lr}
  4016ee:	b082      	sub	sp, #8
  4016f0:	af00      	add	r7, sp, #0
  4016f2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4016f4:	687b      	ldr	r3, [r7, #4]
  4016f6:	2b00      	cmp	r3, #0
  4016f8:	d103      	bne.n	401702 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4016fa:	4b05      	ldr	r3, [pc, #20]	; (401710 <pll_is_locked+0x24>)
  4016fc:	4798      	blx	r3
  4016fe:	4603      	mov	r3, r0
  401700:	e002      	b.n	401708 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  401702:	4b04      	ldr	r3, [pc, #16]	; (401714 <pll_is_locked+0x28>)
  401704:	4798      	blx	r3
  401706:	4603      	mov	r3, r0
	}
}
  401708:	4618      	mov	r0, r3
  40170a:	3708      	adds	r7, #8
  40170c:	46bd      	mov	sp, r7
  40170e:	bd80      	pop	{r7, pc}
  401710:	00402541 	.word	0x00402541
  401714:	0040255d 	.word	0x0040255d

00401718 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401718:	b580      	push	{r7, lr}
  40171a:	b082      	sub	sp, #8
  40171c:	af00      	add	r7, sp, #0
  40171e:	4603      	mov	r3, r0
  401720:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  401722:	79fb      	ldrb	r3, [r7, #7]
  401724:	3b03      	subs	r3, #3
  401726:	2b04      	cmp	r3, #4
  401728:	d808      	bhi.n	40173c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40172a:	79fb      	ldrb	r3, [r7, #7]
  40172c:	4618      	mov	r0, r3
  40172e:	4b06      	ldr	r3, [pc, #24]	; (401748 <pll_enable_source+0x30>)
  401730:	4798      	blx	r3
		osc_wait_ready(e_src);
  401732:	79fb      	ldrb	r3, [r7, #7]
  401734:	4618      	mov	r0, r3
  401736:	4b05      	ldr	r3, [pc, #20]	; (40174c <pll_enable_source+0x34>)
  401738:	4798      	blx	r3
		break;
  40173a:	e000      	b.n	40173e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40173c:	bf00      	nop
	}
}
  40173e:	bf00      	nop
  401740:	3708      	adds	r7, #8
  401742:	46bd      	mov	sp, r7
  401744:	bd80      	pop	{r7, pc}
  401746:	bf00      	nop
  401748:	004014a9 	.word	0x004014a9
  40174c:	00401615 	.word	0x00401615

00401750 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  401750:	b580      	push	{r7, lr}
  401752:	b082      	sub	sp, #8
  401754:	af00      	add	r7, sp, #0
  401756:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401758:	bf00      	nop
  40175a:	6878      	ldr	r0, [r7, #4]
  40175c:	4b04      	ldr	r3, [pc, #16]	; (401770 <pll_wait_for_lock+0x20>)
  40175e:	4798      	blx	r3
  401760:	4603      	mov	r3, r0
  401762:	2b00      	cmp	r3, #0
  401764:	d0f9      	beq.n	40175a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  401766:	2300      	movs	r3, #0
}
  401768:	4618      	mov	r0, r3
  40176a:	3708      	adds	r7, #8
  40176c:	46bd      	mov	sp, r7
  40176e:	bd80      	pop	{r7, pc}
  401770:	004016ed 	.word	0x004016ed

00401774 <sysclk_get_main_hz>:
{
  401774:	b580      	push	{r7, lr}
  401776:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401778:	2006      	movs	r0, #6
  40177a:	4b05      	ldr	r3, [pc, #20]	; (401790 <sysclk_get_main_hz+0x1c>)
  40177c:	4798      	blx	r3
  40177e:	4602      	mov	r2, r0
  401780:	4613      	mov	r3, r2
  401782:	009b      	lsls	r3, r3, #2
  401784:	4413      	add	r3, r2
  401786:	009a      	lsls	r2, r3, #2
  401788:	4413      	add	r3, r2
}
  40178a:	4618      	mov	r0, r3
  40178c:	bd80      	pop	{r7, pc}
  40178e:	bf00      	nop
  401790:	004015a1 	.word	0x004015a1

00401794 <sysclk_get_cpu_hz>:
{
  401794:	b580      	push	{r7, lr}
  401796:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  401798:	4b02      	ldr	r3, [pc, #8]	; (4017a4 <sysclk_get_cpu_hz+0x10>)
  40179a:	4798      	blx	r3
  40179c:	4603      	mov	r3, r0
}
  40179e:	4618      	mov	r0, r3
  4017a0:	bd80      	pop	{r7, pc}
  4017a2:	bf00      	nop
  4017a4:	00401775 	.word	0x00401775

004017a8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4017a8:	b590      	push	{r4, r7, lr}
  4017aa:	b083      	sub	sp, #12
  4017ac:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4017ae:	4813      	ldr	r0, [pc, #76]	; (4017fc <sysclk_init+0x54>)
  4017b0:	4b13      	ldr	r3, [pc, #76]	; (401800 <sysclk_init+0x58>)
  4017b2:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4017b4:	2006      	movs	r0, #6
  4017b6:	4b13      	ldr	r3, [pc, #76]	; (401804 <sysclk_init+0x5c>)
  4017b8:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4017ba:	1d38      	adds	r0, r7, #4
  4017bc:	2319      	movs	r3, #25
  4017be:	2201      	movs	r2, #1
  4017c0:	2106      	movs	r1, #6
  4017c2:	4c11      	ldr	r4, [pc, #68]	; (401808 <sysclk_init+0x60>)
  4017c4:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4017c6:	1d3b      	adds	r3, r7, #4
  4017c8:	2100      	movs	r1, #0
  4017ca:	4618      	mov	r0, r3
  4017cc:	4b0f      	ldr	r3, [pc, #60]	; (40180c <sysclk_init+0x64>)
  4017ce:	4798      	blx	r3
		pll_wait_for_lock(0);
  4017d0:	2000      	movs	r0, #0
  4017d2:	4b0f      	ldr	r3, [pc, #60]	; (401810 <sysclk_init+0x68>)
  4017d4:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4017d6:	2002      	movs	r0, #2
  4017d8:	4b0e      	ldr	r3, [pc, #56]	; (401814 <sysclk_init+0x6c>)
  4017da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4017dc:	2000      	movs	r0, #0
  4017de:	4b0e      	ldr	r3, [pc, #56]	; (401818 <sysclk_init+0x70>)
  4017e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4017e2:	4b0e      	ldr	r3, [pc, #56]	; (40181c <sysclk_init+0x74>)
  4017e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4017e6:	4b0e      	ldr	r3, [pc, #56]	; (401820 <sysclk_init+0x78>)
  4017e8:	4798      	blx	r3
  4017ea:	4603      	mov	r3, r0
  4017ec:	4618      	mov	r0, r3
  4017ee:	4b04      	ldr	r3, [pc, #16]	; (401800 <sysclk_init+0x58>)
  4017f0:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4017f2:	bf00      	nop
  4017f4:	370c      	adds	r7, #12
  4017f6:	46bd      	mov	sp, r7
  4017f8:	bd90      	pop	{r4, r7, pc}
  4017fa:	bf00      	nop
  4017fc:	11e1a300 	.word	0x11e1a300
  401800:	004028a5 	.word	0x004028a5
  401804:	00401719 	.word	0x00401719
  401808:	00401641 	.word	0x00401641
  40180c:	004016ad 	.word	0x004016ad
  401810:	00401751 	.word	0x00401751
  401814:	004022b5 	.word	0x004022b5
  401818:	00402331 	.word	0x00402331
  40181c:	0040273d 	.word	0x0040273d
  401820:	00401795 	.word	0x00401795

00401824 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  401824:	b480      	push	{r7}
  401826:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401828:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40182c:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  401830:	4b09      	ldr	r3, [pc, #36]	; (401858 <SCB_EnableICache+0x34>)
  401832:	2200      	movs	r2, #0
  401834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401838:	4a07      	ldr	r2, [pc, #28]	; (401858 <SCB_EnableICache+0x34>)
  40183a:	4b07      	ldr	r3, [pc, #28]	; (401858 <SCB_EnableICache+0x34>)
  40183c:	695b      	ldr	r3, [r3, #20]
  40183e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  401842:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  401844:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401848:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  40184c:	bf00      	nop
  40184e:	46bd      	mov	sp, r7
  401850:	f85d 7b04 	ldr.w	r7, [sp], #4
  401854:	4770      	bx	lr
  401856:	bf00      	nop
  401858:	e000ed00 	.word	0xe000ed00

0040185c <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  40185c:	b480      	push	{r7}
  40185e:	b08b      	sub	sp, #44	; 0x2c
  401860:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401862:	4b26      	ldr	r3, [pc, #152]	; (4018fc <SCB_EnableDCache+0xa0>)
  401864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  401868:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  40186a:	69fb      	ldr	r3, [r7, #28]
  40186c:	0b5b      	lsrs	r3, r3, #13
  40186e:	f3c3 030e 	ubfx	r3, r3, #0, #15
  401872:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  401874:	69fb      	ldr	r3, [r7, #28]
  401876:	f003 0307 	and.w	r3, r3, #7
  40187a:	3304      	adds	r3, #4
  40187c:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  40187e:	69fb      	ldr	r3, [r7, #28]
  401880:	08db      	lsrs	r3, r3, #3
  401882:	f3c3 0309 	ubfx	r3, r3, #0, #10
  401886:	617b      	str	r3, [r7, #20]
  401888:	697b      	ldr	r3, [r7, #20]
  40188a:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40188c:	68bb      	ldr	r3, [r7, #8]
  40188e:	fab3 f383 	clz	r3, r3
  401892:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  401894:	687b      	ldr	r3, [r7, #4]
  401896:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  401898:	f003 031f 	and.w	r3, r3, #31
  40189c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  40189e:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4018a2:	697b      	ldr	r3, [r7, #20]
  4018a4:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4018a6:	6a3a      	ldr	r2, [r7, #32]
  4018a8:	693b      	ldr	r3, [r7, #16]
  4018aa:	fa02 f303 	lsl.w	r3, r2, r3
  4018ae:	4619      	mov	r1, r3
  4018b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4018b2:	69bb      	ldr	r3, [r7, #24]
  4018b4:	fa02 f303 	lsl.w	r3, r2, r3
  4018b8:	430b      	orrs	r3, r1
  4018ba:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  4018bc:	4a0f      	ldr	r2, [pc, #60]	; (4018fc <SCB_EnableDCache+0xa0>)
  4018be:	68fb      	ldr	r3, [r7, #12]
  4018c0:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  4018c4:	6a3b      	ldr	r3, [r7, #32]
  4018c6:	1e5a      	subs	r2, r3, #1
  4018c8:	623a      	str	r2, [r7, #32]
  4018ca:	2b00      	cmp	r3, #0
  4018cc:	d1eb      	bne.n	4018a6 <SCB_EnableDCache+0x4a>
        } while(sets--);
  4018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4018d0:	1e5a      	subs	r2, r3, #1
  4018d2:	627a      	str	r2, [r7, #36]	; 0x24
  4018d4:	2b00      	cmp	r3, #0
  4018d6:	d1e4      	bne.n	4018a2 <SCB_EnableDCache+0x46>
  4018d8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4018dc:	4a07      	ldr	r2, [pc, #28]	; (4018fc <SCB_EnableDCache+0xa0>)
  4018de:	4b07      	ldr	r3, [pc, #28]	; (4018fc <SCB_EnableDCache+0xa0>)
  4018e0:	695b      	ldr	r3, [r3, #20]
  4018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4018e6:	6153      	str	r3, [r2, #20]
  4018e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4018ec:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  4018f0:	bf00      	nop
  4018f2:	372c      	adds	r7, #44	; 0x2c
  4018f4:	46bd      	mov	sp, r7
  4018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018fa:	4770      	bx	lr
  4018fc:	e000ed00 	.word	0xe000ed00

00401900 <sysclk_enable_peripheral_clock>:
{
  401900:	b580      	push	{r7, lr}
  401902:	b082      	sub	sp, #8
  401904:	af00      	add	r7, sp, #0
  401906:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401908:	6878      	ldr	r0, [r7, #4]
  40190a:	4b03      	ldr	r3, [pc, #12]	; (401918 <sysclk_enable_peripheral_clock+0x18>)
  40190c:	4798      	blx	r3
}
  40190e:	bf00      	nop
  401910:	3708      	adds	r7, #8
  401912:	46bd      	mov	sp, r7
  401914:	bd80      	pop	{r7, pc}
  401916:	bf00      	nop
  401918:	00402579 	.word	0x00402579

0040191c <ioport_init>:
{
  40191c:	b580      	push	{r7, lr}
  40191e:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  401920:	200a      	movs	r0, #10
  401922:	4b08      	ldr	r3, [pc, #32]	; (401944 <ioport_init+0x28>)
  401924:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401926:	200b      	movs	r0, #11
  401928:	4b06      	ldr	r3, [pc, #24]	; (401944 <ioport_init+0x28>)
  40192a:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  40192c:	200c      	movs	r0, #12
  40192e:	4b05      	ldr	r3, [pc, #20]	; (401944 <ioport_init+0x28>)
  401930:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  401932:	2010      	movs	r0, #16
  401934:	4b03      	ldr	r3, [pc, #12]	; (401944 <ioport_init+0x28>)
  401936:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  401938:	2011      	movs	r0, #17
  40193a:	4b02      	ldr	r3, [pc, #8]	; (401944 <ioport_init+0x28>)
  40193c:	4798      	blx	r3
}
  40193e:	bf00      	nop
  401940:	bd80      	pop	{r7, pc}
  401942:	bf00      	nop
  401944:	00401901 	.word	0x00401901

00401948 <ioport_set_pin_mode>:
{
  401948:	b480      	push	{r7}
  40194a:	b08d      	sub	sp, #52	; 0x34
  40194c:	af00      	add	r7, sp, #0
  40194e:	6078      	str	r0, [r7, #4]
  401950:	6039      	str	r1, [r7, #0]
  401952:	687b      	ldr	r3, [r7, #4]
  401954:	62fb      	str	r3, [r7, #44]	; 0x2c
  401956:	683b      	ldr	r3, [r7, #0]
  401958:	62bb      	str	r3, [r7, #40]	; 0x28
  40195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40195c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401960:	095a      	lsrs	r2, r3, #5
  401962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401964:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401966:	6a3b      	ldr	r3, [r7, #32]
  401968:	f003 031f 	and.w	r3, r3, #31
  40196c:	2101      	movs	r1, #1
  40196e:	fa01 f303 	lsl.w	r3, r1, r3
  401972:	61fa      	str	r2, [r7, #28]
  401974:	61bb      	str	r3, [r7, #24]
  401976:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401978:	617b      	str	r3, [r7, #20]
  40197a:	69fb      	ldr	r3, [r7, #28]
  40197c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40197e:	693a      	ldr	r2, [r7, #16]
  401980:	4b37      	ldr	r3, [pc, #220]	; (401a60 <ioport_set_pin_mode+0x118>)
  401982:	4413      	add	r3, r2
  401984:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  401986:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  401988:	697b      	ldr	r3, [r7, #20]
  40198a:	f003 0308 	and.w	r3, r3, #8
  40198e:	2b00      	cmp	r3, #0
  401990:	d003      	beq.n	40199a <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  401992:	68fb      	ldr	r3, [r7, #12]
  401994:	69ba      	ldr	r2, [r7, #24]
  401996:	665a      	str	r2, [r3, #100]	; 0x64
  401998:	e002      	b.n	4019a0 <ioport_set_pin_mode+0x58>
		base->PIO_PUDR = mask;
  40199a:	68fb      	ldr	r3, [r7, #12]
  40199c:	69ba      	ldr	r2, [r7, #24]
  40199e:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  4019a0:	697b      	ldr	r3, [r7, #20]
  4019a2:	f003 0310 	and.w	r3, r3, #16
  4019a6:	2b00      	cmp	r3, #0
  4019a8:	d004      	beq.n	4019b4 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4019aa:	68fb      	ldr	r3, [r7, #12]
  4019ac:	69ba      	ldr	r2, [r7, #24]
  4019ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4019b2:	e003      	b.n	4019bc <ioport_set_pin_mode+0x74>
		base->PIO_PPDDR = mask;
  4019b4:	68fb      	ldr	r3, [r7, #12]
  4019b6:	69ba      	ldr	r2, [r7, #24]
  4019b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4019bc:	697b      	ldr	r3, [r7, #20]
  4019be:	f003 0320 	and.w	r3, r3, #32
  4019c2:	2b00      	cmp	r3, #0
  4019c4:	d003      	beq.n	4019ce <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  4019c6:	68fb      	ldr	r3, [r7, #12]
  4019c8:	69ba      	ldr	r2, [r7, #24]
  4019ca:	651a      	str	r2, [r3, #80]	; 0x50
  4019cc:	e002      	b.n	4019d4 <ioport_set_pin_mode+0x8c>
		base->PIO_MDDR = mask;
  4019ce:	68fb      	ldr	r3, [r7, #12]
  4019d0:	69ba      	ldr	r2, [r7, #24]
  4019d2:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4019d4:	697b      	ldr	r3, [r7, #20]
  4019d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4019da:	2b00      	cmp	r3, #0
  4019dc:	d003      	beq.n	4019e6 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4019de:	68fb      	ldr	r3, [r7, #12]
  4019e0:	69ba      	ldr	r2, [r7, #24]
  4019e2:	621a      	str	r2, [r3, #32]
  4019e4:	e002      	b.n	4019ec <ioport_set_pin_mode+0xa4>
		base->PIO_IFDR = mask;
  4019e6:	68fb      	ldr	r3, [r7, #12]
  4019e8:	69ba      	ldr	r2, [r7, #24]
  4019ea:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  4019ec:	697b      	ldr	r3, [r7, #20]
  4019ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4019f2:	2b00      	cmp	r3, #0
  4019f4:	d004      	beq.n	401a00 <ioport_set_pin_mode+0xb8>
		base->PIO_IFSCER = mask;
  4019f6:	68fb      	ldr	r3, [r7, #12]
  4019f8:	69ba      	ldr	r2, [r7, #24]
  4019fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4019fe:	e003      	b.n	401a08 <ioport_set_pin_mode+0xc0>
		base->PIO_IFSCDR = mask;
  401a00:	68fb      	ldr	r3, [r7, #12]
  401a02:	69ba      	ldr	r2, [r7, #24]
  401a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401a08:	697b      	ldr	r3, [r7, #20]
  401a0a:	f003 0301 	and.w	r3, r3, #1
  401a0e:	2b00      	cmp	r3, #0
  401a10:	d006      	beq.n	401a20 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  401a12:	68fb      	ldr	r3, [r7, #12]
  401a14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a16:	69bb      	ldr	r3, [r7, #24]
  401a18:	431a      	orrs	r2, r3
  401a1a:	68fb      	ldr	r3, [r7, #12]
  401a1c:	671a      	str	r2, [r3, #112]	; 0x70
  401a1e:	e006      	b.n	401a2e <ioport_set_pin_mode+0xe6>
		base->PIO_ABCDSR[0] &= ~mask;
  401a20:	68fb      	ldr	r3, [r7, #12]
  401a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401a24:	69bb      	ldr	r3, [r7, #24]
  401a26:	43db      	mvns	r3, r3
  401a28:	401a      	ands	r2, r3
  401a2a:	68fb      	ldr	r3, [r7, #12]
  401a2c:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  401a2e:	697b      	ldr	r3, [r7, #20]
  401a30:	f003 0302 	and.w	r3, r3, #2
  401a34:	2b00      	cmp	r3, #0
  401a36:	d006      	beq.n	401a46 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401a38:	68fb      	ldr	r3, [r7, #12]
  401a3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a3c:	69bb      	ldr	r3, [r7, #24]
  401a3e:	431a      	orrs	r2, r3
  401a40:	68fb      	ldr	r3, [r7, #12]
  401a42:	675a      	str	r2, [r3, #116]	; 0x74
}
  401a44:	e006      	b.n	401a54 <ioport_set_pin_mode+0x10c>
		base->PIO_ABCDSR[1] &= ~mask;
  401a46:	68fb      	ldr	r3, [r7, #12]
  401a48:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401a4a:	69bb      	ldr	r3, [r7, #24]
  401a4c:	43db      	mvns	r3, r3
  401a4e:	401a      	ands	r2, r3
  401a50:	68fb      	ldr	r3, [r7, #12]
  401a52:	675a      	str	r2, [r3, #116]	; 0x74
  401a54:	bf00      	nop
  401a56:	3734      	adds	r7, #52	; 0x34
  401a58:	46bd      	mov	sp, r7
  401a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a5e:	4770      	bx	lr
  401a60:	00200707 	.word	0x00200707

00401a64 <ioport_set_pin_dir>:
{
  401a64:	b480      	push	{r7}
  401a66:	b08d      	sub	sp, #52	; 0x34
  401a68:	af00      	add	r7, sp, #0
  401a6a:	6078      	str	r0, [r7, #4]
  401a6c:	460b      	mov	r3, r1
  401a6e:	70fb      	strb	r3, [r7, #3]
  401a70:	687b      	ldr	r3, [r7, #4]
  401a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  401a74:	78fb      	ldrb	r3, [r7, #3]
  401a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a7c:	627b      	str	r3, [r7, #36]	; 0x24
  401a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401a80:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  401a82:	6a3b      	ldr	r3, [r7, #32]
  401a84:	095b      	lsrs	r3, r3, #5
  401a86:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401a88:	69fa      	ldr	r2, [r7, #28]
  401a8a:	4b17      	ldr	r3, [pc, #92]	; (401ae8 <ioport_set_pin_dir+0x84>)
  401a8c:	4413      	add	r3, r2
  401a8e:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401a90:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  401a92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401a96:	2b01      	cmp	r3, #1
  401a98:	d109      	bne.n	401aae <ioport_set_pin_dir+0x4a>
  401a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a9c:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  401a9e:	697b      	ldr	r3, [r7, #20]
  401aa0:	f003 031f 	and.w	r3, r3, #31
  401aa4:	2201      	movs	r2, #1
  401aa6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401aa8:	69bb      	ldr	r3, [r7, #24]
  401aaa:	611a      	str	r2, [r3, #16]
  401aac:	e00c      	b.n	401ac8 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  401aae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401ab2:	2b00      	cmp	r3, #0
  401ab4:	d108      	bne.n	401ac8 <ioport_set_pin_dir+0x64>
  401ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401ab8:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401aba:	693b      	ldr	r3, [r7, #16]
  401abc:	f003 031f 	and.w	r3, r3, #31
  401ac0:	2201      	movs	r2, #1
  401ac2:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401ac4:	69bb      	ldr	r3, [r7, #24]
  401ac6:	615a      	str	r2, [r3, #20]
  401ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401aca:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401acc:	68fb      	ldr	r3, [r7, #12]
  401ace:	f003 031f 	and.w	r3, r3, #31
  401ad2:	2201      	movs	r2, #1
  401ad4:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ad6:	69bb      	ldr	r3, [r7, #24]
  401ad8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401adc:	bf00      	nop
  401ade:	3734      	adds	r7, #52	; 0x34
  401ae0:	46bd      	mov	sp, r7
  401ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ae6:	4770      	bx	lr
  401ae8:	00200707 	.word	0x00200707

00401aec <ioport_set_pin_level>:
{
  401aec:	b480      	push	{r7}
  401aee:	b08b      	sub	sp, #44	; 0x2c
  401af0:	af00      	add	r7, sp, #0
  401af2:	6078      	str	r0, [r7, #4]
  401af4:	460b      	mov	r3, r1
  401af6:	70fb      	strb	r3, [r7, #3]
  401af8:	687b      	ldr	r3, [r7, #4]
  401afa:	627b      	str	r3, [r7, #36]	; 0x24
  401afc:	78fb      	ldrb	r3, [r7, #3]
  401afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b04:	61fb      	str	r3, [r7, #28]
  401b06:	69fb      	ldr	r3, [r7, #28]
  401b08:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401b0a:	69bb      	ldr	r3, [r7, #24]
  401b0c:	095b      	lsrs	r3, r3, #5
  401b0e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b10:	697a      	ldr	r2, [r7, #20]
  401b12:	4b10      	ldr	r3, [pc, #64]	; (401b54 <ioport_set_pin_level+0x68>)
  401b14:	4413      	add	r3, r2
  401b16:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401b18:	613b      	str	r3, [r7, #16]
	if (level) {
  401b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401b1e:	2b00      	cmp	r3, #0
  401b20:	d009      	beq.n	401b36 <ioport_set_pin_level+0x4a>
  401b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b24:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401b26:	68fb      	ldr	r3, [r7, #12]
  401b28:	f003 031f 	and.w	r3, r3, #31
  401b2c:	2201      	movs	r2, #1
  401b2e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401b30:	693b      	ldr	r3, [r7, #16]
  401b32:	631a      	str	r2, [r3, #48]	; 0x30
}
  401b34:	e008      	b.n	401b48 <ioport_set_pin_level+0x5c>
  401b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b38:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401b3a:	68bb      	ldr	r3, [r7, #8]
  401b3c:	f003 031f 	and.w	r3, r3, #31
  401b40:	2201      	movs	r2, #1
  401b42:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401b44:	693b      	ldr	r3, [r7, #16]
  401b46:	635a      	str	r2, [r3, #52]	; 0x34
  401b48:	bf00      	nop
  401b4a:	372c      	adds	r7, #44	; 0x2c
  401b4c:	46bd      	mov	sp, r7
  401b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b52:	4770      	bx	lr
  401b54:	00200707 	.word	0x00200707

00401b58 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  401b58:	b480      	push	{r7}
  401b5a:	b08d      	sub	sp, #52	; 0x34
  401b5c:	af00      	add	r7, sp, #0
  401b5e:	6078      	str	r0, [r7, #4]
  401b60:	460b      	mov	r3, r1
  401b62:	70fb      	strb	r3, [r7, #3]
  401b64:	687b      	ldr	r3, [r7, #4]
  401b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  401b68:	78fb      	ldrb	r3, [r7, #3]
  401b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  401b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b70:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  401b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b74:	095a      	lsrs	r2, r3, #5
  401b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b78:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  401b7a:	6a3b      	ldr	r3, [r7, #32]
  401b7c:	f003 031f 	and.w	r3, r3, #31
  401b80:	2101      	movs	r1, #1
  401b82:	fa01 f303 	lsl.w	r3, r1, r3
  401b86:	61fa      	str	r2, [r7, #28]
  401b88:	61bb      	str	r3, [r7, #24]
  401b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  401b8e:	75fb      	strb	r3, [r7, #23]
  401b90:	69fb      	ldr	r3, [r7, #28]
  401b92:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401b94:	693a      	ldr	r2, [r7, #16]
  401b96:	4b23      	ldr	r3, [pc, #140]	; (401c24 <ioport_set_pin_sense_mode+0xcc>)
  401b98:	4413      	add	r3, r2
  401b9a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  401b9c:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  401b9e:	7dfb      	ldrb	r3, [r7, #23]
  401ba0:	3b01      	subs	r3, #1
  401ba2:	2b03      	cmp	r3, #3
  401ba4:	d82e      	bhi.n	401c04 <ioport_set_pin_sense_mode+0xac>
  401ba6:	a201      	add	r2, pc, #4	; (adr r2, 401bac <ioport_set_pin_sense_mode+0x54>)
  401ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401bac:	00401be1 	.word	0x00401be1
  401bb0:	00401bf3 	.word	0x00401bf3
  401bb4:	00401bbd 	.word	0x00401bbd
  401bb8:	00401bcf 	.word	0x00401bcf
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  401bbc:	68fb      	ldr	r3, [r7, #12]
  401bbe:	69ba      	ldr	r2, [r7, #24]
  401bc0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  401bc4:	68fb      	ldr	r3, [r7, #12]
  401bc6:	69ba      	ldr	r2, [r7, #24]
  401bc8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401bcc:	e01f      	b.n	401c0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  401bce:	68fb      	ldr	r3, [r7, #12]
  401bd0:	69ba      	ldr	r2, [r7, #24]
  401bd2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  401bd6:	68fb      	ldr	r3, [r7, #12]
  401bd8:	69ba      	ldr	r2, [r7, #24]
  401bda:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401bde:	e016      	b.n	401c0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  401be0:	68fb      	ldr	r3, [r7, #12]
  401be2:	69ba      	ldr	r2, [r7, #24]
  401be4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  401be8:	68fb      	ldr	r3, [r7, #12]
  401bea:	69ba      	ldr	r2, [r7, #24]
  401bec:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401bf0:	e00d      	b.n	401c0e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401bf2:	68fb      	ldr	r3, [r7, #12]
  401bf4:	69ba      	ldr	r2, [r7, #24]
  401bf6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401bfa:	68fb      	ldr	r3, [r7, #12]
  401bfc:	69ba      	ldr	r2, [r7, #24]
  401bfe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401c02:	e004      	b.n	401c0e <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  401c04:	68fb      	ldr	r3, [r7, #12]
  401c06:	69ba      	ldr	r2, [r7, #24]
  401c08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  401c0c:	e003      	b.n	401c16 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  401c0e:	68fb      	ldr	r3, [r7, #12]
  401c10:	69ba      	ldr	r2, [r7, #24]
  401c12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  401c16:	bf00      	nop
  401c18:	3734      	adds	r7, #52	; 0x34
  401c1a:	46bd      	mov	sp, r7
  401c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c20:	4770      	bx	lr
  401c22:	bf00      	nop
  401c24:	00200707 	.word	0x00200707

00401c28 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  401c28:	b480      	push	{r7}
  401c2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  401c2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c30:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401c34:	4a0c      	ldr	r2, [pc, #48]	; (401c68 <tcm_disable+0x40>)
  401c36:	4b0c      	ldr	r3, [pc, #48]	; (401c68 <tcm_disable+0x40>)
  401c38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  401c3c:	f023 0301 	bic.w	r3, r3, #1
  401c40:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401c44:	4a08      	ldr	r2, [pc, #32]	; (401c68 <tcm_disable+0x40>)
  401c46:	4b08      	ldr	r3, [pc, #32]	; (401c68 <tcm_disable+0x40>)
  401c48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  401c4c:	f023 0301 	bic.w	r3, r3, #1
  401c50:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  401c54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c58:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  401c5c:	bf00      	nop
  401c5e:	46bd      	mov	sp, r7
  401c60:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c64:	4770      	bx	lr
  401c66:	bf00      	nop
  401c68:	e000ed00 	.word	0xe000ed00

00401c6c <board_init>:
#endif

void board_init(void)
{
  401c6c:	b580      	push	{r7, lr}
  401c6e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401c70:	4b13      	ldr	r3, [pc, #76]	; (401cc0 <board_init+0x54>)
  401c72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401c76:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  401c78:	4b12      	ldr	r3, [pc, #72]	; (401cc4 <board_init+0x58>)
  401c7a:	4798      	blx	r3
	SCB_EnableDCache();
  401c7c:	4b12      	ldr	r3, [pc, #72]	; (401cc8 <board_init+0x5c>)
  401c7e:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c80:	4b12      	ldr	r3, [pc, #72]	; (401ccc <board_init+0x60>)
  401c82:	4a13      	ldr	r2, [pc, #76]	; (401cd0 <board_init+0x64>)
  401c84:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401c86:	4b11      	ldr	r3, [pc, #68]	; (401ccc <board_init+0x60>)
  401c88:	4a12      	ldr	r2, [pc, #72]	; (401cd4 <board_init+0x68>)
  401c8a:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  401c8c:	4b12      	ldr	r3, [pc, #72]	; (401cd8 <board_init+0x6c>)
  401c8e:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  401c90:	4b12      	ldr	r3, [pc, #72]	; (401cdc <board_init+0x70>)
  401c92:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  401c94:	2101      	movs	r1, #1
  401c96:	2048      	movs	r0, #72	; 0x48
  401c98:	4b11      	ldr	r3, [pc, #68]	; (401ce0 <board_init+0x74>)
  401c9a:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  401c9c:	2101      	movs	r1, #1
  401c9e:	2048      	movs	r0, #72	; 0x48
  401ca0:	4b10      	ldr	r3, [pc, #64]	; (401ce4 <board_init+0x78>)
  401ca2:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  401ca4:	2100      	movs	r1, #0
  401ca6:	200b      	movs	r0, #11
  401ca8:	4b0d      	ldr	r3, [pc, #52]	; (401ce0 <board_init+0x74>)
  401caa:	4798      	blx	r3
  401cac:	2188      	movs	r1, #136	; 0x88
  401cae:	200b      	movs	r0, #11
  401cb0:	4b0d      	ldr	r3, [pc, #52]	; (401ce8 <board_init+0x7c>)
  401cb2:	4798      	blx	r3
  401cb4:	2102      	movs	r1, #2
  401cb6:	200b      	movs	r0, #11
  401cb8:	4b0c      	ldr	r3, [pc, #48]	; (401cec <board_init+0x80>)
  401cba:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  401cbc:	bf00      	nop
  401cbe:	bd80      	pop	{r7, pc}
  401cc0:	400e1850 	.word	0x400e1850
  401cc4:	00401825 	.word	0x00401825
  401cc8:	0040185d 	.word	0x0040185d
  401ccc:	400e0c00 	.word	0x400e0c00
  401cd0:	5a00080c 	.word	0x5a00080c
  401cd4:	5a00070c 	.word	0x5a00070c
  401cd8:	00401c29 	.word	0x00401c29
  401cdc:	0040191d 	.word	0x0040191d
  401ce0:	00401a65 	.word	0x00401a65
  401ce4:	00401aed 	.word	0x00401aed
  401ce8:	00401949 	.word	0x00401949
  401cec:	00401b59 	.word	0x00401b59

00401cf0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401cf0:	b480      	push	{r7}
  401cf2:	b085      	sub	sp, #20
  401cf4:	af00      	add	r7, sp, #0
  401cf6:	60f8      	str	r0, [r7, #12]
  401cf8:	60b9      	str	r1, [r7, #8]
  401cfa:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401cfc:	687b      	ldr	r3, [r7, #4]
  401cfe:	2b00      	cmp	r3, #0
  401d00:	d003      	beq.n	401d0a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401d02:	68fb      	ldr	r3, [r7, #12]
  401d04:	68ba      	ldr	r2, [r7, #8]
  401d06:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401d08:	e002      	b.n	401d10 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401d0a:	68fb      	ldr	r3, [r7, #12]
  401d0c:	68ba      	ldr	r2, [r7, #8]
  401d0e:	661a      	str	r2, [r3, #96]	; 0x60
}
  401d10:	bf00      	nop
  401d12:	3714      	adds	r7, #20
  401d14:	46bd      	mov	sp, r7
  401d16:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d1a:	4770      	bx	lr

00401d1c <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  401d1c:	b480      	push	{r7}
  401d1e:	b083      	sub	sp, #12
  401d20:	af00      	add	r7, sp, #0
  401d22:	6078      	str	r0, [r7, #4]
  401d24:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  401d26:	687b      	ldr	r3, [r7, #4]
  401d28:	683a      	ldr	r2, [r7, #0]
  401d2a:	631a      	str	r2, [r3, #48]	; 0x30
}
  401d2c:	bf00      	nop
  401d2e:	370c      	adds	r7, #12
  401d30:	46bd      	mov	sp, r7
  401d32:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d36:	4770      	bx	lr

00401d38 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  401d38:	b480      	push	{r7}
  401d3a:	b083      	sub	sp, #12
  401d3c:	af00      	add	r7, sp, #0
  401d3e:	6078      	str	r0, [r7, #4]
  401d40:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  401d42:	687b      	ldr	r3, [r7, #4]
  401d44:	683a      	ldr	r2, [r7, #0]
  401d46:	635a      	str	r2, [r3, #52]	; 0x34
}
  401d48:	bf00      	nop
  401d4a:	370c      	adds	r7, #12
  401d4c:	46bd      	mov	sp, r7
  401d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d52:	4770      	bx	lr

00401d54 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401d54:	b480      	push	{r7}
  401d56:	b087      	sub	sp, #28
  401d58:	af00      	add	r7, sp, #0
  401d5a:	60f8      	str	r0, [r7, #12]
  401d5c:	60b9      	str	r1, [r7, #8]
  401d5e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401d60:	68fb      	ldr	r3, [r7, #12]
  401d62:	687a      	ldr	r2, [r7, #4]
  401d64:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401d66:	68bb      	ldr	r3, [r7, #8]
  401d68:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401d6c:	d04a      	beq.n	401e04 <pio_set_peripheral+0xb0>
  401d6e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401d72:	d808      	bhi.n	401d86 <pio_set_peripheral+0x32>
  401d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401d78:	d016      	beq.n	401da8 <pio_set_peripheral+0x54>
  401d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401d7e:	d02c      	beq.n	401dda <pio_set_peripheral+0x86>
  401d80:	2b00      	cmp	r3, #0
  401d82:	d069      	beq.n	401e58 <pio_set_peripheral+0x104>
  401d84:	e064      	b.n	401e50 <pio_set_peripheral+0xfc>
  401d86:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401d8a:	d065      	beq.n	401e58 <pio_set_peripheral+0x104>
  401d8c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401d90:	d803      	bhi.n	401d9a <pio_set_peripheral+0x46>
  401d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401d96:	d04a      	beq.n	401e2e <pio_set_peripheral+0xda>
  401d98:	e05a      	b.n	401e50 <pio_set_peripheral+0xfc>
  401d9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401d9e:	d05b      	beq.n	401e58 <pio_set_peripheral+0x104>
  401da0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401da4:	d058      	beq.n	401e58 <pio_set_peripheral+0x104>
  401da6:	e053      	b.n	401e50 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401da8:	68fb      	ldr	r3, [r7, #12]
  401daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401dac:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401dae:	68fb      	ldr	r3, [r7, #12]
  401db0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401db2:	687b      	ldr	r3, [r7, #4]
  401db4:	43d9      	mvns	r1, r3
  401db6:	697b      	ldr	r3, [r7, #20]
  401db8:	400b      	ands	r3, r1
  401dba:	401a      	ands	r2, r3
  401dbc:	68fb      	ldr	r3, [r7, #12]
  401dbe:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401dc0:	68fb      	ldr	r3, [r7, #12]
  401dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401dc4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401dc6:	68fb      	ldr	r3, [r7, #12]
  401dc8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401dca:	687b      	ldr	r3, [r7, #4]
  401dcc:	43d9      	mvns	r1, r3
  401dce:	697b      	ldr	r3, [r7, #20]
  401dd0:	400b      	ands	r3, r1
  401dd2:	401a      	ands	r2, r3
  401dd4:	68fb      	ldr	r3, [r7, #12]
  401dd6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401dd8:	e03a      	b.n	401e50 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dda:	68fb      	ldr	r3, [r7, #12]
  401ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401dde:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401de0:	687a      	ldr	r2, [r7, #4]
  401de2:	697b      	ldr	r3, [r7, #20]
  401de4:	431a      	orrs	r2, r3
  401de6:	68fb      	ldr	r3, [r7, #12]
  401de8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401dea:	68fb      	ldr	r3, [r7, #12]
  401dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401dee:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401df0:	68fb      	ldr	r3, [r7, #12]
  401df2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401df4:	687b      	ldr	r3, [r7, #4]
  401df6:	43d9      	mvns	r1, r3
  401df8:	697b      	ldr	r3, [r7, #20]
  401dfa:	400b      	ands	r3, r1
  401dfc:	401a      	ands	r2, r3
  401dfe:	68fb      	ldr	r3, [r7, #12]
  401e00:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401e02:	e025      	b.n	401e50 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e04:	68fb      	ldr	r3, [r7, #12]
  401e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401e08:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401e0a:	68fb      	ldr	r3, [r7, #12]
  401e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401e0e:	687b      	ldr	r3, [r7, #4]
  401e10:	43d9      	mvns	r1, r3
  401e12:	697b      	ldr	r3, [r7, #20]
  401e14:	400b      	ands	r3, r1
  401e16:	401a      	ands	r2, r3
  401e18:	68fb      	ldr	r3, [r7, #12]
  401e1a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401e1c:	68fb      	ldr	r3, [r7, #12]
  401e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401e20:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e22:	687a      	ldr	r2, [r7, #4]
  401e24:	697b      	ldr	r3, [r7, #20]
  401e26:	431a      	orrs	r2, r3
  401e28:	68fb      	ldr	r3, [r7, #12]
  401e2a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401e2c:	e010      	b.n	401e50 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401e2e:	68fb      	ldr	r3, [r7, #12]
  401e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401e32:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401e34:	687a      	ldr	r2, [r7, #4]
  401e36:	697b      	ldr	r3, [r7, #20]
  401e38:	431a      	orrs	r2, r3
  401e3a:	68fb      	ldr	r3, [r7, #12]
  401e3c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401e3e:	68fb      	ldr	r3, [r7, #12]
  401e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401e42:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401e44:	687a      	ldr	r2, [r7, #4]
  401e46:	697b      	ldr	r3, [r7, #20]
  401e48:	431a      	orrs	r2, r3
  401e4a:	68fb      	ldr	r3, [r7, #12]
  401e4c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401e4e:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401e50:	68fb      	ldr	r3, [r7, #12]
  401e52:	687a      	ldr	r2, [r7, #4]
  401e54:	605a      	str	r2, [r3, #4]
  401e56:	e000      	b.n	401e5a <pio_set_peripheral+0x106>
		return;
  401e58:	bf00      	nop
}
  401e5a:	371c      	adds	r7, #28
  401e5c:	46bd      	mov	sp, r7
  401e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e62:	4770      	bx	lr

00401e64 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401e64:	b580      	push	{r7, lr}
  401e66:	b084      	sub	sp, #16
  401e68:	af00      	add	r7, sp, #0
  401e6a:	60f8      	str	r0, [r7, #12]
  401e6c:	60b9      	str	r1, [r7, #8]
  401e6e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401e70:	68b9      	ldr	r1, [r7, #8]
  401e72:	68f8      	ldr	r0, [r7, #12]
  401e74:	4b19      	ldr	r3, [pc, #100]	; (401edc <pio_set_input+0x78>)
  401e76:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401e78:	687b      	ldr	r3, [r7, #4]
  401e7a:	f003 0301 	and.w	r3, r3, #1
  401e7e:	461a      	mov	r2, r3
  401e80:	68b9      	ldr	r1, [r7, #8]
  401e82:	68f8      	ldr	r0, [r7, #12]
  401e84:	4b16      	ldr	r3, [pc, #88]	; (401ee0 <pio_set_input+0x7c>)
  401e86:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401e88:	687b      	ldr	r3, [r7, #4]
  401e8a:	f003 030a 	and.w	r3, r3, #10
  401e8e:	2b00      	cmp	r3, #0
  401e90:	d003      	beq.n	401e9a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401e92:	68fb      	ldr	r3, [r7, #12]
  401e94:	68ba      	ldr	r2, [r7, #8]
  401e96:	621a      	str	r2, [r3, #32]
  401e98:	e002      	b.n	401ea0 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401e9a:	68fb      	ldr	r3, [r7, #12]
  401e9c:	68ba      	ldr	r2, [r7, #8]
  401e9e:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401ea0:	687b      	ldr	r3, [r7, #4]
  401ea2:	f003 0302 	and.w	r3, r3, #2
  401ea6:	2b00      	cmp	r3, #0
  401ea8:	d004      	beq.n	401eb4 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401eaa:	68fb      	ldr	r3, [r7, #12]
  401eac:	68ba      	ldr	r2, [r7, #8]
  401eae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401eb2:	e008      	b.n	401ec6 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401eb4:	687b      	ldr	r3, [r7, #4]
  401eb6:	f003 0308 	and.w	r3, r3, #8
  401eba:	2b00      	cmp	r3, #0
  401ebc:	d003      	beq.n	401ec6 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401ebe:	68fb      	ldr	r3, [r7, #12]
  401ec0:	68ba      	ldr	r2, [r7, #8]
  401ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401ec6:	68fb      	ldr	r3, [r7, #12]
  401ec8:	68ba      	ldr	r2, [r7, #8]
  401eca:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401ecc:	68fb      	ldr	r3, [r7, #12]
  401ece:	68ba      	ldr	r2, [r7, #8]
  401ed0:	601a      	str	r2, [r3, #0]
}
  401ed2:	bf00      	nop
  401ed4:	3710      	adds	r7, #16
  401ed6:	46bd      	mov	sp, r7
  401ed8:	bd80      	pop	{r7, pc}
  401eda:	bf00      	nop
  401edc:	0040209d 	.word	0x0040209d
  401ee0:	00401cf1 	.word	0x00401cf1

00401ee4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401ee4:	b580      	push	{r7, lr}
  401ee6:	b084      	sub	sp, #16
  401ee8:	af00      	add	r7, sp, #0
  401eea:	60f8      	str	r0, [r7, #12]
  401eec:	60b9      	str	r1, [r7, #8]
  401eee:	607a      	str	r2, [r7, #4]
  401ef0:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401ef2:	68b9      	ldr	r1, [r7, #8]
  401ef4:	68f8      	ldr	r0, [r7, #12]
  401ef6:	4b12      	ldr	r3, [pc, #72]	; (401f40 <pio_set_output+0x5c>)
  401ef8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401efa:	69ba      	ldr	r2, [r7, #24]
  401efc:	68b9      	ldr	r1, [r7, #8]
  401efe:	68f8      	ldr	r0, [r7, #12]
  401f00:	4b10      	ldr	r3, [pc, #64]	; (401f44 <pio_set_output+0x60>)
  401f02:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401f04:	683b      	ldr	r3, [r7, #0]
  401f06:	2b00      	cmp	r3, #0
  401f08:	d003      	beq.n	401f12 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401f0a:	68fb      	ldr	r3, [r7, #12]
  401f0c:	68ba      	ldr	r2, [r7, #8]
  401f0e:	651a      	str	r2, [r3, #80]	; 0x50
  401f10:	e002      	b.n	401f18 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401f12:	68fb      	ldr	r3, [r7, #12]
  401f14:	68ba      	ldr	r2, [r7, #8]
  401f16:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401f18:	687b      	ldr	r3, [r7, #4]
  401f1a:	2b00      	cmp	r3, #0
  401f1c:	d003      	beq.n	401f26 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401f1e:	68fb      	ldr	r3, [r7, #12]
  401f20:	68ba      	ldr	r2, [r7, #8]
  401f22:	631a      	str	r2, [r3, #48]	; 0x30
  401f24:	e002      	b.n	401f2c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401f26:	68fb      	ldr	r3, [r7, #12]
  401f28:	68ba      	ldr	r2, [r7, #8]
  401f2a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401f2c:	68fb      	ldr	r3, [r7, #12]
  401f2e:	68ba      	ldr	r2, [r7, #8]
  401f30:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401f32:	68fb      	ldr	r3, [r7, #12]
  401f34:	68ba      	ldr	r2, [r7, #8]
  401f36:	601a      	str	r2, [r3, #0]
}
  401f38:	bf00      	nop
  401f3a:	3710      	adds	r7, #16
  401f3c:	46bd      	mov	sp, r7
  401f3e:	bd80      	pop	{r7, pc}
  401f40:	0040209d 	.word	0x0040209d
  401f44:	00401cf1 	.word	0x00401cf1

00401f48 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  401f48:	b590      	push	{r4, r7, lr}
  401f4a:	b087      	sub	sp, #28
  401f4c:	af02      	add	r7, sp, #8
  401f4e:	60f8      	str	r0, [r7, #12]
  401f50:	60b9      	str	r1, [r7, #8]
  401f52:	607a      	str	r2, [r7, #4]
  401f54:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  401f56:	68bb      	ldr	r3, [r7, #8]
  401f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401f5c:	d016      	beq.n	401f8c <pio_configure+0x44>
  401f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401f62:	d809      	bhi.n	401f78 <pio_configure+0x30>
  401f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401f68:	d010      	beq.n	401f8c <pio_configure+0x44>
  401f6a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401f6e:	d00d      	beq.n	401f8c <pio_configure+0x44>
  401f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401f74:	d00a      	beq.n	401f8c <pio_configure+0x44>
  401f76:	e03d      	b.n	401ff4 <pio_configure+0xac>
  401f78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401f7c:	d01a      	beq.n	401fb4 <pio_configure+0x6c>
  401f7e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401f82:	d017      	beq.n	401fb4 <pio_configure+0x6c>
  401f84:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401f88:	d00e      	beq.n	401fa8 <pio_configure+0x60>
  401f8a:	e033      	b.n	401ff4 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401f8c:	687a      	ldr	r2, [r7, #4]
  401f8e:	68b9      	ldr	r1, [r7, #8]
  401f90:	68f8      	ldr	r0, [r7, #12]
  401f92:	4b1c      	ldr	r3, [pc, #112]	; (402004 <pio_configure+0xbc>)
  401f94:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  401f96:	683b      	ldr	r3, [r7, #0]
  401f98:	f003 0301 	and.w	r3, r3, #1
  401f9c:	461a      	mov	r2, r3
  401f9e:	6879      	ldr	r1, [r7, #4]
  401fa0:	68f8      	ldr	r0, [r7, #12]
  401fa2:	4b19      	ldr	r3, [pc, #100]	; (402008 <pio_configure+0xc0>)
  401fa4:	4798      	blx	r3
		break;
  401fa6:	e027      	b.n	401ff8 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401fa8:	683a      	ldr	r2, [r7, #0]
  401faa:	6879      	ldr	r1, [r7, #4]
  401fac:	68f8      	ldr	r0, [r7, #12]
  401fae:	4b17      	ldr	r3, [pc, #92]	; (40200c <pio_configure+0xc4>)
  401fb0:	4798      	blx	r3
		break;
  401fb2:	e021      	b.n	401ff8 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401fb4:	68bb      	ldr	r3, [r7, #8]
  401fb6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401fba:	bf0c      	ite	eq
  401fbc:	2301      	moveq	r3, #1
  401fbe:	2300      	movne	r3, #0
  401fc0:	b2db      	uxtb	r3, r3
  401fc2:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  401fc4:	683b      	ldr	r3, [r7, #0]
  401fc6:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401fca:	2b00      	cmp	r3, #0
  401fcc:	bf14      	ite	ne
  401fce:	2301      	movne	r3, #1
  401fd0:	2300      	moveq	r3, #0
  401fd2:	b2db      	uxtb	r3, r3
  401fd4:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  401fd6:	683b      	ldr	r3, [r7, #0]
  401fd8:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401fdc:	2b00      	cmp	r3, #0
  401fde:	bf14      	ite	ne
  401fe0:	2301      	movne	r3, #1
  401fe2:	2300      	moveq	r3, #0
  401fe4:	b2db      	uxtb	r3, r3
  401fe6:	9300      	str	r3, [sp, #0]
  401fe8:	460b      	mov	r3, r1
  401fea:	6879      	ldr	r1, [r7, #4]
  401fec:	68f8      	ldr	r0, [r7, #12]
  401fee:	4c08      	ldr	r4, [pc, #32]	; (402010 <pio_configure+0xc8>)
  401ff0:	47a0      	blx	r4
		break;
  401ff2:	e001      	b.n	401ff8 <pio_configure+0xb0>

	default:
		return 0;
  401ff4:	2300      	movs	r3, #0
  401ff6:	e000      	b.n	401ffa <pio_configure+0xb2>
	}

	return 1;
  401ff8:	2301      	movs	r3, #1
}
  401ffa:	4618      	mov	r0, r3
  401ffc:	3714      	adds	r7, #20
  401ffe:	46bd      	mov	sp, r7
  402000:	bd90      	pop	{r4, r7, pc}
  402002:	bf00      	nop
  402004:	00401d55 	.word	0x00401d55
  402008:	00401cf1 	.word	0x00401cf1
  40200c:	00401e65 	.word	0x00401e65
  402010:	00401ee5 	.word	0x00401ee5

00402014 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  402014:	b480      	push	{r7}
  402016:	b085      	sub	sp, #20
  402018:	af00      	add	r7, sp, #0
  40201a:	60f8      	str	r0, [r7, #12]
  40201c:	60b9      	str	r1, [r7, #8]
  40201e:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402020:	687b      	ldr	r3, [r7, #4]
  402022:	f003 0310 	and.w	r3, r3, #16
  402026:	2b00      	cmp	r3, #0
  402028:	d020      	beq.n	40206c <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40202a:	68fb      	ldr	r3, [r7, #12]
  40202c:	68ba      	ldr	r2, [r7, #8]
  40202e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402032:	687b      	ldr	r3, [r7, #4]
  402034:	f003 0320 	and.w	r3, r3, #32
  402038:	2b00      	cmp	r3, #0
  40203a:	d004      	beq.n	402046 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  40203c:	68fb      	ldr	r3, [r7, #12]
  40203e:	68ba      	ldr	r2, [r7, #8]
  402040:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  402044:	e003      	b.n	40204e <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  402046:	68fb      	ldr	r3, [r7, #12]
  402048:	68ba      	ldr	r2, [r7, #8]
  40204a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40204e:	687b      	ldr	r3, [r7, #4]
  402050:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402054:	2b00      	cmp	r3, #0
  402056:	d004      	beq.n	402062 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402058:	68fb      	ldr	r3, [r7, #12]
  40205a:	68ba      	ldr	r2, [r7, #8]
  40205c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  402060:	e008      	b.n	402074 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  402062:	68fb      	ldr	r3, [r7, #12]
  402064:	68ba      	ldr	r2, [r7, #8]
  402066:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  40206a:	e003      	b.n	402074 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  40206c:	68fb      	ldr	r3, [r7, #12]
  40206e:	68ba      	ldr	r2, [r7, #8]
  402070:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  402074:	bf00      	nop
  402076:	3714      	adds	r7, #20
  402078:	46bd      	mov	sp, r7
  40207a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40207e:	4770      	bx	lr

00402080 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  402080:	b480      	push	{r7}
  402082:	b083      	sub	sp, #12
  402084:	af00      	add	r7, sp, #0
  402086:	6078      	str	r0, [r7, #4]
  402088:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  40208a:	687b      	ldr	r3, [r7, #4]
  40208c:	683a      	ldr	r2, [r7, #0]
  40208e:	641a      	str	r2, [r3, #64]	; 0x40
}
  402090:	bf00      	nop
  402092:	370c      	adds	r7, #12
  402094:	46bd      	mov	sp, r7
  402096:	f85d 7b04 	ldr.w	r7, [sp], #4
  40209a:	4770      	bx	lr

0040209c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  40209c:	b480      	push	{r7}
  40209e:	b083      	sub	sp, #12
  4020a0:	af00      	add	r7, sp, #0
  4020a2:	6078      	str	r0, [r7, #4]
  4020a4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4020a6:	687b      	ldr	r3, [r7, #4]
  4020a8:	683a      	ldr	r2, [r7, #0]
  4020aa:	645a      	str	r2, [r3, #68]	; 0x44
}
  4020ac:	bf00      	nop
  4020ae:	370c      	adds	r7, #12
  4020b0:	46bd      	mov	sp, r7
  4020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020b6:	4770      	bx	lr

004020b8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4020b8:	b480      	push	{r7}
  4020ba:	b083      	sub	sp, #12
  4020bc:	af00      	add	r7, sp, #0
  4020be:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4020c0:	687b      	ldr	r3, [r7, #4]
  4020c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4020c4:	4618      	mov	r0, r3
  4020c6:	370c      	adds	r7, #12
  4020c8:	46bd      	mov	sp, r7
  4020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020ce:	4770      	bx	lr

004020d0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4020d0:	b480      	push	{r7}
  4020d2:	b083      	sub	sp, #12
  4020d4:	af00      	add	r7, sp, #0
  4020d6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4020d8:	687b      	ldr	r3, [r7, #4]
  4020da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4020dc:	4618      	mov	r0, r3
  4020de:	370c      	adds	r7, #12
  4020e0:	46bd      	mov	sp, r7
  4020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020e6:	4770      	bx	lr

004020e8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4020e8:	b580      	push	{r7, lr}
  4020ea:	b084      	sub	sp, #16
  4020ec:	af00      	add	r7, sp, #0
  4020ee:	6078      	str	r0, [r7, #4]
  4020f0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4020f2:	6878      	ldr	r0, [r7, #4]
  4020f4:	4b26      	ldr	r3, [pc, #152]	; (402190 <pio_handler_process+0xa8>)
  4020f6:	4798      	blx	r3
  4020f8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4020fa:	6878      	ldr	r0, [r7, #4]
  4020fc:	4b25      	ldr	r3, [pc, #148]	; (402194 <pio_handler_process+0xac>)
  4020fe:	4798      	blx	r3
  402100:	4602      	mov	r2, r0
  402102:	68fb      	ldr	r3, [r7, #12]
  402104:	4013      	ands	r3, r2
  402106:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  402108:	68fb      	ldr	r3, [r7, #12]
  40210a:	2b00      	cmp	r3, #0
  40210c:	d03c      	beq.n	402188 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40210e:	2300      	movs	r3, #0
  402110:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  402112:	e034      	b.n	40217e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  402114:	4a20      	ldr	r2, [pc, #128]	; (402198 <pio_handler_process+0xb0>)
  402116:	68bb      	ldr	r3, [r7, #8]
  402118:	011b      	lsls	r3, r3, #4
  40211a:	4413      	add	r3, r2
  40211c:	681a      	ldr	r2, [r3, #0]
  40211e:	683b      	ldr	r3, [r7, #0]
  402120:	429a      	cmp	r2, r3
  402122:	d126      	bne.n	402172 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402124:	4a1c      	ldr	r2, [pc, #112]	; (402198 <pio_handler_process+0xb0>)
  402126:	68bb      	ldr	r3, [r7, #8]
  402128:	011b      	lsls	r3, r3, #4
  40212a:	4413      	add	r3, r2
  40212c:	3304      	adds	r3, #4
  40212e:	681a      	ldr	r2, [r3, #0]
  402130:	68fb      	ldr	r3, [r7, #12]
  402132:	4013      	ands	r3, r2
  402134:	2b00      	cmp	r3, #0
  402136:	d01c      	beq.n	402172 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402138:	4a17      	ldr	r2, [pc, #92]	; (402198 <pio_handler_process+0xb0>)
  40213a:	68bb      	ldr	r3, [r7, #8]
  40213c:	011b      	lsls	r3, r3, #4
  40213e:	4413      	add	r3, r2
  402140:	330c      	adds	r3, #12
  402142:	681b      	ldr	r3, [r3, #0]
  402144:	4914      	ldr	r1, [pc, #80]	; (402198 <pio_handler_process+0xb0>)
  402146:	68ba      	ldr	r2, [r7, #8]
  402148:	0112      	lsls	r2, r2, #4
  40214a:	440a      	add	r2, r1
  40214c:	6810      	ldr	r0, [r2, #0]
  40214e:	4912      	ldr	r1, [pc, #72]	; (402198 <pio_handler_process+0xb0>)
  402150:	68ba      	ldr	r2, [r7, #8]
  402152:	0112      	lsls	r2, r2, #4
  402154:	440a      	add	r2, r1
  402156:	3204      	adds	r2, #4
  402158:	6812      	ldr	r2, [r2, #0]
  40215a:	4611      	mov	r1, r2
  40215c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40215e:	4a0e      	ldr	r2, [pc, #56]	; (402198 <pio_handler_process+0xb0>)
  402160:	68bb      	ldr	r3, [r7, #8]
  402162:	011b      	lsls	r3, r3, #4
  402164:	4413      	add	r3, r2
  402166:	3304      	adds	r3, #4
  402168:	681b      	ldr	r3, [r3, #0]
  40216a:	43db      	mvns	r3, r3
  40216c:	68fa      	ldr	r2, [r7, #12]
  40216e:	4013      	ands	r3, r2
  402170:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  402172:	68bb      	ldr	r3, [r7, #8]
  402174:	3301      	adds	r3, #1
  402176:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  402178:	68bb      	ldr	r3, [r7, #8]
  40217a:	2b06      	cmp	r3, #6
  40217c:	d803      	bhi.n	402186 <pio_handler_process+0x9e>
		while (status != 0) {
  40217e:	68fb      	ldr	r3, [r7, #12]
  402180:	2b00      	cmp	r3, #0
  402182:	d1c7      	bne.n	402114 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  402184:	e000      	b.n	402188 <pio_handler_process+0xa0>
				break;
  402186:	bf00      	nop
}
  402188:	bf00      	nop
  40218a:	3710      	adds	r7, #16
  40218c:	46bd      	mov	sp, r7
  40218e:	bd80      	pop	{r7, pc}
  402190:	004020b9 	.word	0x004020b9
  402194:	004020d1 	.word	0x004020d1
  402198:	20400680 	.word	0x20400680

0040219c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40219c:	b580      	push	{r7, lr}
  40219e:	b086      	sub	sp, #24
  4021a0:	af00      	add	r7, sp, #0
  4021a2:	60f8      	str	r0, [r7, #12]
  4021a4:	60b9      	str	r1, [r7, #8]
  4021a6:	607a      	str	r2, [r7, #4]
  4021a8:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4021aa:	4b21      	ldr	r3, [pc, #132]	; (402230 <pio_handler_set+0x94>)
  4021ac:	681b      	ldr	r3, [r3, #0]
  4021ae:	2b06      	cmp	r3, #6
  4021b0:	d901      	bls.n	4021b6 <pio_handler_set+0x1a>
		return 1;
  4021b2:	2301      	movs	r3, #1
  4021b4:	e038      	b.n	402228 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4021b6:	2300      	movs	r3, #0
  4021b8:	75fb      	strb	r3, [r7, #23]
  4021ba:	e011      	b.n	4021e0 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  4021bc:	7dfb      	ldrb	r3, [r7, #23]
  4021be:	011b      	lsls	r3, r3, #4
  4021c0:	4a1c      	ldr	r2, [pc, #112]	; (402234 <pio_handler_set+0x98>)
  4021c2:	4413      	add	r3, r2
  4021c4:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4021c6:	693b      	ldr	r3, [r7, #16]
  4021c8:	681a      	ldr	r2, [r3, #0]
  4021ca:	68bb      	ldr	r3, [r7, #8]
  4021cc:	429a      	cmp	r2, r3
  4021ce:	d104      	bne.n	4021da <pio_handler_set+0x3e>
  4021d0:	693b      	ldr	r3, [r7, #16]
  4021d2:	685a      	ldr	r2, [r3, #4]
  4021d4:	687b      	ldr	r3, [r7, #4]
  4021d6:	429a      	cmp	r2, r3
  4021d8:	d008      	beq.n	4021ec <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4021da:	7dfb      	ldrb	r3, [r7, #23]
  4021dc:	3301      	adds	r3, #1
  4021de:	75fb      	strb	r3, [r7, #23]
  4021e0:	7dfa      	ldrb	r2, [r7, #23]
  4021e2:	4b13      	ldr	r3, [pc, #76]	; (402230 <pio_handler_set+0x94>)
  4021e4:	681b      	ldr	r3, [r3, #0]
  4021e6:	429a      	cmp	r2, r3
  4021e8:	d9e8      	bls.n	4021bc <pio_handler_set+0x20>
  4021ea:	e000      	b.n	4021ee <pio_handler_set+0x52>
			break;
  4021ec:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4021ee:	693b      	ldr	r3, [r7, #16]
  4021f0:	68ba      	ldr	r2, [r7, #8]
  4021f2:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  4021f4:	693b      	ldr	r3, [r7, #16]
  4021f6:	687a      	ldr	r2, [r7, #4]
  4021f8:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  4021fa:	693b      	ldr	r3, [r7, #16]
  4021fc:	683a      	ldr	r2, [r7, #0]
  4021fe:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  402200:	693b      	ldr	r3, [r7, #16]
  402202:	6a3a      	ldr	r2, [r7, #32]
  402204:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  402206:	7dfa      	ldrb	r2, [r7, #23]
  402208:	4b09      	ldr	r3, [pc, #36]	; (402230 <pio_handler_set+0x94>)
  40220a:	681b      	ldr	r3, [r3, #0]
  40220c:	3301      	adds	r3, #1
  40220e:	429a      	cmp	r2, r3
  402210:	d104      	bne.n	40221c <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  402212:	4b07      	ldr	r3, [pc, #28]	; (402230 <pio_handler_set+0x94>)
  402214:	681b      	ldr	r3, [r3, #0]
  402216:	3301      	adds	r3, #1
  402218:	4a05      	ldr	r2, [pc, #20]	; (402230 <pio_handler_set+0x94>)
  40221a:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40221c:	683a      	ldr	r2, [r7, #0]
  40221e:	6879      	ldr	r1, [r7, #4]
  402220:	68f8      	ldr	r0, [r7, #12]
  402222:	4b05      	ldr	r3, [pc, #20]	; (402238 <pio_handler_set+0x9c>)
  402224:	4798      	blx	r3

	return 0;
  402226:	2300      	movs	r3, #0
}
  402228:	4618      	mov	r0, r3
  40222a:	3718      	adds	r7, #24
  40222c:	46bd      	mov	sp, r7
  40222e:	bd80      	pop	{r7, pc}
  402230:	204006f0 	.word	0x204006f0
  402234:	20400680 	.word	0x20400680
  402238:	00402015 	.word	0x00402015

0040223c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40223c:	b580      	push	{r7, lr}
  40223e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  402240:	210a      	movs	r1, #10
  402242:	4802      	ldr	r0, [pc, #8]	; (40224c <PIOA_Handler+0x10>)
  402244:	4b02      	ldr	r3, [pc, #8]	; (402250 <PIOA_Handler+0x14>)
  402246:	4798      	blx	r3
}
  402248:	bf00      	nop
  40224a:	bd80      	pop	{r7, pc}
  40224c:	400e0e00 	.word	0x400e0e00
  402250:	004020e9 	.word	0x004020e9

00402254 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402254:	b580      	push	{r7, lr}
  402256:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  402258:	210b      	movs	r1, #11
  40225a:	4802      	ldr	r0, [pc, #8]	; (402264 <PIOB_Handler+0x10>)
  40225c:	4b02      	ldr	r3, [pc, #8]	; (402268 <PIOB_Handler+0x14>)
  40225e:	4798      	blx	r3
}
  402260:	bf00      	nop
  402262:	bd80      	pop	{r7, pc}
  402264:	400e1000 	.word	0x400e1000
  402268:	004020e9 	.word	0x004020e9

0040226c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40226c:	b580      	push	{r7, lr}
  40226e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  402270:	210c      	movs	r1, #12
  402272:	4802      	ldr	r0, [pc, #8]	; (40227c <PIOC_Handler+0x10>)
  402274:	4b02      	ldr	r3, [pc, #8]	; (402280 <PIOC_Handler+0x14>)
  402276:	4798      	blx	r3
}
  402278:	bf00      	nop
  40227a:	bd80      	pop	{r7, pc}
  40227c:	400e1200 	.word	0x400e1200
  402280:	004020e9 	.word	0x004020e9

00402284 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402284:	b580      	push	{r7, lr}
  402286:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  402288:	2110      	movs	r1, #16
  40228a:	4802      	ldr	r0, [pc, #8]	; (402294 <PIOD_Handler+0x10>)
  40228c:	4b02      	ldr	r3, [pc, #8]	; (402298 <PIOD_Handler+0x14>)
  40228e:	4798      	blx	r3
}
  402290:	bf00      	nop
  402292:	bd80      	pop	{r7, pc}
  402294:	400e1400 	.word	0x400e1400
  402298:	004020e9 	.word	0x004020e9

0040229c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40229c:	b580      	push	{r7, lr}
  40229e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4022a0:	2111      	movs	r1, #17
  4022a2:	4802      	ldr	r0, [pc, #8]	; (4022ac <PIOE_Handler+0x10>)
  4022a4:	4b02      	ldr	r3, [pc, #8]	; (4022b0 <PIOE_Handler+0x14>)
  4022a6:	4798      	blx	r3
}
  4022a8:	bf00      	nop
  4022aa:	bd80      	pop	{r7, pc}
  4022ac:	400e1600 	.word	0x400e1600
  4022b0:	004020e9 	.word	0x004020e9

004022b4 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4022b4:	b480      	push	{r7}
  4022b6:	b083      	sub	sp, #12
  4022b8:	af00      	add	r7, sp, #0
  4022ba:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4022bc:	687b      	ldr	r3, [r7, #4]
  4022be:	3b01      	subs	r3, #1
  4022c0:	2b03      	cmp	r3, #3
  4022c2:	d81a      	bhi.n	4022fa <pmc_mck_set_division+0x46>
  4022c4:	a201      	add	r2, pc, #4	; (adr r2, 4022cc <pmc_mck_set_division+0x18>)
  4022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4022ca:	bf00      	nop
  4022cc:	004022dd 	.word	0x004022dd
  4022d0:	004022e3 	.word	0x004022e3
  4022d4:	004022eb 	.word	0x004022eb
  4022d8:	004022f3 	.word	0x004022f3
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4022dc:	2300      	movs	r3, #0
  4022de:	607b      	str	r3, [r7, #4]
			break;
  4022e0:	e00e      	b.n	402300 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4022e2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4022e6:	607b      	str	r3, [r7, #4]
			break;
  4022e8:	e00a      	b.n	402300 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4022ea:	f44f 7340 	mov.w	r3, #768	; 0x300
  4022ee:	607b      	str	r3, [r7, #4]
			break;
  4022f0:	e006      	b.n	402300 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4022f2:	f44f 7300 	mov.w	r3, #512	; 0x200
  4022f6:	607b      	str	r3, [r7, #4]
			break;
  4022f8:	e002      	b.n	402300 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4022fa:	2300      	movs	r3, #0
  4022fc:	607b      	str	r3, [r7, #4]
			break;
  4022fe:	bf00      	nop
	}
	PMC->PMC_MCKR =
  402300:	490a      	ldr	r1, [pc, #40]	; (40232c <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  402302:	4b0a      	ldr	r3, [pc, #40]	; (40232c <pmc_mck_set_division+0x78>)
  402304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40230a:	687b      	ldr	r3, [r7, #4]
  40230c:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  40230e:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402310:	bf00      	nop
  402312:	4b06      	ldr	r3, [pc, #24]	; (40232c <pmc_mck_set_division+0x78>)
  402314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402316:	f003 0308 	and.w	r3, r3, #8
  40231a:	2b00      	cmp	r3, #0
  40231c:	d0f9      	beq.n	402312 <pmc_mck_set_division+0x5e>
}
  40231e:	bf00      	nop
  402320:	370c      	adds	r7, #12
  402322:	46bd      	mov	sp, r7
  402324:	f85d 7b04 	ldr.w	r7, [sp], #4
  402328:	4770      	bx	lr
  40232a:	bf00      	nop
  40232c:	400e0600 	.word	0x400e0600

00402330 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  402330:	b480      	push	{r7}
  402332:	b085      	sub	sp, #20
  402334:	af00      	add	r7, sp, #0
  402336:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402338:	491d      	ldr	r1, [pc, #116]	; (4023b0 <pmc_switch_mck_to_pllack+0x80>)
  40233a:	4b1d      	ldr	r3, [pc, #116]	; (4023b0 <pmc_switch_mck_to_pllack+0x80>)
  40233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40233e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  402342:	687b      	ldr	r3, [r7, #4]
  402344:	4313      	orrs	r3, r2
  402346:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40234c:	60fb      	str	r3, [r7, #12]
  40234e:	e007      	b.n	402360 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402350:	68fb      	ldr	r3, [r7, #12]
  402352:	2b00      	cmp	r3, #0
  402354:	d101      	bne.n	40235a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  402356:	2301      	movs	r3, #1
  402358:	e023      	b.n	4023a2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40235a:	68fb      	ldr	r3, [r7, #12]
  40235c:	3b01      	subs	r3, #1
  40235e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402360:	4b13      	ldr	r3, [pc, #76]	; (4023b0 <pmc_switch_mck_to_pllack+0x80>)
  402362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402364:	f003 0308 	and.w	r3, r3, #8
  402368:	2b00      	cmp	r3, #0
  40236a:	d0f1      	beq.n	402350 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40236c:	4a10      	ldr	r2, [pc, #64]	; (4023b0 <pmc_switch_mck_to_pllack+0x80>)
  40236e:	4b10      	ldr	r3, [pc, #64]	; (4023b0 <pmc_switch_mck_to_pllack+0x80>)
  402370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402372:	f023 0303 	bic.w	r3, r3, #3
  402376:	f043 0302 	orr.w	r3, r3, #2
  40237a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40237c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402380:	60fb      	str	r3, [r7, #12]
  402382:	e007      	b.n	402394 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402384:	68fb      	ldr	r3, [r7, #12]
  402386:	2b00      	cmp	r3, #0
  402388:	d101      	bne.n	40238e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40238a:	2301      	movs	r3, #1
  40238c:	e009      	b.n	4023a2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40238e:	68fb      	ldr	r3, [r7, #12]
  402390:	3b01      	subs	r3, #1
  402392:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402394:	4b06      	ldr	r3, [pc, #24]	; (4023b0 <pmc_switch_mck_to_pllack+0x80>)
  402396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402398:	f003 0308 	and.w	r3, r3, #8
  40239c:	2b00      	cmp	r3, #0
  40239e:	d0f1      	beq.n	402384 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4023a0:	2300      	movs	r3, #0
}
  4023a2:	4618      	mov	r0, r3
  4023a4:	3714      	adds	r7, #20
  4023a6:	46bd      	mov	sp, r7
  4023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023ac:	4770      	bx	lr
  4023ae:	bf00      	nop
  4023b0:	400e0600 	.word	0x400e0600

004023b4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4023b4:	b480      	push	{r7}
  4023b6:	b083      	sub	sp, #12
  4023b8:	af00      	add	r7, sp, #0
  4023ba:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4023bc:	687b      	ldr	r3, [r7, #4]
  4023be:	2b01      	cmp	r3, #1
  4023c0:	d105      	bne.n	4023ce <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4023c2:	4907      	ldr	r1, [pc, #28]	; (4023e0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4023c4:	4b06      	ldr	r3, [pc, #24]	; (4023e0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4023c6:	689a      	ldr	r2, [r3, #8]
  4023c8:	4b06      	ldr	r3, [pc, #24]	; (4023e4 <pmc_switch_sclk_to_32kxtal+0x30>)
  4023ca:	4313      	orrs	r3, r2
  4023cc:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4023ce:	4b04      	ldr	r3, [pc, #16]	; (4023e0 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4023d0:	4a05      	ldr	r2, [pc, #20]	; (4023e8 <pmc_switch_sclk_to_32kxtal+0x34>)
  4023d2:	601a      	str	r2, [r3, #0]
}
  4023d4:	bf00      	nop
  4023d6:	370c      	adds	r7, #12
  4023d8:	46bd      	mov	sp, r7
  4023da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023de:	4770      	bx	lr
  4023e0:	400e1810 	.word	0x400e1810
  4023e4:	a5100000 	.word	0xa5100000
  4023e8:	a5000008 	.word	0xa5000008

004023ec <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4023ec:	b480      	push	{r7}
  4023ee:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4023f0:	4b09      	ldr	r3, [pc, #36]	; (402418 <pmc_osc_is_ready_32kxtal+0x2c>)
  4023f2:	695b      	ldr	r3, [r3, #20]
  4023f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4023f8:	2b00      	cmp	r3, #0
  4023fa:	d007      	beq.n	40240c <pmc_osc_is_ready_32kxtal+0x20>
  4023fc:	4b07      	ldr	r3, [pc, #28]	; (40241c <pmc_osc_is_ready_32kxtal+0x30>)
  4023fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402400:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402404:	2b00      	cmp	r3, #0
  402406:	d001      	beq.n	40240c <pmc_osc_is_ready_32kxtal+0x20>
  402408:	2301      	movs	r3, #1
  40240a:	e000      	b.n	40240e <pmc_osc_is_ready_32kxtal+0x22>
  40240c:	2300      	movs	r3, #0
}
  40240e:	4618      	mov	r0, r3
  402410:	46bd      	mov	sp, r7
  402412:	f85d 7b04 	ldr.w	r7, [sp], #4
  402416:	4770      	bx	lr
  402418:	400e1810 	.word	0x400e1810
  40241c:	400e0600 	.word	0x400e0600

00402420 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  402420:	b480      	push	{r7}
  402422:	b083      	sub	sp, #12
  402424:	af00      	add	r7, sp, #0
  402426:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402428:	4915      	ldr	r1, [pc, #84]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  40242a:	4b15      	ldr	r3, [pc, #84]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  40242c:	6a1a      	ldr	r2, [r3, #32]
  40242e:	4b15      	ldr	r3, [pc, #84]	; (402484 <pmc_switch_mainck_to_fastrc+0x64>)
  402430:	4313      	orrs	r3, r2
  402432:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402434:	bf00      	nop
  402436:	4b12      	ldr	r3, [pc, #72]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  402438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40243e:	2b00      	cmp	r3, #0
  402440:	d0f9      	beq.n	402436 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402442:	490f      	ldr	r1, [pc, #60]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  402444:	4b0e      	ldr	r3, [pc, #56]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  402446:	6a1a      	ldr	r2, [r3, #32]
  402448:	4b0f      	ldr	r3, [pc, #60]	; (402488 <pmc_switch_mainck_to_fastrc+0x68>)
  40244a:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40244c:	687a      	ldr	r2, [r7, #4]
  40244e:	4313      	orrs	r3, r2
  402450:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402454:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402456:	bf00      	nop
  402458:	4b09      	ldr	r3, [pc, #36]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  40245a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402460:	2b00      	cmp	r3, #0
  402462:	d0f9      	beq.n	402458 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402464:	4906      	ldr	r1, [pc, #24]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  402466:	4b06      	ldr	r3, [pc, #24]	; (402480 <pmc_switch_mainck_to_fastrc+0x60>)
  402468:	6a1a      	ldr	r2, [r3, #32]
  40246a:	4b08      	ldr	r3, [pc, #32]	; (40248c <pmc_switch_mainck_to_fastrc+0x6c>)
  40246c:	4013      	ands	r3, r2
  40246e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402472:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  402474:	bf00      	nop
  402476:	370c      	adds	r7, #12
  402478:	46bd      	mov	sp, r7
  40247a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40247e:	4770      	bx	lr
  402480:	400e0600 	.word	0x400e0600
  402484:	00370008 	.word	0x00370008
  402488:	ffc8ff8f 	.word	0xffc8ff8f
  40248c:	fec8ffff 	.word	0xfec8ffff

00402490 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  402490:	b480      	push	{r7}
  402492:	b083      	sub	sp, #12
  402494:	af00      	add	r7, sp, #0
  402496:	6078      	str	r0, [r7, #4]
  402498:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40249a:	687b      	ldr	r3, [r7, #4]
  40249c:	2b00      	cmp	r3, #0
  40249e:	d008      	beq.n	4024b2 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4024a0:	4913      	ldr	r1, [pc, #76]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024a2:	4b13      	ldr	r3, [pc, #76]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024a4:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4024a6:	4a13      	ldr	r2, [pc, #76]	; (4024f4 <pmc_switch_mainck_to_xtal+0x64>)
  4024a8:	401a      	ands	r2, r3
  4024aa:	4b13      	ldr	r3, [pc, #76]	; (4024f8 <pmc_switch_mainck_to_xtal+0x68>)
  4024ac:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4024ae:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4024b0:	e018      	b.n	4024e4 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4024b2:	490f      	ldr	r1, [pc, #60]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024b4:	4b0e      	ldr	r3, [pc, #56]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024b6:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4024b8:	4b10      	ldr	r3, [pc, #64]	; (4024fc <pmc_switch_mainck_to_xtal+0x6c>)
  4024ba:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4024bc:	683a      	ldr	r2, [r7, #0]
  4024be:	0212      	lsls	r2, r2, #8
  4024c0:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4024c2:	431a      	orrs	r2, r3
  4024c4:	4b0e      	ldr	r3, [pc, #56]	; (402500 <pmc_switch_mainck_to_xtal+0x70>)
  4024c6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4024c8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4024ca:	bf00      	nop
  4024cc:	4b08      	ldr	r3, [pc, #32]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4024d0:	f003 0301 	and.w	r3, r3, #1
  4024d4:	2b00      	cmp	r3, #0
  4024d6:	d0f9      	beq.n	4024cc <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4024d8:	4905      	ldr	r1, [pc, #20]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024da:	4b05      	ldr	r3, [pc, #20]	; (4024f0 <pmc_switch_mainck_to_xtal+0x60>)
  4024dc:	6a1a      	ldr	r2, [r3, #32]
  4024de:	4b09      	ldr	r3, [pc, #36]	; (402504 <pmc_switch_mainck_to_xtal+0x74>)
  4024e0:	4313      	orrs	r3, r2
  4024e2:	620b      	str	r3, [r1, #32]
}
  4024e4:	bf00      	nop
  4024e6:	370c      	adds	r7, #12
  4024e8:	46bd      	mov	sp, r7
  4024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024ee:	4770      	bx	lr
  4024f0:	400e0600 	.word	0x400e0600
  4024f4:	fec8fffc 	.word	0xfec8fffc
  4024f8:	01370002 	.word	0x01370002
  4024fc:	ffc8fffc 	.word	0xffc8fffc
  402500:	00370001 	.word	0x00370001
  402504:	01370000 	.word	0x01370000

00402508 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  402508:	b480      	push	{r7}
  40250a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40250c:	4b04      	ldr	r3, [pc, #16]	; (402520 <pmc_osc_is_ready_mainck+0x18>)
  40250e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402514:	4618      	mov	r0, r3
  402516:	46bd      	mov	sp, r7
  402518:	f85d 7b04 	ldr.w	r7, [sp], #4
  40251c:	4770      	bx	lr
  40251e:	bf00      	nop
  402520:	400e0600 	.word	0x400e0600

00402524 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  402524:	b480      	push	{r7}
  402526:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402528:	4b04      	ldr	r3, [pc, #16]	; (40253c <pmc_disable_pllack+0x18>)
  40252a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40252e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402530:	bf00      	nop
  402532:	46bd      	mov	sp, r7
  402534:	f85d 7b04 	ldr.w	r7, [sp], #4
  402538:	4770      	bx	lr
  40253a:	bf00      	nop
  40253c:	400e0600 	.word	0x400e0600

00402540 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402540:	b480      	push	{r7}
  402542:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402544:	4b04      	ldr	r3, [pc, #16]	; (402558 <pmc_is_locked_pllack+0x18>)
  402546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402548:	f003 0302 	and.w	r3, r3, #2
}
  40254c:	4618      	mov	r0, r3
  40254e:	46bd      	mov	sp, r7
  402550:	f85d 7b04 	ldr.w	r7, [sp], #4
  402554:	4770      	bx	lr
  402556:	bf00      	nop
  402558:	400e0600 	.word	0x400e0600

0040255c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  40255c:	b480      	push	{r7}
  40255e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  402560:	4b04      	ldr	r3, [pc, #16]	; (402574 <pmc_is_locked_upll+0x18>)
  402562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402564:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  402568:	4618      	mov	r0, r3
  40256a:	46bd      	mov	sp, r7
  40256c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402570:	4770      	bx	lr
  402572:	bf00      	nop
  402574:	400e0600 	.word	0x400e0600

00402578 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  402578:	b480      	push	{r7}
  40257a:	b083      	sub	sp, #12
  40257c:	af00      	add	r7, sp, #0
  40257e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  402580:	687b      	ldr	r3, [r7, #4]
  402582:	2b3f      	cmp	r3, #63	; 0x3f
  402584:	d901      	bls.n	40258a <pmc_enable_periph_clk+0x12>
		return 1;
  402586:	2301      	movs	r3, #1
  402588:	e02f      	b.n	4025ea <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40258a:	687b      	ldr	r3, [r7, #4]
  40258c:	2b1f      	cmp	r3, #31
  40258e:	d813      	bhi.n	4025b8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402590:	4b19      	ldr	r3, [pc, #100]	; (4025f8 <pmc_enable_periph_clk+0x80>)
  402592:	699a      	ldr	r2, [r3, #24]
  402594:	2101      	movs	r1, #1
  402596:	687b      	ldr	r3, [r7, #4]
  402598:	fa01 f303 	lsl.w	r3, r1, r3
  40259c:	401a      	ands	r2, r3
  40259e:	2101      	movs	r1, #1
  4025a0:	687b      	ldr	r3, [r7, #4]
  4025a2:	fa01 f303 	lsl.w	r3, r1, r3
  4025a6:	429a      	cmp	r2, r3
  4025a8:	d01e      	beq.n	4025e8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4025aa:	4a13      	ldr	r2, [pc, #76]	; (4025f8 <pmc_enable_periph_clk+0x80>)
  4025ac:	2101      	movs	r1, #1
  4025ae:	687b      	ldr	r3, [r7, #4]
  4025b0:	fa01 f303 	lsl.w	r3, r1, r3
  4025b4:	6113      	str	r3, [r2, #16]
  4025b6:	e017      	b.n	4025e8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4025b8:	687b      	ldr	r3, [r7, #4]
  4025ba:	3b20      	subs	r3, #32
  4025bc:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4025be:	4b0e      	ldr	r3, [pc, #56]	; (4025f8 <pmc_enable_periph_clk+0x80>)
  4025c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4025c4:	2101      	movs	r1, #1
  4025c6:	687b      	ldr	r3, [r7, #4]
  4025c8:	fa01 f303 	lsl.w	r3, r1, r3
  4025cc:	401a      	ands	r2, r3
  4025ce:	2101      	movs	r1, #1
  4025d0:	687b      	ldr	r3, [r7, #4]
  4025d2:	fa01 f303 	lsl.w	r3, r1, r3
  4025d6:	429a      	cmp	r2, r3
  4025d8:	d006      	beq.n	4025e8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4025da:	4a07      	ldr	r2, [pc, #28]	; (4025f8 <pmc_enable_periph_clk+0x80>)
  4025dc:	2101      	movs	r1, #1
  4025de:	687b      	ldr	r3, [r7, #4]
  4025e0:	fa01 f303 	lsl.w	r3, r1, r3
  4025e4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4025e8:	2300      	movs	r3, #0
}
  4025ea:	4618      	mov	r0, r3
  4025ec:	370c      	adds	r7, #12
  4025ee:	46bd      	mov	sp, r7
  4025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025f4:	4770      	bx	lr
  4025f6:	bf00      	nop
  4025f8:	400e0600 	.word	0x400e0600

004025fc <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4025fc:	b480      	push	{r7}
  4025fe:	b083      	sub	sp, #12
  402600:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402602:	f3ef 8310 	mrs	r3, PRIMASK
  402606:	607b      	str	r3, [r7, #4]
  return(result);
  402608:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40260a:	2b00      	cmp	r3, #0
  40260c:	bf0c      	ite	eq
  40260e:	2301      	moveq	r3, #1
  402610:	2300      	movne	r3, #0
  402612:	b2db      	uxtb	r3, r3
  402614:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402616:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402618:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40261c:	4b04      	ldr	r3, [pc, #16]	; (402630 <cpu_irq_save+0x34>)
  40261e:	2200      	movs	r2, #0
  402620:	701a      	strb	r2, [r3, #0]
	return flags;
  402622:	683b      	ldr	r3, [r7, #0]
}
  402624:	4618      	mov	r0, r3
  402626:	370c      	adds	r7, #12
  402628:	46bd      	mov	sp, r7
  40262a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40262e:	4770      	bx	lr
  402630:	20400018 	.word	0x20400018

00402634 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  402634:	b480      	push	{r7}
  402636:	b083      	sub	sp, #12
  402638:	af00      	add	r7, sp, #0
  40263a:	6078      	str	r0, [r7, #4]
	return (flags);
  40263c:	687b      	ldr	r3, [r7, #4]
  40263e:	2b00      	cmp	r3, #0
  402640:	bf14      	ite	ne
  402642:	2301      	movne	r3, #1
  402644:	2300      	moveq	r3, #0
  402646:	b2db      	uxtb	r3, r3
}
  402648:	4618      	mov	r0, r3
  40264a:	370c      	adds	r7, #12
  40264c:	46bd      	mov	sp, r7
  40264e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402652:	4770      	bx	lr

00402654 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  402654:	b580      	push	{r7, lr}
  402656:	b082      	sub	sp, #8
  402658:	af00      	add	r7, sp, #0
  40265a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  40265c:	6878      	ldr	r0, [r7, #4]
  40265e:	4b07      	ldr	r3, [pc, #28]	; (40267c <cpu_irq_restore+0x28>)
  402660:	4798      	blx	r3
  402662:	4603      	mov	r3, r0
  402664:	2b00      	cmp	r3, #0
  402666:	d005      	beq.n	402674 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  402668:	4b05      	ldr	r3, [pc, #20]	; (402680 <cpu_irq_restore+0x2c>)
  40266a:	2201      	movs	r2, #1
  40266c:	701a      	strb	r2, [r3, #0]
  40266e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402672:	b662      	cpsie	i
}
  402674:	bf00      	nop
  402676:	3708      	adds	r7, #8
  402678:	46bd      	mov	sp, r7
  40267a:	bd80      	pop	{r7, pc}
  40267c:	00402635 	.word	0x00402635
  402680:	20400018 	.word	0x20400018

00402684 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402684:	b580      	push	{r7, lr}
  402686:	b084      	sub	sp, #16
  402688:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40268a:	4b1e      	ldr	r3, [pc, #120]	; (402704 <Reset_Handler+0x80>)
  40268c:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  40268e:	4b1e      	ldr	r3, [pc, #120]	; (402708 <Reset_Handler+0x84>)
  402690:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  402692:	68fa      	ldr	r2, [r7, #12]
  402694:	68bb      	ldr	r3, [r7, #8]
  402696:	429a      	cmp	r2, r3
  402698:	d00c      	beq.n	4026b4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40269a:	e007      	b.n	4026ac <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40269c:	68bb      	ldr	r3, [r7, #8]
  40269e:	1d1a      	adds	r2, r3, #4
  4026a0:	60ba      	str	r2, [r7, #8]
  4026a2:	68fa      	ldr	r2, [r7, #12]
  4026a4:	1d11      	adds	r1, r2, #4
  4026a6:	60f9      	str	r1, [r7, #12]
  4026a8:	6812      	ldr	r2, [r2, #0]
  4026aa:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  4026ac:	68bb      	ldr	r3, [r7, #8]
  4026ae:	4a17      	ldr	r2, [pc, #92]	; (40270c <Reset_Handler+0x88>)
  4026b0:	4293      	cmp	r3, r2
  4026b2:	d3f3      	bcc.n	40269c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4026b4:	4b16      	ldr	r3, [pc, #88]	; (402710 <Reset_Handler+0x8c>)
  4026b6:	60bb      	str	r3, [r7, #8]
  4026b8:	e004      	b.n	4026c4 <Reset_Handler+0x40>
                *pDest++ = 0;
  4026ba:	68bb      	ldr	r3, [r7, #8]
  4026bc:	1d1a      	adds	r2, r3, #4
  4026be:	60ba      	str	r2, [r7, #8]
  4026c0:	2200      	movs	r2, #0
  4026c2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4026c4:	68bb      	ldr	r3, [r7, #8]
  4026c6:	4a13      	ldr	r2, [pc, #76]	; (402714 <Reset_Handler+0x90>)
  4026c8:	4293      	cmp	r3, r2
  4026ca:	d3f6      	bcc.n	4026ba <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4026cc:	4b12      	ldr	r3, [pc, #72]	; (402718 <Reset_Handler+0x94>)
  4026ce:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4026d0:	4a12      	ldr	r2, [pc, #72]	; (40271c <Reset_Handler+0x98>)
  4026d2:	68fb      	ldr	r3, [r7, #12]
  4026d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4026d8:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4026da:	4b11      	ldr	r3, [pc, #68]	; (402720 <Reset_Handler+0x9c>)
  4026dc:	4798      	blx	r3
  4026de:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4026e0:	4a10      	ldr	r2, [pc, #64]	; (402724 <Reset_Handler+0xa0>)
  4026e2:	4b10      	ldr	r3, [pc, #64]	; (402724 <Reset_Handler+0xa0>)
  4026e4:	681b      	ldr	r3, [r3, #0]
  4026e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4026ea:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4026ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4026f0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4026f4:	6878      	ldr	r0, [r7, #4]
  4026f6:	4b0c      	ldr	r3, [pc, #48]	; (402728 <Reset_Handler+0xa4>)
  4026f8:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4026fa:	4b0c      	ldr	r3, [pc, #48]	; (40272c <Reset_Handler+0xa8>)
  4026fc:	4798      	blx	r3

        /* Branch to main function */
        main();
  4026fe:	4b0c      	ldr	r3, [pc, #48]	; (402730 <Reset_Handler+0xac>)
  402700:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  402702:	e7fe      	b.n	402702 <Reset_Handler+0x7e>
  402704:	0040419c 	.word	0x0040419c
  402708:	20400000 	.word	0x20400000
  40270c:	2040045c 	.word	0x2040045c
  402710:	2040045c 	.word	0x2040045c
  402714:	20400724 	.word	0x20400724
  402718:	00400000 	.word	0x00400000
  40271c:	e000ed00 	.word	0xe000ed00
  402720:	004025fd 	.word	0x004025fd
  402724:	e000ed88 	.word	0xe000ed88
  402728:	00402655 	.word	0x00402655
  40272c:	00403285 	.word	0x00403285
  402730:	00402e2d 	.word	0x00402e2d

00402734 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402734:	b480      	push	{r7}
  402736:	af00      	add	r7, sp, #0
        while (1) {
  402738:	e7fe      	b.n	402738 <Dummy_Handler+0x4>
	...

0040273c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  40273c:	b480      	push	{r7}
  40273e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402740:	4b52      	ldr	r3, [pc, #328]	; (40288c <SystemCoreClockUpdate+0x150>)
  402742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402744:	f003 0303 	and.w	r3, r3, #3
  402748:	2b01      	cmp	r3, #1
  40274a:	d014      	beq.n	402776 <SystemCoreClockUpdate+0x3a>
  40274c:	2b01      	cmp	r3, #1
  40274e:	d302      	bcc.n	402756 <SystemCoreClockUpdate+0x1a>
  402750:	2b02      	cmp	r3, #2
  402752:	d038      	beq.n	4027c6 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  402754:	e07a      	b.n	40284c <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402756:	4b4e      	ldr	r3, [pc, #312]	; (402890 <SystemCoreClockUpdate+0x154>)
  402758:	695b      	ldr	r3, [r3, #20]
  40275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40275e:	2b00      	cmp	r3, #0
  402760:	d004      	beq.n	40276c <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402762:	4b4c      	ldr	r3, [pc, #304]	; (402894 <SystemCoreClockUpdate+0x158>)
  402764:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402768:	601a      	str	r2, [r3, #0]
    break;
  40276a:	e06f      	b.n	40284c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40276c:	4b49      	ldr	r3, [pc, #292]	; (402894 <SystemCoreClockUpdate+0x158>)
  40276e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402772:	601a      	str	r2, [r3, #0]
    break;
  402774:	e06a      	b.n	40284c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402776:	4b45      	ldr	r3, [pc, #276]	; (40288c <SystemCoreClockUpdate+0x150>)
  402778:	6a1b      	ldr	r3, [r3, #32]
  40277a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40277e:	2b00      	cmp	r3, #0
  402780:	d003      	beq.n	40278a <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402782:	4b44      	ldr	r3, [pc, #272]	; (402894 <SystemCoreClockUpdate+0x158>)
  402784:	4a44      	ldr	r2, [pc, #272]	; (402898 <SystemCoreClockUpdate+0x15c>)
  402786:	601a      	str	r2, [r3, #0]
    break;
  402788:	e060      	b.n	40284c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40278a:	4b42      	ldr	r3, [pc, #264]	; (402894 <SystemCoreClockUpdate+0x158>)
  40278c:	4a43      	ldr	r2, [pc, #268]	; (40289c <SystemCoreClockUpdate+0x160>)
  40278e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402790:	4b3e      	ldr	r3, [pc, #248]	; (40288c <SystemCoreClockUpdate+0x150>)
  402792:	6a1b      	ldr	r3, [r3, #32]
  402794:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402798:	2b10      	cmp	r3, #16
  40279a:	d004      	beq.n	4027a6 <SystemCoreClockUpdate+0x6a>
  40279c:	2b20      	cmp	r3, #32
  40279e:	d008      	beq.n	4027b2 <SystemCoreClockUpdate+0x76>
  4027a0:	2b00      	cmp	r3, #0
  4027a2:	d00e      	beq.n	4027c2 <SystemCoreClockUpdate+0x86>
          break;
  4027a4:	e00e      	b.n	4027c4 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  4027a6:	4b3b      	ldr	r3, [pc, #236]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027a8:	681b      	ldr	r3, [r3, #0]
  4027aa:	005b      	lsls	r3, r3, #1
  4027ac:	4a39      	ldr	r2, [pc, #228]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027ae:	6013      	str	r3, [r2, #0]
          break;
  4027b0:	e008      	b.n	4027c4 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  4027b2:	4b38      	ldr	r3, [pc, #224]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027b4:	681a      	ldr	r2, [r3, #0]
  4027b6:	4613      	mov	r3, r2
  4027b8:	005b      	lsls	r3, r3, #1
  4027ba:	4413      	add	r3, r2
  4027bc:	4a35      	ldr	r2, [pc, #212]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027be:	6013      	str	r3, [r2, #0]
          break;
  4027c0:	e000      	b.n	4027c4 <SystemCoreClockUpdate+0x88>
          break;
  4027c2:	bf00      	nop
    break;
  4027c4:	e042      	b.n	40284c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4027c6:	4b31      	ldr	r3, [pc, #196]	; (40288c <SystemCoreClockUpdate+0x150>)
  4027c8:	6a1b      	ldr	r3, [r3, #32]
  4027ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4027ce:	2b00      	cmp	r3, #0
  4027d0:	d003      	beq.n	4027da <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4027d2:	4b30      	ldr	r3, [pc, #192]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027d4:	4a30      	ldr	r2, [pc, #192]	; (402898 <SystemCoreClockUpdate+0x15c>)
  4027d6:	601a      	str	r2, [r3, #0]
  4027d8:	e01c      	b.n	402814 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4027da:	4b2e      	ldr	r3, [pc, #184]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027dc:	4a2f      	ldr	r2, [pc, #188]	; (40289c <SystemCoreClockUpdate+0x160>)
  4027de:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4027e0:	4b2a      	ldr	r3, [pc, #168]	; (40288c <SystemCoreClockUpdate+0x150>)
  4027e2:	6a1b      	ldr	r3, [r3, #32]
  4027e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4027e8:	2b10      	cmp	r3, #16
  4027ea:	d004      	beq.n	4027f6 <SystemCoreClockUpdate+0xba>
  4027ec:	2b20      	cmp	r3, #32
  4027ee:	d008      	beq.n	402802 <SystemCoreClockUpdate+0xc6>
  4027f0:	2b00      	cmp	r3, #0
  4027f2:	d00e      	beq.n	402812 <SystemCoreClockUpdate+0xd6>
          break;
  4027f4:	e00e      	b.n	402814 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  4027f6:	4b27      	ldr	r3, [pc, #156]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027f8:	681b      	ldr	r3, [r3, #0]
  4027fa:	005b      	lsls	r3, r3, #1
  4027fc:	4a25      	ldr	r2, [pc, #148]	; (402894 <SystemCoreClockUpdate+0x158>)
  4027fe:	6013      	str	r3, [r2, #0]
          break;
  402800:	e008      	b.n	402814 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  402802:	4b24      	ldr	r3, [pc, #144]	; (402894 <SystemCoreClockUpdate+0x158>)
  402804:	681a      	ldr	r2, [r3, #0]
  402806:	4613      	mov	r3, r2
  402808:	005b      	lsls	r3, r3, #1
  40280a:	4413      	add	r3, r2
  40280c:	4a21      	ldr	r2, [pc, #132]	; (402894 <SystemCoreClockUpdate+0x158>)
  40280e:	6013      	str	r3, [r2, #0]
          break;
  402810:	e000      	b.n	402814 <SystemCoreClockUpdate+0xd8>
          break;
  402812:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402814:	4b1d      	ldr	r3, [pc, #116]	; (40288c <SystemCoreClockUpdate+0x150>)
  402816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402818:	f003 0303 	and.w	r3, r3, #3
  40281c:	2b02      	cmp	r3, #2
  40281e:	d114      	bne.n	40284a <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402820:	4b1a      	ldr	r3, [pc, #104]	; (40288c <SystemCoreClockUpdate+0x150>)
  402822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402824:	0c1b      	lsrs	r3, r3, #16
  402826:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40282a:	3301      	adds	r3, #1
  40282c:	4a19      	ldr	r2, [pc, #100]	; (402894 <SystemCoreClockUpdate+0x158>)
  40282e:	6812      	ldr	r2, [r2, #0]
  402830:	fb02 f303 	mul.w	r3, r2, r3
  402834:	4a17      	ldr	r2, [pc, #92]	; (402894 <SystemCoreClockUpdate+0x158>)
  402836:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402838:	4b14      	ldr	r3, [pc, #80]	; (40288c <SystemCoreClockUpdate+0x150>)
  40283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40283c:	b2db      	uxtb	r3, r3
  40283e:	4a15      	ldr	r2, [pc, #84]	; (402894 <SystemCoreClockUpdate+0x158>)
  402840:	6812      	ldr	r2, [r2, #0]
  402842:	fbb2 f3f3 	udiv	r3, r2, r3
  402846:	4a13      	ldr	r2, [pc, #76]	; (402894 <SystemCoreClockUpdate+0x158>)
  402848:	6013      	str	r3, [r2, #0]
    break;
  40284a:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40284c:	4b0f      	ldr	r3, [pc, #60]	; (40288c <SystemCoreClockUpdate+0x150>)
  40284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402850:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402854:	2b70      	cmp	r3, #112	; 0x70
  402856:	d108      	bne.n	40286a <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  402858:	4b0e      	ldr	r3, [pc, #56]	; (402894 <SystemCoreClockUpdate+0x158>)
  40285a:	681b      	ldr	r3, [r3, #0]
  40285c:	4a10      	ldr	r2, [pc, #64]	; (4028a0 <SystemCoreClockUpdate+0x164>)
  40285e:	fba2 2303 	umull	r2, r3, r2, r3
  402862:	085b      	lsrs	r3, r3, #1
  402864:	4a0b      	ldr	r2, [pc, #44]	; (402894 <SystemCoreClockUpdate+0x158>)
  402866:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  402868:	e00a      	b.n	402880 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40286a:	4b08      	ldr	r3, [pc, #32]	; (40288c <SystemCoreClockUpdate+0x150>)
  40286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40286e:	091b      	lsrs	r3, r3, #4
  402870:	f003 0307 	and.w	r3, r3, #7
  402874:	4a07      	ldr	r2, [pc, #28]	; (402894 <SystemCoreClockUpdate+0x158>)
  402876:	6812      	ldr	r2, [r2, #0]
  402878:	fa22 f303 	lsr.w	r3, r2, r3
  40287c:	4a05      	ldr	r2, [pc, #20]	; (402894 <SystemCoreClockUpdate+0x158>)
  40287e:	6013      	str	r3, [r2, #0]
}
  402880:	bf00      	nop
  402882:	46bd      	mov	sp, r7
  402884:	f85d 7b04 	ldr.w	r7, [sp], #4
  402888:	4770      	bx	lr
  40288a:	bf00      	nop
  40288c:	400e0600 	.word	0x400e0600
  402890:	400e1810 	.word	0x400e1810
  402894:	2040001c 	.word	0x2040001c
  402898:	00b71b00 	.word	0x00b71b00
  40289c:	003d0900 	.word	0x003d0900
  4028a0:	aaaaaaab 	.word	0xaaaaaaab

004028a4 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  4028a4:	b480      	push	{r7}
  4028a6:	b083      	sub	sp, #12
  4028a8:	af00      	add	r7, sp, #0
  4028aa:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4028ac:	687b      	ldr	r3, [r7, #4]
  4028ae:	4a1d      	ldr	r2, [pc, #116]	; (402924 <system_init_flash+0x80>)
  4028b0:	4293      	cmp	r3, r2
  4028b2:	d804      	bhi.n	4028be <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4028b4:	4b1c      	ldr	r3, [pc, #112]	; (402928 <system_init_flash+0x84>)
  4028b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4028ba:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4028bc:	e02b      	b.n	402916 <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  4028be:	687b      	ldr	r3, [r7, #4]
  4028c0:	4a1a      	ldr	r2, [pc, #104]	; (40292c <system_init_flash+0x88>)
  4028c2:	4293      	cmp	r3, r2
  4028c4:	d803      	bhi.n	4028ce <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4028c6:	4b18      	ldr	r3, [pc, #96]	; (402928 <system_init_flash+0x84>)
  4028c8:	4a19      	ldr	r2, [pc, #100]	; (402930 <system_init_flash+0x8c>)
  4028ca:	601a      	str	r2, [r3, #0]
}
  4028cc:	e023      	b.n	402916 <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  4028ce:	687b      	ldr	r3, [r7, #4]
  4028d0:	4a18      	ldr	r2, [pc, #96]	; (402934 <system_init_flash+0x90>)
  4028d2:	4293      	cmp	r3, r2
  4028d4:	d803      	bhi.n	4028de <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4028d6:	4b14      	ldr	r3, [pc, #80]	; (402928 <system_init_flash+0x84>)
  4028d8:	4a17      	ldr	r2, [pc, #92]	; (402938 <system_init_flash+0x94>)
  4028da:	601a      	str	r2, [r3, #0]
}
  4028dc:	e01b      	b.n	402916 <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4028de:	687b      	ldr	r3, [r7, #4]
  4028e0:	4a16      	ldr	r2, [pc, #88]	; (40293c <system_init_flash+0x98>)
  4028e2:	4293      	cmp	r3, r2
  4028e4:	d803      	bhi.n	4028ee <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4028e6:	4b10      	ldr	r3, [pc, #64]	; (402928 <system_init_flash+0x84>)
  4028e8:	4a15      	ldr	r2, [pc, #84]	; (402940 <system_init_flash+0x9c>)
  4028ea:	601a      	str	r2, [r3, #0]
}
  4028ec:	e013      	b.n	402916 <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4028ee:	687b      	ldr	r3, [r7, #4]
  4028f0:	4a14      	ldr	r2, [pc, #80]	; (402944 <system_init_flash+0xa0>)
  4028f2:	4293      	cmp	r3, r2
  4028f4:	d804      	bhi.n	402900 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4028f6:	4b0c      	ldr	r3, [pc, #48]	; (402928 <system_init_flash+0x84>)
  4028f8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4028fc:	601a      	str	r2, [r3, #0]
}
  4028fe:	e00a      	b.n	402916 <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  402900:	687b      	ldr	r3, [r7, #4]
  402902:	4a11      	ldr	r2, [pc, #68]	; (402948 <system_init_flash+0xa4>)
  402904:	4293      	cmp	r3, r2
  402906:	d803      	bhi.n	402910 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402908:	4b07      	ldr	r3, [pc, #28]	; (402928 <system_init_flash+0x84>)
  40290a:	4a10      	ldr	r2, [pc, #64]	; (40294c <system_init_flash+0xa8>)
  40290c:	601a      	str	r2, [r3, #0]
}
  40290e:	e002      	b.n	402916 <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  402910:	4b05      	ldr	r3, [pc, #20]	; (402928 <system_init_flash+0x84>)
  402912:	4a0f      	ldr	r2, [pc, #60]	; (402950 <system_init_flash+0xac>)
  402914:	601a      	str	r2, [r3, #0]
}
  402916:	bf00      	nop
  402918:	370c      	adds	r7, #12
  40291a:	46bd      	mov	sp, r7
  40291c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402920:	4770      	bx	lr
  402922:	bf00      	nop
  402924:	015ef3bf 	.word	0x015ef3bf
  402928:	400e0c00 	.word	0x400e0c00
  40292c:	02bde77f 	.word	0x02bde77f
  402930:	04000100 	.word	0x04000100
  402934:	041cdb3f 	.word	0x041cdb3f
  402938:	04000200 	.word	0x04000200
  40293c:	057bceff 	.word	0x057bceff
  402940:	04000300 	.word	0x04000300
  402944:	06dac2bf 	.word	0x06dac2bf
  402948:	0839b67f 	.word	0x0839b67f
  40294c:	04000500 	.word	0x04000500
  402950:	04000600 	.word	0x04000600

00402954 <NVIC_EnableIRQ>:
{
  402954:	b480      	push	{r7}
  402956:	b083      	sub	sp, #12
  402958:	af00      	add	r7, sp, #0
  40295a:	4603      	mov	r3, r0
  40295c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40295e:	4909      	ldr	r1, [pc, #36]	; (402984 <NVIC_EnableIRQ+0x30>)
  402960:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402964:	095b      	lsrs	r3, r3, #5
  402966:	79fa      	ldrb	r2, [r7, #7]
  402968:	f002 021f 	and.w	r2, r2, #31
  40296c:	2001      	movs	r0, #1
  40296e:	fa00 f202 	lsl.w	r2, r0, r2
  402972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402976:	bf00      	nop
  402978:	370c      	adds	r7, #12
  40297a:	46bd      	mov	sp, r7
  40297c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402980:	4770      	bx	lr
  402982:	bf00      	nop
  402984:	e000e100 	.word	0xe000e100

00402988 <NVIC_DisableIRQ>:
{
  402988:	b480      	push	{r7}
  40298a:	b083      	sub	sp, #12
  40298c:	af00      	add	r7, sp, #0
  40298e:	4603      	mov	r3, r0
  402990:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402992:	4909      	ldr	r1, [pc, #36]	; (4029b8 <NVIC_DisableIRQ+0x30>)
  402994:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402998:	095b      	lsrs	r3, r3, #5
  40299a:	79fa      	ldrb	r2, [r7, #7]
  40299c:	f002 021f 	and.w	r2, r2, #31
  4029a0:	2001      	movs	r0, #1
  4029a2:	fa00 f202 	lsl.w	r2, r0, r2
  4029a6:	3320      	adds	r3, #32
  4029a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4029ac:	bf00      	nop
  4029ae:	370c      	adds	r7, #12
  4029b0:	46bd      	mov	sp, r7
  4029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029b6:	4770      	bx	lr
  4029b8:	e000e100 	.word	0xe000e100

004029bc <NVIC_ClearPendingIRQ>:
{
  4029bc:	b480      	push	{r7}
  4029be:	b083      	sub	sp, #12
  4029c0:	af00      	add	r7, sp, #0
  4029c2:	4603      	mov	r3, r0
  4029c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4029c6:	4909      	ldr	r1, [pc, #36]	; (4029ec <NVIC_ClearPendingIRQ+0x30>)
  4029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4029cc:	095b      	lsrs	r3, r3, #5
  4029ce:	79fa      	ldrb	r2, [r7, #7]
  4029d0:	f002 021f 	and.w	r2, r2, #31
  4029d4:	2001      	movs	r0, #1
  4029d6:	fa00 f202 	lsl.w	r2, r0, r2
  4029da:	3360      	adds	r3, #96	; 0x60
  4029dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4029e0:	bf00      	nop
  4029e2:	370c      	adds	r7, #12
  4029e4:	46bd      	mov	sp, r7
  4029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029ea:	4770      	bx	lr
  4029ec:	e000e100 	.word	0xe000e100

004029f0 <NVIC_SetPriority>:
{
  4029f0:	b480      	push	{r7}
  4029f2:	b083      	sub	sp, #12
  4029f4:	af00      	add	r7, sp, #0
  4029f6:	4603      	mov	r3, r0
  4029f8:	6039      	str	r1, [r7, #0]
  4029fa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  4029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402a00:	2b00      	cmp	r3, #0
  402a02:	da0b      	bge.n	402a1c <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402a04:	490d      	ldr	r1, [pc, #52]	; (402a3c <NVIC_SetPriority+0x4c>)
  402a06:	79fb      	ldrb	r3, [r7, #7]
  402a08:	f003 030f 	and.w	r3, r3, #15
  402a0c:	3b04      	subs	r3, #4
  402a0e:	683a      	ldr	r2, [r7, #0]
  402a10:	b2d2      	uxtb	r2, r2
  402a12:	0152      	lsls	r2, r2, #5
  402a14:	b2d2      	uxtb	r2, r2
  402a16:	440b      	add	r3, r1
  402a18:	761a      	strb	r2, [r3, #24]
}
  402a1a:	e009      	b.n	402a30 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402a1c:	4908      	ldr	r1, [pc, #32]	; (402a40 <NVIC_SetPriority+0x50>)
  402a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402a22:	683a      	ldr	r2, [r7, #0]
  402a24:	b2d2      	uxtb	r2, r2
  402a26:	0152      	lsls	r2, r2, #5
  402a28:	b2d2      	uxtb	r2, r2
  402a2a:	440b      	add	r3, r1
  402a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  402a30:	bf00      	nop
  402a32:	370c      	adds	r7, #12
  402a34:	46bd      	mov	sp, r7
  402a36:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a3a:	4770      	bx	lr
  402a3c:	e000ed00 	.word	0xe000ed00
  402a40:	e000e100 	.word	0xe000e100

00402a44 <RTT_init>:
volatile int star_position = 0;
volatile Bool waiting = false;
char password[] = "0000";

static void RTT_init(uint16_t pllPreScale, uint32_t IrqNPulses)
{
  402a44:	b580      	push	{r7, lr}
  402a46:	b084      	sub	sp, #16
  402a48:	af00      	add	r7, sp, #0
  402a4a:	4603      	mov	r3, r0
  402a4c:	6039      	str	r1, [r7, #0]
  402a4e:	80fb      	strh	r3, [r7, #6]
	uint32_t ul_previous_time;

	/* Configure RTT for a 1 second tick interrupt */
	rtt_sel_source(RTT, false);
  402a50:	2100      	movs	r1, #0
  402a52:	4818      	ldr	r0, [pc, #96]	; (402ab4 <RTT_init+0x70>)
  402a54:	4b18      	ldr	r3, [pc, #96]	; (402ab8 <RTT_init+0x74>)
  402a56:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  402a58:	88fb      	ldrh	r3, [r7, #6]
  402a5a:	4619      	mov	r1, r3
  402a5c:	4815      	ldr	r0, [pc, #84]	; (402ab4 <RTT_init+0x70>)
  402a5e:	4b17      	ldr	r3, [pc, #92]	; (402abc <RTT_init+0x78>)
  402a60:	4798      	blx	r3
	
	ul_previous_time = rtt_read_timer_value(RTT);
  402a62:	4814      	ldr	r0, [pc, #80]	; (402ab4 <RTT_init+0x70>)
  402a64:	4b16      	ldr	r3, [pc, #88]	; (402ac0 <RTT_init+0x7c>)
  402a66:	4798      	blx	r3
  402a68:	60f8      	str	r0, [r7, #12]
	while (ul_previous_time == rtt_read_timer_value(RTT));
  402a6a:	bf00      	nop
  402a6c:	4811      	ldr	r0, [pc, #68]	; (402ab4 <RTT_init+0x70>)
  402a6e:	4b14      	ldr	r3, [pc, #80]	; (402ac0 <RTT_init+0x7c>)
  402a70:	4798      	blx	r3
  402a72:	4602      	mov	r2, r0
  402a74:	68fb      	ldr	r3, [r7, #12]
  402a76:	429a      	cmp	r2, r3
  402a78:	d0f8      	beq.n	402a6c <RTT_init+0x28>
	
	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  402a7a:	683a      	ldr	r2, [r7, #0]
  402a7c:	68fb      	ldr	r3, [r7, #12]
  402a7e:	4413      	add	r3, r2
  402a80:	4619      	mov	r1, r3
  402a82:	480c      	ldr	r0, [pc, #48]	; (402ab4 <RTT_init+0x70>)
  402a84:	4b0f      	ldr	r3, [pc, #60]	; (402ac4 <RTT_init+0x80>)
  402a86:	4798      	blx	r3

	/* Enable RTT interrupt */
	NVIC_DisableIRQ(RTT_IRQn);
  402a88:	2003      	movs	r0, #3
  402a8a:	4b0f      	ldr	r3, [pc, #60]	; (402ac8 <RTT_init+0x84>)
  402a8c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
  402a8e:	2003      	movs	r0, #3
  402a90:	4b0e      	ldr	r3, [pc, #56]	; (402acc <RTT_init+0x88>)
  402a92:	4798      	blx	r3
	NVIC_SetPriority(RTT_IRQn, 4);
  402a94:	2104      	movs	r1, #4
  402a96:	2003      	movs	r0, #3
  402a98:	4b0d      	ldr	r3, [pc, #52]	; (402ad0 <RTT_init+0x8c>)
  402a9a:	4798      	blx	r3
	NVIC_EnableIRQ(RTT_IRQn);
  402a9c:	2003      	movs	r0, #3
  402a9e:	4b0d      	ldr	r3, [pc, #52]	; (402ad4 <RTT_init+0x90>)
  402aa0:	4798      	blx	r3
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN | RTT_MR_RTTINCIEN);
  402aa2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  402aa6:	4803      	ldr	r0, [pc, #12]	; (402ab4 <RTT_init+0x70>)
  402aa8:	4b0b      	ldr	r3, [pc, #44]	; (402ad8 <RTT_init+0x94>)
  402aaa:	4798      	blx	r3
}
  402aac:	bf00      	nop
  402aae:	3710      	adds	r7, #16
  402ab0:	46bd      	mov	sp, r7
  402ab2:	bd80      	pop	{r7, pc}
  402ab4:	400e1830 	.word	0x400e1830
  402ab8:	004001dd 	.word	0x004001dd
  402abc:	004001ad 	.word	0x004001ad
  402ac0:	004002ad 	.word	0x004002ad
  402ac4:	004002f5 	.word	0x004002f5
  402ac8:	00402989 	.word	0x00402989
  402acc:	004029bd 	.word	0x004029bd
  402ad0:	004029f1 	.word	0x004029f1
  402ad4:	00402955 	.word	0x00402955
  402ad8:	00400235 	.word	0x00400235

00402adc <RTT_Handler>:

void RTT_Handler(void)
{
  402adc:	b590      	push	{r4, r7, lr}
  402ade:	b083      	sub	sp, #12
  402ae0:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Get RTT status - ACK */
	ul_status = rtt_get_status(RTT);
  402ae2:	4814      	ldr	r0, [pc, #80]	; (402b34 <RTT_Handler+0x58>)
  402ae4:	4b14      	ldr	r3, [pc, #80]	; (402b38 <RTT_Handler+0x5c>)
  402ae6:	4798      	blx	r3
  402ae8:	6078      	str	r0, [r7, #4]
		//pin_toggle(LED_PIO, LED_IDX_MASK);    // BLINK Led
		
	}

	/* IRQ due to Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  402aea:	687b      	ldr	r3, [r7, #4]
  402aec:	f003 0301 	and.w	r3, r3, #1
  402af0:	2b00      	cmp	r3, #0
  402af2:	d01a      	beq.n	402b2a <RTT_Handler+0x4e>
		// pin_toggle(LED_PIO, LED_IDX_MASK);    // BLINK Led
		waiting = false;                  // flag RTT alarme
  402af4:	4b11      	ldr	r3, [pc, #68]	; (402b3c <RTT_Handler+0x60>)
  402af6:	2200      	movs	r2, #0
  402af8:	701a      	strb	r2, [r3, #0]
		gfx_mono_draw_string("             ", 0, 0, &sysfont);
  402afa:	4b11      	ldr	r3, [pc, #68]	; (402b40 <RTT_Handler+0x64>)
  402afc:	2200      	movs	r2, #0
  402afe:	2100      	movs	r1, #0
  402b00:	4810      	ldr	r0, [pc, #64]	; (402b44 <RTT_Handler+0x68>)
  402b02:	4c11      	ldr	r4, [pc, #68]	; (402b48 <RTT_Handler+0x6c>)
  402b04:	47a0      	blx	r4
		if(flag_aberto) {
  402b06:	4b11      	ldr	r3, [pc, #68]	; (402b4c <RTT_Handler+0x70>)
  402b08:	781b      	ldrb	r3, [r3, #0]
  402b0a:	b2db      	uxtb	r3, r3
  402b0c:	2b00      	cmp	r3, #0
  402b0e:	d006      	beq.n	402b1e <RTT_Handler+0x42>
			gfx_mono_draw_string("Cofre aberto", 0, 0, &sysfont);
  402b10:	4b0b      	ldr	r3, [pc, #44]	; (402b40 <RTT_Handler+0x64>)
  402b12:	2200      	movs	r2, #0
  402b14:	2100      	movs	r1, #0
  402b16:	480e      	ldr	r0, [pc, #56]	; (402b50 <RTT_Handler+0x74>)
  402b18:	4c0b      	ldr	r4, [pc, #44]	; (402b48 <RTT_Handler+0x6c>)
  402b1a:	47a0      	blx	r4
			} else {
			gfx_mono_draw_string("Cofre fechado", 0, 0, &sysfont);
		}
	}
}
  402b1c:	e005      	b.n	402b2a <RTT_Handler+0x4e>
			gfx_mono_draw_string("Cofre fechado", 0, 0, &sysfont);
  402b1e:	4b08      	ldr	r3, [pc, #32]	; (402b40 <RTT_Handler+0x64>)
  402b20:	2200      	movs	r2, #0
  402b22:	2100      	movs	r1, #0
  402b24:	480b      	ldr	r0, [pc, #44]	; (402b54 <RTT_Handler+0x78>)
  402b26:	4c08      	ldr	r4, [pc, #32]	; (402b48 <RTT_Handler+0x6c>)
  402b28:	47a0      	blx	r4
}
  402b2a:	bf00      	nop
  402b2c:	370c      	adds	r7, #12
  402b2e:	46bd      	mov	sp, r7
  402b30:	bd90      	pop	{r4, r7, pc}
  402b32:	bf00      	nop
  402b34:	400e1830 	.word	0x400e1830
  402b38:	004002db 	.word	0x004002db
  402b3c:	204006fc 	.word	0x204006fc
  402b40:	2040000c 	.word	0x2040000c
  402b44:	00404124 	.word	0x00404124
  402b48:	004009f1 	.word	0x004009f1
  402b4c:	204006f4 	.word	0x204006f4
  402b50:	00404134 	.word	0x00404134
  402b54:	00404144 	.word	0x00404144

00402b58 <but1_callback>:

void but1_callback(void) {
  402b58:	b598      	push	{r3, r4, r7, lr}
  402b5a:	af00      	add	r7, sp, #0
	if(!waiting && !flag_aberto) {
  402b5c:	4b1f      	ldr	r3, [pc, #124]	; (402bdc <but1_callback+0x84>)
  402b5e:	781b      	ldrb	r3, [r3, #0]
  402b60:	b2db      	uxtb	r3, r3
  402b62:	2b00      	cmp	r3, #0
  402b64:	d11b      	bne.n	402b9e <but1_callback+0x46>
  402b66:	4b1e      	ldr	r3, [pc, #120]	; (402be0 <but1_callback+0x88>)
  402b68:	781b      	ldrb	r3, [r3, #0]
  402b6a:	b2db      	uxtb	r3, r3
  402b6c:	2b00      	cmp	r3, #0
  402b6e:	d116      	bne.n	402b9e <but1_callback+0x46>
		password[star_position] = '1';
  402b70:	4b1c      	ldr	r3, [pc, #112]	; (402be4 <but1_callback+0x8c>)
  402b72:	681b      	ldr	r3, [r3, #0]
  402b74:	4a1c      	ldr	r2, [pc, #112]	; (402be8 <but1_callback+0x90>)
  402b76:	2131      	movs	r1, #49	; 0x31
  402b78:	54d1      	strb	r1, [r2, r3]
		gfx_mono_draw_string("*", star_position*5, 16, &sysfont);
  402b7a:	4b1a      	ldr	r3, [pc, #104]	; (402be4 <but1_callback+0x8c>)
  402b7c:	681b      	ldr	r3, [r3, #0]
  402b7e:	b2db      	uxtb	r3, r3
  402b80:	461a      	mov	r2, r3
  402b82:	0092      	lsls	r2, r2, #2
  402b84:	4413      	add	r3, r2
  402b86:	b2d9      	uxtb	r1, r3
  402b88:	4b18      	ldr	r3, [pc, #96]	; (402bec <but1_callback+0x94>)
  402b8a:	2210      	movs	r2, #16
  402b8c:	4818      	ldr	r0, [pc, #96]	; (402bf0 <but1_callback+0x98>)
  402b8e:	4c19      	ldr	r4, [pc, #100]	; (402bf4 <but1_callback+0x9c>)
  402b90:	47a0      	blx	r4
		star_position += 1;
  402b92:	4b14      	ldr	r3, [pc, #80]	; (402be4 <but1_callback+0x8c>)
  402b94:	681b      	ldr	r3, [r3, #0]
  402b96:	3301      	adds	r3, #1
  402b98:	4a12      	ldr	r2, [pc, #72]	; (402be4 <but1_callback+0x8c>)
  402b9a:	6013      	str	r3, [r2, #0]
		pio_clear(LED_1_PIO, LED_1_IDX_MASK);
		pio_clear(LED_2_PIO, LED_2_IDX_MASK);
		pio_clear(LED_3_PIO, LED_3_IDX_MASK);
		flag_redraw = 1;
	}
}
  402b9c:	e01c      	b.n	402bd8 <but1_callback+0x80>
	} else if(!waiting && flag_aberto) {
  402b9e:	4b0f      	ldr	r3, [pc, #60]	; (402bdc <but1_callback+0x84>)
  402ba0:	781b      	ldrb	r3, [r3, #0]
  402ba2:	b2db      	uxtb	r3, r3
  402ba4:	2b00      	cmp	r3, #0
  402ba6:	d117      	bne.n	402bd8 <but1_callback+0x80>
  402ba8:	4b0d      	ldr	r3, [pc, #52]	; (402be0 <but1_callback+0x88>)
  402baa:	781b      	ldrb	r3, [r3, #0]
  402bac:	b2db      	uxtb	r3, r3
  402bae:	2b00      	cmp	r3, #0
  402bb0:	d012      	beq.n	402bd8 <but1_callback+0x80>
		flag_aberto = 0;
  402bb2:	4b0b      	ldr	r3, [pc, #44]	; (402be0 <but1_callback+0x88>)
  402bb4:	2200      	movs	r2, #0
  402bb6:	701a      	strb	r2, [r3, #0]
		pio_clear(LED_1_PIO, LED_1_IDX_MASK);
  402bb8:	2101      	movs	r1, #1
  402bba:	480f      	ldr	r0, [pc, #60]	; (402bf8 <but1_callback+0xa0>)
  402bbc:	4b0f      	ldr	r3, [pc, #60]	; (402bfc <but1_callback+0xa4>)
  402bbe:	4798      	blx	r3
		pio_clear(LED_2_PIO, LED_2_IDX_MASK);
  402bc0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402bc4:	480e      	ldr	r0, [pc, #56]	; (402c00 <but1_callback+0xa8>)
  402bc6:	4b0d      	ldr	r3, [pc, #52]	; (402bfc <but1_callback+0xa4>)
  402bc8:	4798      	blx	r3
		pio_clear(LED_3_PIO, LED_3_IDX_MASK);
  402bca:	2104      	movs	r1, #4
  402bcc:	480d      	ldr	r0, [pc, #52]	; (402c04 <but1_callback+0xac>)
  402bce:	4b0b      	ldr	r3, [pc, #44]	; (402bfc <but1_callback+0xa4>)
  402bd0:	4798      	blx	r3
		flag_redraw = 1;
  402bd2:	4b0d      	ldr	r3, [pc, #52]	; (402c08 <but1_callback+0xb0>)
  402bd4:	2201      	movs	r2, #1
  402bd6:	701a      	strb	r2, [r3, #0]
}
  402bd8:	bf00      	nop
  402bda:	bd98      	pop	{r3, r4, r7, pc}
  402bdc:	204006fc 	.word	0x204006fc
  402be0:	204006f4 	.word	0x204006f4
  402be4:	204006f8 	.word	0x204006f8
  402be8:	20400024 	.word	0x20400024
  402bec:	2040000c 	.word	0x2040000c
  402bf0:	00404154 	.word	0x00404154
  402bf4:	004009f1 	.word	0x004009f1
  402bf8:	400e0e00 	.word	0x400e0e00
  402bfc:	00401d39 	.word	0x00401d39
  402c00:	400e1200 	.word	0x400e1200
  402c04:	400e1000 	.word	0x400e1000
  402c08:	20400020 	.word	0x20400020

00402c0c <but2_callback>:

void but2_callback(void) {
  402c0c:	b598      	push	{r3, r4, r7, lr}
  402c0e:	af00      	add	r7, sp, #0
	if(!waiting && !flag_aberto) {
  402c10:	4b10      	ldr	r3, [pc, #64]	; (402c54 <but2_callback+0x48>)
  402c12:	781b      	ldrb	r3, [r3, #0]
  402c14:	b2db      	uxtb	r3, r3
  402c16:	2b00      	cmp	r3, #0
  402c18:	d11a      	bne.n	402c50 <but2_callback+0x44>
  402c1a:	4b0f      	ldr	r3, [pc, #60]	; (402c58 <but2_callback+0x4c>)
  402c1c:	781b      	ldrb	r3, [r3, #0]
  402c1e:	b2db      	uxtb	r3, r3
  402c20:	2b00      	cmp	r3, #0
  402c22:	d115      	bne.n	402c50 <but2_callback+0x44>
		password[star_position] = '2';
  402c24:	4b0d      	ldr	r3, [pc, #52]	; (402c5c <but2_callback+0x50>)
  402c26:	681b      	ldr	r3, [r3, #0]
  402c28:	4a0d      	ldr	r2, [pc, #52]	; (402c60 <but2_callback+0x54>)
  402c2a:	2132      	movs	r1, #50	; 0x32
  402c2c:	54d1      	strb	r1, [r2, r3]
		gfx_mono_draw_string("*", star_position*5, 16, &sysfont);
  402c2e:	4b0b      	ldr	r3, [pc, #44]	; (402c5c <but2_callback+0x50>)
  402c30:	681b      	ldr	r3, [r3, #0]
  402c32:	b2db      	uxtb	r3, r3
  402c34:	461a      	mov	r2, r3
  402c36:	0092      	lsls	r2, r2, #2
  402c38:	4413      	add	r3, r2
  402c3a:	b2d9      	uxtb	r1, r3
  402c3c:	4b09      	ldr	r3, [pc, #36]	; (402c64 <but2_callback+0x58>)
  402c3e:	2210      	movs	r2, #16
  402c40:	4809      	ldr	r0, [pc, #36]	; (402c68 <but2_callback+0x5c>)
  402c42:	4c0a      	ldr	r4, [pc, #40]	; (402c6c <but2_callback+0x60>)
  402c44:	47a0      	blx	r4
		star_position += 1;
  402c46:	4b05      	ldr	r3, [pc, #20]	; (402c5c <but2_callback+0x50>)
  402c48:	681b      	ldr	r3, [r3, #0]
  402c4a:	3301      	adds	r3, #1
  402c4c:	4a03      	ldr	r2, [pc, #12]	; (402c5c <but2_callback+0x50>)
  402c4e:	6013      	str	r3, [r2, #0]
	}
}
  402c50:	bf00      	nop
  402c52:	bd98      	pop	{r3, r4, r7, pc}
  402c54:	204006fc 	.word	0x204006fc
  402c58:	204006f4 	.word	0x204006f4
  402c5c:	204006f8 	.word	0x204006f8
  402c60:	20400024 	.word	0x20400024
  402c64:	2040000c 	.word	0x2040000c
  402c68:	00404154 	.word	0x00404154
  402c6c:	004009f1 	.word	0x004009f1

00402c70 <but3_callback>:

void but3_callback(void) {
  402c70:	b598      	push	{r3, r4, r7, lr}
  402c72:	af00      	add	r7, sp, #0
	if(!waiting && !flag_aberto) {
  402c74:	4b10      	ldr	r3, [pc, #64]	; (402cb8 <but3_callback+0x48>)
  402c76:	781b      	ldrb	r3, [r3, #0]
  402c78:	b2db      	uxtb	r3, r3
  402c7a:	2b00      	cmp	r3, #0
  402c7c:	d11a      	bne.n	402cb4 <but3_callback+0x44>
  402c7e:	4b0f      	ldr	r3, [pc, #60]	; (402cbc <but3_callback+0x4c>)
  402c80:	781b      	ldrb	r3, [r3, #0]
  402c82:	b2db      	uxtb	r3, r3
  402c84:	2b00      	cmp	r3, #0
  402c86:	d115      	bne.n	402cb4 <but3_callback+0x44>
		password[star_position] = '3';
  402c88:	4b0d      	ldr	r3, [pc, #52]	; (402cc0 <but3_callback+0x50>)
  402c8a:	681b      	ldr	r3, [r3, #0]
  402c8c:	4a0d      	ldr	r2, [pc, #52]	; (402cc4 <but3_callback+0x54>)
  402c8e:	2133      	movs	r1, #51	; 0x33
  402c90:	54d1      	strb	r1, [r2, r3]
		gfx_mono_draw_string("*", star_position*5, 16, &sysfont);
  402c92:	4b0b      	ldr	r3, [pc, #44]	; (402cc0 <but3_callback+0x50>)
  402c94:	681b      	ldr	r3, [r3, #0]
  402c96:	b2db      	uxtb	r3, r3
  402c98:	461a      	mov	r2, r3
  402c9a:	0092      	lsls	r2, r2, #2
  402c9c:	4413      	add	r3, r2
  402c9e:	b2d9      	uxtb	r1, r3
  402ca0:	4b09      	ldr	r3, [pc, #36]	; (402cc8 <but3_callback+0x58>)
  402ca2:	2210      	movs	r2, #16
  402ca4:	4809      	ldr	r0, [pc, #36]	; (402ccc <but3_callback+0x5c>)
  402ca6:	4c0a      	ldr	r4, [pc, #40]	; (402cd0 <but3_callback+0x60>)
  402ca8:	47a0      	blx	r4
		star_position += 1;
  402caa:	4b05      	ldr	r3, [pc, #20]	; (402cc0 <but3_callback+0x50>)
  402cac:	681b      	ldr	r3, [r3, #0]
  402cae:	3301      	adds	r3, #1
  402cb0:	4a03      	ldr	r2, [pc, #12]	; (402cc0 <but3_callback+0x50>)
  402cb2:	6013      	str	r3, [r2, #0]
	}
}
  402cb4:	bf00      	nop
  402cb6:	bd98      	pop	{r3, r4, r7, pc}
  402cb8:	204006fc 	.word	0x204006fc
  402cbc:	204006f4 	.word	0x204006f4
  402cc0:	204006f8 	.word	0x204006f8
  402cc4:	20400024 	.word	0x20400024
  402cc8:	2040000c 	.word	0x2040000c
  402ccc:	00404154 	.word	0x00404154
  402cd0:	004009f1 	.word	0x004009f1

00402cd4 <io_init>:

void io_init(void) {
  402cd4:	b590      	push	{r4, r7, lr}
  402cd6:	b083      	sub	sp, #12
  402cd8:	af02      	add	r7, sp, #8
  pmc_enable_periph_clk(LED_1_PIO_ID);
  402cda:	200a      	movs	r0, #10
  402cdc:	4b45      	ldr	r3, [pc, #276]	; (402df4 <io_init+0x120>)
  402cde:	4798      	blx	r3
  pmc_enable_periph_clk(LED_2_PIO_ID);
  402ce0:	200c      	movs	r0, #12
  402ce2:	4b44      	ldr	r3, [pc, #272]	; (402df4 <io_init+0x120>)
  402ce4:	4798      	blx	r3
  pmc_enable_periph_clk(LED_3_PIO_ID);
  402ce6:	200b      	movs	r0, #11
  402ce8:	4b42      	ldr	r3, [pc, #264]	; (402df4 <io_init+0x120>)
  402cea:	4798      	blx	r3
  pmc_enable_periph_clk(BUT_1_PIO_ID);
  402cec:	2010      	movs	r0, #16
  402cee:	4b41      	ldr	r3, [pc, #260]	; (402df4 <io_init+0x120>)
  402cf0:	4798      	blx	r3
  pmc_enable_periph_clk(BUT_2_PIO_ID);
  402cf2:	200c      	movs	r0, #12
  402cf4:	4b3f      	ldr	r3, [pc, #252]	; (402df4 <io_init+0x120>)
  402cf6:	4798      	blx	r3
  pmc_enable_periph_clk(BUT_3_PIO_ID);
  402cf8:	200a      	movs	r0, #10
  402cfa:	4b3e      	ldr	r3, [pc, #248]	; (402df4 <io_init+0x120>)
  402cfc:	4798      	blx	r3

  pio_configure(LED_1_PIO, PIO_OUTPUT_0, LED_1_IDX_MASK, PIO_DEFAULT);
  402cfe:	2300      	movs	r3, #0
  402d00:	2201      	movs	r2, #1
  402d02:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402d06:	483c      	ldr	r0, [pc, #240]	; (402df8 <io_init+0x124>)
  402d08:	4c3c      	ldr	r4, [pc, #240]	; (402dfc <io_init+0x128>)
  402d0a:	47a0      	blx	r4
  pio_configure(LED_2_PIO, PIO_OUTPUT_0, LED_2_IDX_MASK, PIO_DEFAULT);
  402d0c:	2300      	movs	r3, #0
  402d0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402d12:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402d16:	483a      	ldr	r0, [pc, #232]	; (402e00 <io_init+0x12c>)
  402d18:	4c38      	ldr	r4, [pc, #224]	; (402dfc <io_init+0x128>)
  402d1a:	47a0      	blx	r4
  pio_configure(LED_3_PIO, PIO_OUTPUT_0, LED_3_IDX_MASK, PIO_DEFAULT);
  402d1c:	2300      	movs	r3, #0
  402d1e:	2204      	movs	r2, #4
  402d20:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402d24:	4837      	ldr	r0, [pc, #220]	; (402e04 <io_init+0x130>)
  402d26:	4c35      	ldr	r4, [pc, #212]	; (402dfc <io_init+0x128>)
  402d28:	47a0      	blx	r4

  pio_configure(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK, PIO_PULLUP| PIO_DEBOUNCE);
  402d2a:	2309      	movs	r3, #9
  402d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402d30:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402d34:	4834      	ldr	r0, [pc, #208]	; (402e08 <io_init+0x134>)
  402d36:	4c31      	ldr	r4, [pc, #196]	; (402dfc <io_init+0x128>)
  402d38:	47a0      	blx	r4
  pio_configure(BUT_2_PIO, PIO_INPUT, BUT_2_IDX_MASK, PIO_PULLUP| PIO_DEBOUNCE);
  402d3a:	2309      	movs	r3, #9
  402d3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402d40:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402d44:	482e      	ldr	r0, [pc, #184]	; (402e00 <io_init+0x12c>)
  402d46:	4c2d      	ldr	r4, [pc, #180]	; (402dfc <io_init+0x128>)
  402d48:	47a0      	blx	r4
  pio_configure(BUT_3_PIO, PIO_INPUT, BUT_3_IDX_MASK, PIO_PULLUP| PIO_DEBOUNCE);
  402d4a:	2309      	movs	r3, #9
  402d4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402d50:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402d54:	4828      	ldr	r0, [pc, #160]	; (402df8 <io_init+0x124>)
  402d56:	4c29      	ldr	r4, [pc, #164]	; (402dfc <io_init+0x128>)
  402d58:	47a0      	blx	r4

  pio_handler_set(BUT_1_PIO, BUT_1_PIO_ID, BUT_1_IDX_MASK, PIO_IT_RISE_EDGE,
  402d5a:	4b2c      	ldr	r3, [pc, #176]	; (402e0c <io_init+0x138>)
  402d5c:	9300      	str	r3, [sp, #0]
  402d5e:	2370      	movs	r3, #112	; 0x70
  402d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402d64:	2110      	movs	r1, #16
  402d66:	4828      	ldr	r0, [pc, #160]	; (402e08 <io_init+0x134>)
  402d68:	4c29      	ldr	r4, [pc, #164]	; (402e10 <io_init+0x13c>)
  402d6a:	47a0      	blx	r4
  but1_callback);
  pio_handler_set(BUT_2_PIO, BUT_2_PIO_ID, BUT_2_IDX_MASK, PIO_IT_RISE_EDGE,
  402d6c:	4b29      	ldr	r3, [pc, #164]	; (402e14 <io_init+0x140>)
  402d6e:	9300      	str	r3, [sp, #0]
  402d70:	2370      	movs	r3, #112	; 0x70
  402d72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  402d76:	210c      	movs	r1, #12
  402d78:	4821      	ldr	r0, [pc, #132]	; (402e00 <io_init+0x12c>)
  402d7a:	4c25      	ldr	r4, [pc, #148]	; (402e10 <io_init+0x13c>)
  402d7c:	47a0      	blx	r4
  but2_callback);
  pio_handler_set(BUT_3_PIO, BUT_3_PIO_ID, BUT_3_IDX_MASK, PIO_IT_RISE_EDGE,
  402d7e:	4b26      	ldr	r3, [pc, #152]	; (402e18 <io_init+0x144>)
  402d80:	9300      	str	r3, [sp, #0]
  402d82:	2370      	movs	r3, #112	; 0x70
  402d84:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402d88:	210a      	movs	r1, #10
  402d8a:	481b      	ldr	r0, [pc, #108]	; (402df8 <io_init+0x124>)
  402d8c:	4c20      	ldr	r4, [pc, #128]	; (402e10 <io_init+0x13c>)
  402d8e:	47a0      	blx	r4
  but3_callback);

  pio_enable_interrupt(BUT_1_PIO, BUT_1_IDX_MASK);
  402d90:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402d94:	481c      	ldr	r0, [pc, #112]	; (402e08 <io_init+0x134>)
  402d96:	4b21      	ldr	r3, [pc, #132]	; (402e1c <io_init+0x148>)
  402d98:	4798      	blx	r3
  pio_enable_interrupt(BUT_2_PIO, BUT_2_IDX_MASK);
  402d9a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402d9e:	4818      	ldr	r0, [pc, #96]	; (402e00 <io_init+0x12c>)
  402da0:	4b1e      	ldr	r3, [pc, #120]	; (402e1c <io_init+0x148>)
  402da2:	4798      	blx	r3
  pio_enable_interrupt(BUT_3_PIO, BUT_3_IDX_MASK);
  402da4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402da8:	4813      	ldr	r0, [pc, #76]	; (402df8 <io_init+0x124>)
  402daa:	4b1c      	ldr	r3, [pc, #112]	; (402e1c <io_init+0x148>)
  402dac:	4798      	blx	r3

  pio_get_interrupt_status(BUT_1_PIO);
  402dae:	4816      	ldr	r0, [pc, #88]	; (402e08 <io_init+0x134>)
  402db0:	4b1b      	ldr	r3, [pc, #108]	; (402e20 <io_init+0x14c>)
  402db2:	4798      	blx	r3
  pio_get_interrupt_status(BUT_2_PIO);
  402db4:	4812      	ldr	r0, [pc, #72]	; (402e00 <io_init+0x12c>)
  402db6:	4b1a      	ldr	r3, [pc, #104]	; (402e20 <io_init+0x14c>)
  402db8:	4798      	blx	r3
  pio_get_interrupt_status(BUT_3_PIO);
  402dba:	480f      	ldr	r0, [pc, #60]	; (402df8 <io_init+0x124>)
  402dbc:	4b18      	ldr	r3, [pc, #96]	; (402e20 <io_init+0x14c>)
  402dbe:	4798      	blx	r3

  NVIC_EnableIRQ(BUT_1_PIO_ID);
  402dc0:	2010      	movs	r0, #16
  402dc2:	4b18      	ldr	r3, [pc, #96]	; (402e24 <io_init+0x150>)
  402dc4:	4798      	blx	r3
  NVIC_SetPriority(BUT_1_PIO_ID, 4);
  402dc6:	2104      	movs	r1, #4
  402dc8:	2010      	movs	r0, #16
  402dca:	4b17      	ldr	r3, [pc, #92]	; (402e28 <io_init+0x154>)
  402dcc:	4798      	blx	r3

  NVIC_EnableIRQ(BUT_2_PIO_ID);
  402dce:	200c      	movs	r0, #12
  402dd0:	4b14      	ldr	r3, [pc, #80]	; (402e24 <io_init+0x150>)
  402dd2:	4798      	blx	r3
  NVIC_SetPriority(BUT_2_PIO_ID, 4);
  402dd4:	2104      	movs	r1, #4
  402dd6:	200c      	movs	r0, #12
  402dd8:	4b13      	ldr	r3, [pc, #76]	; (402e28 <io_init+0x154>)
  402dda:	4798      	blx	r3

  NVIC_EnableIRQ(BUT_3_PIO_ID);
  402ddc:	200a      	movs	r0, #10
  402dde:	4b11      	ldr	r3, [pc, #68]	; (402e24 <io_init+0x150>)
  402de0:	4798      	blx	r3
  NVIC_SetPriority(BUT_3_PIO_ID, 4);
  402de2:	2104      	movs	r1, #4
  402de4:	200a      	movs	r0, #10
  402de6:	4b10      	ldr	r3, [pc, #64]	; (402e28 <io_init+0x154>)
  402de8:	4798      	blx	r3
}
  402dea:	bf00      	nop
  402dec:	3704      	adds	r7, #4
  402dee:	46bd      	mov	sp, r7
  402df0:	bd90      	pop	{r4, r7, pc}
  402df2:	bf00      	nop
  402df4:	00402579 	.word	0x00402579
  402df8:	400e0e00 	.word	0x400e0e00
  402dfc:	00401f49 	.word	0x00401f49
  402e00:	400e1200 	.word	0x400e1200
  402e04:	400e1000 	.word	0x400e1000
  402e08:	400e1400 	.word	0x400e1400
  402e0c:	00402b59 	.word	0x00402b59
  402e10:	0040219d 	.word	0x0040219d
  402e14:	00402c0d 	.word	0x00402c0d
  402e18:	00402c71 	.word	0x00402c71
  402e1c:	00402081 	.word	0x00402081
  402e20:	004020b9 	.word	0x004020b9
  402e24:	00402955 	.word	0x00402955
  402e28:	004029f1 	.word	0x004029f1

00402e2c <main>:

int main(void) {
  402e2c:	b590      	push	{r4, r7, lr}
  402e2e:	b083      	sub	sp, #12
  402e30:	af00      	add	r7, sp, #0
  board_init();
  402e32:	4b39      	ldr	r3, [pc, #228]	; (402f18 <main+0xec>)
  402e34:	4798      	blx	r3
  sysclk_init();
  402e36:	4b39      	ldr	r3, [pc, #228]	; (402f1c <main+0xf0>)
  402e38:	4798      	blx	r3
  delay_init();
  WDT->WDT_MR = WDT_MR_WDDIS;
  402e3a:	4b39      	ldr	r3, [pc, #228]	; (402f20 <main+0xf4>)
  402e3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402e40:	605a      	str	r2, [r3, #4]
  io_init();
  402e42:	4b38      	ldr	r3, [pc, #224]	; (402f24 <main+0xf8>)
  402e44:	4798      	blx	r3
  gfx_mono_ssd1306_init();
  402e46:	4b38      	ldr	r3, [pc, #224]	; (402f28 <main+0xfc>)
  402e48:	4798      	blx	r3
  
  while (1) {
	if(!waiting) {
  402e4a:	4b38      	ldr	r3, [pc, #224]	; (402f2c <main+0x100>)
  402e4c:	781b      	ldrb	r3, [r3, #0]
  402e4e:	b2db      	uxtb	r3, r3
  402e50:	2b00      	cmp	r3, #0
  402e52:	d1fa      	bne.n	402e4a <main+0x1e>
		if(flag_redraw) {
  402e54:	4b36      	ldr	r3, [pc, #216]	; (402f30 <main+0x104>)
  402e56:	781b      	ldrb	r3, [r3, #0]
  402e58:	b2db      	uxtb	r3, r3
  402e5a:	2b00      	cmp	r3, #0
  402e5c:	d01a      	beq.n	402e94 <main+0x68>
			gfx_mono_draw_string("             ", 0, 0, &sysfont);
  402e5e:	4b35      	ldr	r3, [pc, #212]	; (402f34 <main+0x108>)
  402e60:	2200      	movs	r2, #0
  402e62:	2100      	movs	r1, #0
  402e64:	4834      	ldr	r0, [pc, #208]	; (402f38 <main+0x10c>)
  402e66:	4c35      	ldr	r4, [pc, #212]	; (402f3c <main+0x110>)
  402e68:	47a0      	blx	r4
			if(flag_aberto) {
  402e6a:	4b35      	ldr	r3, [pc, #212]	; (402f40 <main+0x114>)
  402e6c:	781b      	ldrb	r3, [r3, #0]
  402e6e:	b2db      	uxtb	r3, r3
  402e70:	2b00      	cmp	r3, #0
  402e72:	d006      	beq.n	402e82 <main+0x56>
				gfx_mono_draw_string("Cofre aberto", 0, 0, &sysfont);
  402e74:	4b2f      	ldr	r3, [pc, #188]	; (402f34 <main+0x108>)
  402e76:	2200      	movs	r2, #0
  402e78:	2100      	movs	r1, #0
  402e7a:	4832      	ldr	r0, [pc, #200]	; (402f44 <main+0x118>)
  402e7c:	4c2f      	ldr	r4, [pc, #188]	; (402f3c <main+0x110>)
  402e7e:	47a0      	blx	r4
  402e80:	e005      	b.n	402e8e <main+0x62>
				} else {
				gfx_mono_draw_string("Cofre fechado", 0, 0, &sysfont);
  402e82:	4b2c      	ldr	r3, [pc, #176]	; (402f34 <main+0x108>)
  402e84:	2200      	movs	r2, #0
  402e86:	2100      	movs	r1, #0
  402e88:	482f      	ldr	r0, [pc, #188]	; (402f48 <main+0x11c>)
  402e8a:	4c2c      	ldr	r4, [pc, #176]	; (402f3c <main+0x110>)
  402e8c:	47a0      	blx	r4
			}
			
			flag_redraw = 0;
  402e8e:	4b28      	ldr	r3, [pc, #160]	; (402f30 <main+0x104>)
  402e90:	2200      	movs	r2, #0
  402e92:	701a      	strb	r2, [r3, #0]
		}
		
		if(star_position > 3) {
  402e94:	4b2d      	ldr	r3, [pc, #180]	; (402f4c <main+0x120>)
  402e96:	681b      	ldr	r3, [r3, #0]
  402e98:	2b03      	cmp	r3, #3
  402e9a:	ddd6      	ble.n	402e4a <main+0x1e>
			if(strcmp(password, "1123") == 0) {
  402e9c:	492c      	ldr	r1, [pc, #176]	; (402f50 <main+0x124>)
  402e9e:	482d      	ldr	r0, [pc, #180]	; (402f54 <main+0x128>)
  402ea0:	4b2d      	ldr	r3, [pc, #180]	; (402f58 <main+0x12c>)
  402ea2:	4798      	blx	r3
  402ea4:	4603      	mov	r3, r0
  402ea6:	2b00      	cmp	r3, #0
  402ea8:	d113      	bne.n	402ed2 <main+0xa6>
				flag_aberto = 1;
  402eaa:	4b25      	ldr	r3, [pc, #148]	; (402f40 <main+0x114>)
  402eac:	2201      	movs	r2, #1
  402eae:	701a      	strb	r2, [r3, #0]
				pio_set(LED_1_PIO, LED_1_IDX_MASK);
  402eb0:	2101      	movs	r1, #1
  402eb2:	482a      	ldr	r0, [pc, #168]	; (402f5c <main+0x130>)
  402eb4:	4b2a      	ldr	r3, [pc, #168]	; (402f60 <main+0x134>)
  402eb6:	4798      	blx	r3
				pio_set(LED_2_PIO, LED_2_IDX_MASK);
  402eb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402ebc:	4829      	ldr	r0, [pc, #164]	; (402f64 <main+0x138>)
  402ebe:	4b28      	ldr	r3, [pc, #160]	; (402f60 <main+0x134>)
  402ec0:	4798      	blx	r3
				pio_set(LED_3_PIO, LED_3_IDX_MASK);
  402ec2:	2104      	movs	r1, #4
  402ec4:	4828      	ldr	r0, [pc, #160]	; (402f68 <main+0x13c>)
  402ec6:	4b26      	ldr	r3, [pc, #152]	; (402f60 <main+0x134>)
  402ec8:	4798      	blx	r3
				flag_redraw = 1;
  402eca:	4b19      	ldr	r3, [pc, #100]	; (402f30 <main+0x104>)
  402ecc:	2201      	movs	r2, #1
  402ece:	701a      	strb	r2, [r3, #0]
  402ed0:	e018      	b.n	402f04 <main+0xd8>
			} else {
				waiting = true;
  402ed2:	4b16      	ldr	r3, [pc, #88]	; (402f2c <main+0x100>)
  402ed4:	2201      	movs	r2, #1
  402ed6:	701a      	strb	r2, [r3, #0]
				gfx_mono_draw_string("             ", 0, 0, &sysfont);
  402ed8:	4b16      	ldr	r3, [pc, #88]	; (402f34 <main+0x108>)
  402eda:	2200      	movs	r2, #0
  402edc:	2100      	movs	r1, #0
  402ede:	4816      	ldr	r0, [pc, #88]	; (402f38 <main+0x10c>)
  402ee0:	4c16      	ldr	r4, [pc, #88]	; (402f3c <main+0x110>)
  402ee2:	47a0      	blx	r4
				gfx_mono_draw_string("Bloqueado", 0, 0, &sysfont);
  402ee4:	4b13      	ldr	r3, [pc, #76]	; (402f34 <main+0x108>)
  402ee6:	2200      	movs	r2, #0
  402ee8:	2100      	movs	r1, #0
  402eea:	4820      	ldr	r0, [pc, #128]	; (402f6c <main+0x140>)
  402eec:	4c13      	ldr	r4, [pc, #76]	; (402f3c <main+0x110>)
  402eee:	47a0      	blx	r4
				uint16_t pllPreScale = (int) (((float) 32768) / 4.0);
  402ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  402ef4:	80fb      	strh	r3, [r7, #6]
				uint32_t irqRTTvalue = 16;
  402ef6:	2310      	movs	r3, #16
  402ef8:	603b      	str	r3, [r7, #0]
				RTT_init(pllPreScale, irqRTTvalue);
  402efa:	88fb      	ldrh	r3, [r7, #6]
  402efc:	6839      	ldr	r1, [r7, #0]
  402efe:	4618      	mov	r0, r3
  402f00:	4b1b      	ldr	r3, [pc, #108]	; (402f70 <main+0x144>)
  402f02:	4798      	blx	r3
			}
			
			star_position = 0;
  402f04:	4b11      	ldr	r3, [pc, #68]	; (402f4c <main+0x120>)
  402f06:	2200      	movs	r2, #0
  402f08:	601a      	str	r2, [r3, #0]
			gfx_mono_draw_string("             ", 0, 16, &sysfont);
  402f0a:	4b0a      	ldr	r3, [pc, #40]	; (402f34 <main+0x108>)
  402f0c:	2210      	movs	r2, #16
  402f0e:	2100      	movs	r1, #0
  402f10:	4809      	ldr	r0, [pc, #36]	; (402f38 <main+0x10c>)
  402f12:	4c0a      	ldr	r4, [pc, #40]	; (402f3c <main+0x110>)
  402f14:	47a0      	blx	r4
	if(!waiting) {
  402f16:	e798      	b.n	402e4a <main+0x1e>
  402f18:	00401c6d 	.word	0x00401c6d
  402f1c:	004017a9 	.word	0x004017a9
  402f20:	400e1850 	.word	0x400e1850
  402f24:	00402cd5 	.word	0x00402cd5
  402f28:	00400af5 	.word	0x00400af5
  402f2c:	204006fc 	.word	0x204006fc
  402f30:	20400020 	.word	0x20400020
  402f34:	2040000c 	.word	0x2040000c
  402f38:	00404124 	.word	0x00404124
  402f3c:	004009f1 	.word	0x004009f1
  402f40:	204006f4 	.word	0x204006f4
  402f44:	00404134 	.word	0x00404134
  402f48:	00404144 	.word	0x00404144
  402f4c:	204006f8 	.word	0x204006f8
  402f50:	00404158 	.word	0x00404158
  402f54:	20400024 	.word	0x20400024
  402f58:	004032e9 	.word	0x004032e9
  402f5c:	400e0e00 	.word	0x400e0e00
  402f60:	00401d1d 	.word	0x00401d1d
  402f64:	400e1200 	.word	0x400e1200
  402f68:	400e1000 	.word	0x400e1000
  402f6c:	00404160 	.word	0x00404160
  402f70:	00402a45 	.word	0x00402a45

00402f74 <__aeabi_uldivmod>:
  402f74:	b953      	cbnz	r3, 402f8c <__aeabi_uldivmod+0x18>
  402f76:	b94a      	cbnz	r2, 402f8c <__aeabi_uldivmod+0x18>
  402f78:	2900      	cmp	r1, #0
  402f7a:	bf08      	it	eq
  402f7c:	2800      	cmpeq	r0, #0
  402f7e:	bf1c      	itt	ne
  402f80:	f04f 31ff 	movne.w	r1, #4294967295
  402f84:	f04f 30ff 	movne.w	r0, #4294967295
  402f88:	f000 b97a 	b.w	403280 <__aeabi_idiv0>
  402f8c:	f1ad 0c08 	sub.w	ip, sp, #8
  402f90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402f94:	f000 f806 	bl	402fa4 <__udivmoddi4>
  402f98:	f8dd e004 	ldr.w	lr, [sp, #4]
  402f9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  402fa0:	b004      	add	sp, #16
  402fa2:	4770      	bx	lr

00402fa4 <__udivmoddi4>:
  402fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402fa8:	468c      	mov	ip, r1
  402faa:	460d      	mov	r5, r1
  402fac:	4604      	mov	r4, r0
  402fae:	9e08      	ldr	r6, [sp, #32]
  402fb0:	2b00      	cmp	r3, #0
  402fb2:	d151      	bne.n	403058 <__udivmoddi4+0xb4>
  402fb4:	428a      	cmp	r2, r1
  402fb6:	4617      	mov	r7, r2
  402fb8:	d96d      	bls.n	403096 <__udivmoddi4+0xf2>
  402fba:	fab2 fe82 	clz	lr, r2
  402fbe:	f1be 0f00 	cmp.w	lr, #0
  402fc2:	d00b      	beq.n	402fdc <__udivmoddi4+0x38>
  402fc4:	f1ce 0c20 	rsb	ip, lr, #32
  402fc8:	fa01 f50e 	lsl.w	r5, r1, lr
  402fcc:	fa20 fc0c 	lsr.w	ip, r0, ip
  402fd0:	fa02 f70e 	lsl.w	r7, r2, lr
  402fd4:	ea4c 0c05 	orr.w	ip, ip, r5
  402fd8:	fa00 f40e 	lsl.w	r4, r0, lr
  402fdc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402fe0:	0c25      	lsrs	r5, r4, #16
  402fe2:	fbbc f8fa 	udiv	r8, ip, sl
  402fe6:	fa1f f987 	uxth.w	r9, r7
  402fea:	fb0a cc18 	mls	ip, sl, r8, ip
  402fee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  402ff2:	fb08 f309 	mul.w	r3, r8, r9
  402ff6:	42ab      	cmp	r3, r5
  402ff8:	d90a      	bls.n	403010 <__udivmoddi4+0x6c>
  402ffa:	19ed      	adds	r5, r5, r7
  402ffc:	f108 32ff 	add.w	r2, r8, #4294967295
  403000:	f080 8123 	bcs.w	40324a <__udivmoddi4+0x2a6>
  403004:	42ab      	cmp	r3, r5
  403006:	f240 8120 	bls.w	40324a <__udivmoddi4+0x2a6>
  40300a:	f1a8 0802 	sub.w	r8, r8, #2
  40300e:	443d      	add	r5, r7
  403010:	1aed      	subs	r5, r5, r3
  403012:	b2a4      	uxth	r4, r4
  403014:	fbb5 f0fa 	udiv	r0, r5, sl
  403018:	fb0a 5510 	mls	r5, sl, r0, r5
  40301c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403020:	fb00 f909 	mul.w	r9, r0, r9
  403024:	45a1      	cmp	r9, r4
  403026:	d909      	bls.n	40303c <__udivmoddi4+0x98>
  403028:	19e4      	adds	r4, r4, r7
  40302a:	f100 33ff 	add.w	r3, r0, #4294967295
  40302e:	f080 810a 	bcs.w	403246 <__udivmoddi4+0x2a2>
  403032:	45a1      	cmp	r9, r4
  403034:	f240 8107 	bls.w	403246 <__udivmoddi4+0x2a2>
  403038:	3802      	subs	r0, #2
  40303a:	443c      	add	r4, r7
  40303c:	eba4 0409 	sub.w	r4, r4, r9
  403040:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403044:	2100      	movs	r1, #0
  403046:	2e00      	cmp	r6, #0
  403048:	d061      	beq.n	40310e <__udivmoddi4+0x16a>
  40304a:	fa24 f40e 	lsr.w	r4, r4, lr
  40304e:	2300      	movs	r3, #0
  403050:	6034      	str	r4, [r6, #0]
  403052:	6073      	str	r3, [r6, #4]
  403054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403058:	428b      	cmp	r3, r1
  40305a:	d907      	bls.n	40306c <__udivmoddi4+0xc8>
  40305c:	2e00      	cmp	r6, #0
  40305e:	d054      	beq.n	40310a <__udivmoddi4+0x166>
  403060:	2100      	movs	r1, #0
  403062:	e886 0021 	stmia.w	r6, {r0, r5}
  403066:	4608      	mov	r0, r1
  403068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40306c:	fab3 f183 	clz	r1, r3
  403070:	2900      	cmp	r1, #0
  403072:	f040 808e 	bne.w	403192 <__udivmoddi4+0x1ee>
  403076:	42ab      	cmp	r3, r5
  403078:	d302      	bcc.n	403080 <__udivmoddi4+0xdc>
  40307a:	4282      	cmp	r2, r0
  40307c:	f200 80fa 	bhi.w	403274 <__udivmoddi4+0x2d0>
  403080:	1a84      	subs	r4, r0, r2
  403082:	eb65 0503 	sbc.w	r5, r5, r3
  403086:	2001      	movs	r0, #1
  403088:	46ac      	mov	ip, r5
  40308a:	2e00      	cmp	r6, #0
  40308c:	d03f      	beq.n	40310e <__udivmoddi4+0x16a>
  40308e:	e886 1010 	stmia.w	r6, {r4, ip}
  403092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403096:	b912      	cbnz	r2, 40309e <__udivmoddi4+0xfa>
  403098:	2701      	movs	r7, #1
  40309a:	fbb7 f7f2 	udiv	r7, r7, r2
  40309e:	fab7 fe87 	clz	lr, r7
  4030a2:	f1be 0f00 	cmp.w	lr, #0
  4030a6:	d134      	bne.n	403112 <__udivmoddi4+0x16e>
  4030a8:	1beb      	subs	r3, r5, r7
  4030aa:	0c3a      	lsrs	r2, r7, #16
  4030ac:	fa1f fc87 	uxth.w	ip, r7
  4030b0:	2101      	movs	r1, #1
  4030b2:	fbb3 f8f2 	udiv	r8, r3, r2
  4030b6:	0c25      	lsrs	r5, r4, #16
  4030b8:	fb02 3318 	mls	r3, r2, r8, r3
  4030bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4030c0:	fb0c f308 	mul.w	r3, ip, r8
  4030c4:	42ab      	cmp	r3, r5
  4030c6:	d907      	bls.n	4030d8 <__udivmoddi4+0x134>
  4030c8:	19ed      	adds	r5, r5, r7
  4030ca:	f108 30ff 	add.w	r0, r8, #4294967295
  4030ce:	d202      	bcs.n	4030d6 <__udivmoddi4+0x132>
  4030d0:	42ab      	cmp	r3, r5
  4030d2:	f200 80d1 	bhi.w	403278 <__udivmoddi4+0x2d4>
  4030d6:	4680      	mov	r8, r0
  4030d8:	1aed      	subs	r5, r5, r3
  4030da:	b2a3      	uxth	r3, r4
  4030dc:	fbb5 f0f2 	udiv	r0, r5, r2
  4030e0:	fb02 5510 	mls	r5, r2, r0, r5
  4030e4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4030e8:	fb0c fc00 	mul.w	ip, ip, r0
  4030ec:	45a4      	cmp	ip, r4
  4030ee:	d907      	bls.n	403100 <__udivmoddi4+0x15c>
  4030f0:	19e4      	adds	r4, r4, r7
  4030f2:	f100 33ff 	add.w	r3, r0, #4294967295
  4030f6:	d202      	bcs.n	4030fe <__udivmoddi4+0x15a>
  4030f8:	45a4      	cmp	ip, r4
  4030fa:	f200 80b8 	bhi.w	40326e <__udivmoddi4+0x2ca>
  4030fe:	4618      	mov	r0, r3
  403100:	eba4 040c 	sub.w	r4, r4, ip
  403104:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403108:	e79d      	b.n	403046 <__udivmoddi4+0xa2>
  40310a:	4631      	mov	r1, r6
  40310c:	4630      	mov	r0, r6
  40310e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403112:	f1ce 0420 	rsb	r4, lr, #32
  403116:	fa05 f30e 	lsl.w	r3, r5, lr
  40311a:	fa07 f70e 	lsl.w	r7, r7, lr
  40311e:	fa20 f804 	lsr.w	r8, r0, r4
  403122:	0c3a      	lsrs	r2, r7, #16
  403124:	fa25 f404 	lsr.w	r4, r5, r4
  403128:	ea48 0803 	orr.w	r8, r8, r3
  40312c:	fbb4 f1f2 	udiv	r1, r4, r2
  403130:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403134:	fb02 4411 	mls	r4, r2, r1, r4
  403138:	fa1f fc87 	uxth.w	ip, r7
  40313c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403140:	fb01 f30c 	mul.w	r3, r1, ip
  403144:	42ab      	cmp	r3, r5
  403146:	fa00 f40e 	lsl.w	r4, r0, lr
  40314a:	d909      	bls.n	403160 <__udivmoddi4+0x1bc>
  40314c:	19ed      	adds	r5, r5, r7
  40314e:	f101 30ff 	add.w	r0, r1, #4294967295
  403152:	f080 808a 	bcs.w	40326a <__udivmoddi4+0x2c6>
  403156:	42ab      	cmp	r3, r5
  403158:	f240 8087 	bls.w	40326a <__udivmoddi4+0x2c6>
  40315c:	3902      	subs	r1, #2
  40315e:	443d      	add	r5, r7
  403160:	1aeb      	subs	r3, r5, r3
  403162:	fa1f f588 	uxth.w	r5, r8
  403166:	fbb3 f0f2 	udiv	r0, r3, r2
  40316a:	fb02 3310 	mls	r3, r2, r0, r3
  40316e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403172:	fb00 f30c 	mul.w	r3, r0, ip
  403176:	42ab      	cmp	r3, r5
  403178:	d907      	bls.n	40318a <__udivmoddi4+0x1e6>
  40317a:	19ed      	adds	r5, r5, r7
  40317c:	f100 38ff 	add.w	r8, r0, #4294967295
  403180:	d26f      	bcs.n	403262 <__udivmoddi4+0x2be>
  403182:	42ab      	cmp	r3, r5
  403184:	d96d      	bls.n	403262 <__udivmoddi4+0x2be>
  403186:	3802      	subs	r0, #2
  403188:	443d      	add	r5, r7
  40318a:	1aeb      	subs	r3, r5, r3
  40318c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403190:	e78f      	b.n	4030b2 <__udivmoddi4+0x10e>
  403192:	f1c1 0720 	rsb	r7, r1, #32
  403196:	fa22 f807 	lsr.w	r8, r2, r7
  40319a:	408b      	lsls	r3, r1
  40319c:	fa05 f401 	lsl.w	r4, r5, r1
  4031a0:	ea48 0303 	orr.w	r3, r8, r3
  4031a4:	fa20 fe07 	lsr.w	lr, r0, r7
  4031a8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4031ac:	40fd      	lsrs	r5, r7
  4031ae:	ea4e 0e04 	orr.w	lr, lr, r4
  4031b2:	fbb5 f9fc 	udiv	r9, r5, ip
  4031b6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4031ba:	fb0c 5519 	mls	r5, ip, r9, r5
  4031be:	fa1f f883 	uxth.w	r8, r3
  4031c2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4031c6:	fb09 f408 	mul.w	r4, r9, r8
  4031ca:	42ac      	cmp	r4, r5
  4031cc:	fa02 f201 	lsl.w	r2, r2, r1
  4031d0:	fa00 fa01 	lsl.w	sl, r0, r1
  4031d4:	d908      	bls.n	4031e8 <__udivmoddi4+0x244>
  4031d6:	18ed      	adds	r5, r5, r3
  4031d8:	f109 30ff 	add.w	r0, r9, #4294967295
  4031dc:	d243      	bcs.n	403266 <__udivmoddi4+0x2c2>
  4031de:	42ac      	cmp	r4, r5
  4031e0:	d941      	bls.n	403266 <__udivmoddi4+0x2c2>
  4031e2:	f1a9 0902 	sub.w	r9, r9, #2
  4031e6:	441d      	add	r5, r3
  4031e8:	1b2d      	subs	r5, r5, r4
  4031ea:	fa1f fe8e 	uxth.w	lr, lr
  4031ee:	fbb5 f0fc 	udiv	r0, r5, ip
  4031f2:	fb0c 5510 	mls	r5, ip, r0, r5
  4031f6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4031fa:	fb00 f808 	mul.w	r8, r0, r8
  4031fe:	45a0      	cmp	r8, r4
  403200:	d907      	bls.n	403212 <__udivmoddi4+0x26e>
  403202:	18e4      	adds	r4, r4, r3
  403204:	f100 35ff 	add.w	r5, r0, #4294967295
  403208:	d229      	bcs.n	40325e <__udivmoddi4+0x2ba>
  40320a:	45a0      	cmp	r8, r4
  40320c:	d927      	bls.n	40325e <__udivmoddi4+0x2ba>
  40320e:	3802      	subs	r0, #2
  403210:	441c      	add	r4, r3
  403212:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403216:	eba4 0408 	sub.w	r4, r4, r8
  40321a:	fba0 8902 	umull	r8, r9, r0, r2
  40321e:	454c      	cmp	r4, r9
  403220:	46c6      	mov	lr, r8
  403222:	464d      	mov	r5, r9
  403224:	d315      	bcc.n	403252 <__udivmoddi4+0x2ae>
  403226:	d012      	beq.n	40324e <__udivmoddi4+0x2aa>
  403228:	b156      	cbz	r6, 403240 <__udivmoddi4+0x29c>
  40322a:	ebba 030e 	subs.w	r3, sl, lr
  40322e:	eb64 0405 	sbc.w	r4, r4, r5
  403232:	fa04 f707 	lsl.w	r7, r4, r7
  403236:	40cb      	lsrs	r3, r1
  403238:	431f      	orrs	r7, r3
  40323a:	40cc      	lsrs	r4, r1
  40323c:	6037      	str	r7, [r6, #0]
  40323e:	6074      	str	r4, [r6, #4]
  403240:	2100      	movs	r1, #0
  403242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403246:	4618      	mov	r0, r3
  403248:	e6f8      	b.n	40303c <__udivmoddi4+0x98>
  40324a:	4690      	mov	r8, r2
  40324c:	e6e0      	b.n	403010 <__udivmoddi4+0x6c>
  40324e:	45c2      	cmp	sl, r8
  403250:	d2ea      	bcs.n	403228 <__udivmoddi4+0x284>
  403252:	ebb8 0e02 	subs.w	lr, r8, r2
  403256:	eb69 0503 	sbc.w	r5, r9, r3
  40325a:	3801      	subs	r0, #1
  40325c:	e7e4      	b.n	403228 <__udivmoddi4+0x284>
  40325e:	4628      	mov	r0, r5
  403260:	e7d7      	b.n	403212 <__udivmoddi4+0x26e>
  403262:	4640      	mov	r0, r8
  403264:	e791      	b.n	40318a <__udivmoddi4+0x1e6>
  403266:	4681      	mov	r9, r0
  403268:	e7be      	b.n	4031e8 <__udivmoddi4+0x244>
  40326a:	4601      	mov	r1, r0
  40326c:	e778      	b.n	403160 <__udivmoddi4+0x1bc>
  40326e:	3802      	subs	r0, #2
  403270:	443c      	add	r4, r7
  403272:	e745      	b.n	403100 <__udivmoddi4+0x15c>
  403274:	4608      	mov	r0, r1
  403276:	e708      	b.n	40308a <__udivmoddi4+0xe6>
  403278:	f1a8 0802 	sub.w	r8, r8, #2
  40327c:	443d      	add	r5, r7
  40327e:	e72b      	b.n	4030d8 <__udivmoddi4+0x134>

00403280 <__aeabi_idiv0>:
  403280:	4770      	bx	lr
  403282:	bf00      	nop

00403284 <__libc_init_array>:
  403284:	b570      	push	{r4, r5, r6, lr}
  403286:	4e0f      	ldr	r6, [pc, #60]	; (4032c4 <__libc_init_array+0x40>)
  403288:	4d0f      	ldr	r5, [pc, #60]	; (4032c8 <__libc_init_array+0x44>)
  40328a:	1b76      	subs	r6, r6, r5
  40328c:	10b6      	asrs	r6, r6, #2
  40328e:	bf18      	it	ne
  403290:	2400      	movne	r4, #0
  403292:	d005      	beq.n	4032a0 <__libc_init_array+0x1c>
  403294:	3401      	adds	r4, #1
  403296:	f855 3b04 	ldr.w	r3, [r5], #4
  40329a:	4798      	blx	r3
  40329c:	42a6      	cmp	r6, r4
  40329e:	d1f9      	bne.n	403294 <__libc_init_array+0x10>
  4032a0:	4e0a      	ldr	r6, [pc, #40]	; (4032cc <__libc_init_array+0x48>)
  4032a2:	4d0b      	ldr	r5, [pc, #44]	; (4032d0 <__libc_init_array+0x4c>)
  4032a4:	1b76      	subs	r6, r6, r5
  4032a6:	f000 ff63 	bl	404170 <_init>
  4032aa:	10b6      	asrs	r6, r6, #2
  4032ac:	bf18      	it	ne
  4032ae:	2400      	movne	r4, #0
  4032b0:	d006      	beq.n	4032c0 <__libc_init_array+0x3c>
  4032b2:	3401      	adds	r4, #1
  4032b4:	f855 3b04 	ldr.w	r3, [r5], #4
  4032b8:	4798      	blx	r3
  4032ba:	42a6      	cmp	r6, r4
  4032bc:	d1f9      	bne.n	4032b2 <__libc_init_array+0x2e>
  4032be:	bd70      	pop	{r4, r5, r6, pc}
  4032c0:	bd70      	pop	{r4, r5, r6, pc}
  4032c2:	bf00      	nop
  4032c4:	0040417c 	.word	0x0040417c
  4032c8:	0040417c 	.word	0x0040417c
  4032cc:	00404184 	.word	0x00404184
  4032d0:	0040417c 	.word	0x0040417c
	...
  4032e0:	eba2 0003 	sub.w	r0, r2, r3
  4032e4:	4770      	bx	lr
  4032e6:	bf00      	nop

004032e8 <strcmp>:
  4032e8:	7802      	ldrb	r2, [r0, #0]
  4032ea:	780b      	ldrb	r3, [r1, #0]
  4032ec:	2a01      	cmp	r2, #1
  4032ee:	bf28      	it	cs
  4032f0:	429a      	cmpcs	r2, r3
  4032f2:	d1f5      	bne.n	4032e0 <__libc_init_array+0x5c>
  4032f4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  4032f8:	ea40 0401 	orr.w	r4, r0, r1
  4032fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
  403300:	f06f 0c00 	mvn.w	ip, #0
  403304:	ea4f 7244 	mov.w	r2, r4, lsl #29
  403308:	b312      	cbz	r2, 403350 <strcmp+0x68>
  40330a:	ea80 0401 	eor.w	r4, r0, r1
  40330e:	f014 0f07 	tst.w	r4, #7
  403312:	d16a      	bne.n	4033ea <strcmp+0x102>
  403314:	f000 0407 	and.w	r4, r0, #7
  403318:	f020 0007 	bic.w	r0, r0, #7
  40331c:	f004 0503 	and.w	r5, r4, #3
  403320:	f021 0107 	bic.w	r1, r1, #7
  403324:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403328:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  40332c:	f014 0f04 	tst.w	r4, #4
  403330:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  403334:	fa0c f405 	lsl.w	r4, ip, r5
  403338:	ea62 0204 	orn	r2, r2, r4
  40333c:	ea66 0604 	orn	r6, r6, r4
  403340:	d00a      	beq.n	403358 <strcmp+0x70>
  403342:	ea63 0304 	orn	r3, r3, r4
  403346:	4662      	mov	r2, ip
  403348:	ea67 0704 	orn	r7, r7, r4
  40334c:	4666      	mov	r6, ip
  40334e:	e003      	b.n	403358 <strcmp+0x70>
  403350:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  403354:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  403358:	fa82 f54c 	uadd8	r5, r2, ip
  40335c:	ea82 0406 	eor.w	r4, r2, r6
  403360:	faa4 f48c 	sel	r4, r4, ip
  403364:	bb6c      	cbnz	r4, 4033c2 <strcmp+0xda>
  403366:	fa83 f54c 	uadd8	r5, r3, ip
  40336a:	ea83 0507 	eor.w	r5, r3, r7
  40336e:	faa5 f58c 	sel	r5, r5, ip
  403372:	b995      	cbnz	r5, 40339a <strcmp+0xb2>
  403374:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  403378:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  40337c:	fa82 f54c 	uadd8	r5, r2, ip
  403380:	ea82 0406 	eor.w	r4, r2, r6
  403384:	faa4 f48c 	sel	r4, r4, ip
  403388:	fa83 f54c 	uadd8	r5, r3, ip
  40338c:	ea83 0507 	eor.w	r5, r3, r7
  403390:	faa5 f58c 	sel	r5, r5, ip
  403394:	4325      	orrs	r5, r4
  403396:	d0db      	beq.n	403350 <strcmp+0x68>
  403398:	b99c      	cbnz	r4, 4033c2 <strcmp+0xda>
  40339a:	ba2d      	rev	r5, r5
  40339c:	fab5 f485 	clz	r4, r5
  4033a0:	f024 0407 	bic.w	r4, r4, #7
  4033a4:	fa27 f104 	lsr.w	r1, r7, r4
  4033a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4033ac:	fa23 f304 	lsr.w	r3, r3, r4
  4033b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  4033b4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4033b8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4033bc:	eba0 0001 	sub.w	r0, r0, r1
  4033c0:	4770      	bx	lr
  4033c2:	ba24      	rev	r4, r4
  4033c4:	fab4 f484 	clz	r4, r4
  4033c8:	f024 0407 	bic.w	r4, r4, #7
  4033cc:	fa26 f104 	lsr.w	r1, r6, r4
  4033d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4033d4:	fa22 f204 	lsr.w	r2, r2, r4
  4033d8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4033dc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4033e0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4033e4:	eba0 0001 	sub.w	r0, r0, r1
  4033e8:	4770      	bx	lr
  4033ea:	f014 0f03 	tst.w	r4, #3
  4033ee:	d13c      	bne.n	40346a <strcmp+0x182>
  4033f0:	f010 0403 	ands.w	r4, r0, #3
  4033f4:	d128      	bne.n	403448 <strcmp+0x160>
  4033f6:	f850 2b08 	ldr.w	r2, [r0], #8
  4033fa:	f851 3b08 	ldr.w	r3, [r1], #8
  4033fe:	fa82 f54c 	uadd8	r5, r2, ip
  403402:	ea82 0503 	eor.w	r5, r2, r3
  403406:	faa5 f58c 	sel	r5, r5, ip
  40340a:	b95d      	cbnz	r5, 403424 <strcmp+0x13c>
  40340c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  403410:	f851 3c04 	ldr.w	r3, [r1, #-4]
  403414:	fa82 f54c 	uadd8	r5, r2, ip
  403418:	ea82 0503 	eor.w	r5, r2, r3
  40341c:	faa5 f58c 	sel	r5, r5, ip
  403420:	2d00      	cmp	r5, #0
  403422:	d0e8      	beq.n	4033f6 <strcmp+0x10e>
  403424:	ba2d      	rev	r5, r5
  403426:	fab5 f485 	clz	r4, r5
  40342a:	f024 0407 	bic.w	r4, r4, #7
  40342e:	fa23 f104 	lsr.w	r1, r3, r4
  403432:	fa22 f204 	lsr.w	r2, r2, r4
  403436:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  40343a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40343e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  403442:	eba0 0001 	sub.w	r0, r0, r1
  403446:	4770      	bx	lr
  403448:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  40344c:	f020 0003 	bic.w	r0, r0, #3
  403450:	f850 2b08 	ldr.w	r2, [r0], #8
  403454:	f021 0103 	bic.w	r1, r1, #3
  403458:	f851 3b08 	ldr.w	r3, [r1], #8
  40345c:	fa0c f404 	lsl.w	r4, ip, r4
  403460:	ea62 0204 	orn	r2, r2, r4
  403464:	ea63 0304 	orn	r3, r3, r4
  403468:	e7c9      	b.n	4033fe <strcmp+0x116>
  40346a:	f010 0403 	ands.w	r4, r0, #3
  40346e:	d01a      	beq.n	4034a6 <strcmp+0x1be>
  403470:	eba1 0104 	sub.w	r1, r1, r4
  403474:	f020 0003 	bic.w	r0, r0, #3
  403478:	07e4      	lsls	r4, r4, #31
  40347a:	f850 2b04 	ldr.w	r2, [r0], #4
  40347e:	d006      	beq.n	40348e <strcmp+0x1a6>
  403480:	d20f      	bcs.n	4034a2 <strcmp+0x1ba>
  403482:	788b      	ldrb	r3, [r1, #2]
  403484:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  403488:	1ae4      	subs	r4, r4, r3
  40348a:	d106      	bne.n	40349a <strcmp+0x1b2>
  40348c:	b12b      	cbz	r3, 40349a <strcmp+0x1b2>
  40348e:	78cb      	ldrb	r3, [r1, #3]
  403490:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  403494:	1ae4      	subs	r4, r4, r3
  403496:	d100      	bne.n	40349a <strcmp+0x1b2>
  403498:	b91b      	cbnz	r3, 4034a2 <strcmp+0x1ba>
  40349a:	4620      	mov	r0, r4
  40349c:	f85d 4b10 	ldr.w	r4, [sp], #16
  4034a0:	4770      	bx	lr
  4034a2:	f101 0104 	add.w	r1, r1, #4
  4034a6:	f850 2b04 	ldr.w	r2, [r0], #4
  4034aa:	07cc      	lsls	r4, r1, #31
  4034ac:	f021 0103 	bic.w	r1, r1, #3
  4034b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4034b4:	d848      	bhi.n	403548 <strcmp+0x260>
  4034b6:	d224      	bcs.n	403502 <strcmp+0x21a>
  4034b8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  4034bc:	fa82 f54c 	uadd8	r5, r2, ip
  4034c0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  4034c4:	faa5 f58c 	sel	r5, r5, ip
  4034c8:	d10a      	bne.n	4034e0 <strcmp+0x1f8>
  4034ca:	b965      	cbnz	r5, 4034e6 <strcmp+0x1fe>
  4034cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4034d0:	ea84 0402 	eor.w	r4, r4, r2
  4034d4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  4034d8:	d10e      	bne.n	4034f8 <strcmp+0x210>
  4034da:	f850 2b04 	ldr.w	r2, [r0], #4
  4034de:	e7eb      	b.n	4034b8 <strcmp+0x1d0>
  4034e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
  4034e4:	e055      	b.n	403592 <strcmp+0x2aa>
  4034e6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  4034ea:	d14d      	bne.n	403588 <strcmp+0x2a0>
  4034ec:	7808      	ldrb	r0, [r1, #0]
  4034ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4034f2:	f1c0 0000 	rsb	r0, r0, #0
  4034f6:	4770      	bx	lr
  4034f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4034fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  403500:	e047      	b.n	403592 <strcmp+0x2aa>
  403502:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  403506:	fa82 f54c 	uadd8	r5, r2, ip
  40350a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  40350e:	faa5 f58c 	sel	r5, r5, ip
  403512:	d10a      	bne.n	40352a <strcmp+0x242>
  403514:	b965      	cbnz	r5, 403530 <strcmp+0x248>
  403516:	f851 3b04 	ldr.w	r3, [r1], #4
  40351a:	ea84 0402 	eor.w	r4, r4, r2
  40351e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  403522:	d10c      	bne.n	40353e <strcmp+0x256>
  403524:	f850 2b04 	ldr.w	r2, [r0], #4
  403528:	e7eb      	b.n	403502 <strcmp+0x21a>
  40352a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40352e:	e030      	b.n	403592 <strcmp+0x2aa>
  403530:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  403534:	d128      	bne.n	403588 <strcmp+0x2a0>
  403536:	880b      	ldrh	r3, [r1, #0]
  403538:	ea4f 4212 	mov.w	r2, r2, lsr #16
  40353c:	e029      	b.n	403592 <strcmp+0x2aa>
  40353e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  403542:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  403546:	e024      	b.n	403592 <strcmp+0x2aa>
  403548:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  40354c:	fa82 f54c 	uadd8	r5, r2, ip
  403550:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  403554:	faa5 f58c 	sel	r5, r5, ip
  403558:	d10a      	bne.n	403570 <strcmp+0x288>
  40355a:	b965      	cbnz	r5, 403576 <strcmp+0x28e>
  40355c:	f851 3b04 	ldr.w	r3, [r1], #4
  403560:	ea84 0402 	eor.w	r4, r4, r2
  403564:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  403568:	d109      	bne.n	40357e <strcmp+0x296>
  40356a:	f850 2b04 	ldr.w	r2, [r0], #4
  40356e:	e7eb      	b.n	403548 <strcmp+0x260>
  403570:	ea4f 6313 	mov.w	r3, r3, lsr #24
  403574:	e00d      	b.n	403592 <strcmp+0x2aa>
  403576:	f015 0fff 	tst.w	r5, #255	; 0xff
  40357a:	d105      	bne.n	403588 <strcmp+0x2a0>
  40357c:	680b      	ldr	r3, [r1, #0]
  40357e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  403582:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  403586:	e004      	b.n	403592 <strcmp+0x2aa>
  403588:	f04f 0000 	mov.w	r0, #0
  40358c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  403590:	4770      	bx	lr
  403592:	ba12      	rev	r2, r2
  403594:	ba1b      	rev	r3, r3
  403596:	fa82 f44c 	uadd8	r4, r2, ip
  40359a:	ea82 0403 	eor.w	r4, r2, r3
  40359e:	faa4 f58c 	sel	r5, r4, ip
  4035a2:	fab5 f485 	clz	r4, r5
  4035a6:	fa02 f204 	lsl.w	r2, r2, r4
  4035aa:	fa03 f304 	lsl.w	r3, r3, r4
  4035ae:	ea4f 6012 	mov.w	r0, r2, lsr #24
  4035b2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4035b6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  4035ba:	4770      	bx	lr

004035bc <register_fini>:
  4035bc:	4b02      	ldr	r3, [pc, #8]	; (4035c8 <register_fini+0xc>)
  4035be:	b113      	cbz	r3, 4035c6 <register_fini+0xa>
  4035c0:	4802      	ldr	r0, [pc, #8]	; (4035cc <register_fini+0x10>)
  4035c2:	f000 b805 	b.w	4035d0 <atexit>
  4035c6:	4770      	bx	lr
  4035c8:	00000000 	.word	0x00000000
  4035cc:	004035dd 	.word	0x004035dd

004035d0 <atexit>:
  4035d0:	2300      	movs	r3, #0
  4035d2:	4601      	mov	r1, r0
  4035d4:	461a      	mov	r2, r3
  4035d6:	4618      	mov	r0, r3
  4035d8:	f000 b81e 	b.w	403618 <__register_exitproc>

004035dc <__libc_fini_array>:
  4035dc:	b538      	push	{r3, r4, r5, lr}
  4035de:	4c0a      	ldr	r4, [pc, #40]	; (403608 <__libc_fini_array+0x2c>)
  4035e0:	4d0a      	ldr	r5, [pc, #40]	; (40360c <__libc_fini_array+0x30>)
  4035e2:	1b64      	subs	r4, r4, r5
  4035e4:	10a4      	asrs	r4, r4, #2
  4035e6:	d00a      	beq.n	4035fe <__libc_fini_array+0x22>
  4035e8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4035ec:	3b01      	subs	r3, #1
  4035ee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4035f2:	3c01      	subs	r4, #1
  4035f4:	f855 3904 	ldr.w	r3, [r5], #-4
  4035f8:	4798      	blx	r3
  4035fa:	2c00      	cmp	r4, #0
  4035fc:	d1f9      	bne.n	4035f2 <__libc_fini_array+0x16>
  4035fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403602:	f000 bdbf 	b.w	404184 <_fini>
  403606:	bf00      	nop
  403608:	00404194 	.word	0x00404194
  40360c:	00404190 	.word	0x00404190

00403610 <__retarget_lock_acquire_recursive>:
  403610:	4770      	bx	lr
  403612:	bf00      	nop

00403614 <__retarget_lock_release_recursive>:
  403614:	4770      	bx	lr
  403616:	bf00      	nop

00403618 <__register_exitproc>:
  403618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40361c:	4d2c      	ldr	r5, [pc, #176]	; (4036d0 <__register_exitproc+0xb8>)
  40361e:	4606      	mov	r6, r0
  403620:	6828      	ldr	r0, [r5, #0]
  403622:	4698      	mov	r8, r3
  403624:	460f      	mov	r7, r1
  403626:	4691      	mov	r9, r2
  403628:	f7ff fff2 	bl	403610 <__retarget_lock_acquire_recursive>
  40362c:	4b29      	ldr	r3, [pc, #164]	; (4036d4 <__register_exitproc+0xbc>)
  40362e:	681c      	ldr	r4, [r3, #0]
  403630:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  403634:	2b00      	cmp	r3, #0
  403636:	d03e      	beq.n	4036b6 <__register_exitproc+0x9e>
  403638:	685a      	ldr	r2, [r3, #4]
  40363a:	2a1f      	cmp	r2, #31
  40363c:	dc1c      	bgt.n	403678 <__register_exitproc+0x60>
  40363e:	f102 0e01 	add.w	lr, r2, #1
  403642:	b176      	cbz	r6, 403662 <__register_exitproc+0x4a>
  403644:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  403648:	2401      	movs	r4, #1
  40364a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40364e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  403652:	4094      	lsls	r4, r2
  403654:	4320      	orrs	r0, r4
  403656:	2e02      	cmp	r6, #2
  403658:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40365c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  403660:	d023      	beq.n	4036aa <__register_exitproc+0x92>
  403662:	3202      	adds	r2, #2
  403664:	f8c3 e004 	str.w	lr, [r3, #4]
  403668:	6828      	ldr	r0, [r5, #0]
  40366a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40366e:	f7ff ffd1 	bl	403614 <__retarget_lock_release_recursive>
  403672:	2000      	movs	r0, #0
  403674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403678:	4b17      	ldr	r3, [pc, #92]	; (4036d8 <__register_exitproc+0xc0>)
  40367a:	b30b      	cbz	r3, 4036c0 <__register_exitproc+0xa8>
  40367c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403680:	f3af 8000 	nop.w
  403684:	4603      	mov	r3, r0
  403686:	b1d8      	cbz	r0, 4036c0 <__register_exitproc+0xa8>
  403688:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40368c:	6002      	str	r2, [r0, #0]
  40368e:	2100      	movs	r1, #0
  403690:	6041      	str	r1, [r0, #4]
  403692:	460a      	mov	r2, r1
  403694:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  403698:	f04f 0e01 	mov.w	lr, #1
  40369c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4036a0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4036a4:	2e00      	cmp	r6, #0
  4036a6:	d0dc      	beq.n	403662 <__register_exitproc+0x4a>
  4036a8:	e7cc      	b.n	403644 <__register_exitproc+0x2c>
  4036aa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4036ae:	430c      	orrs	r4, r1
  4036b0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4036b4:	e7d5      	b.n	403662 <__register_exitproc+0x4a>
  4036b6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4036ba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4036be:	e7bb      	b.n	403638 <__register_exitproc+0x20>
  4036c0:	6828      	ldr	r0, [r5, #0]
  4036c2:	f7ff ffa7 	bl	403614 <__retarget_lock_release_recursive>
  4036c6:	f04f 30ff 	mov.w	r0, #4294967295
  4036ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4036ce:	bf00      	nop
  4036d0:	20400458 	.word	0x20400458
  4036d4:	0040416c 	.word	0x0040416c
  4036d8:	00000000 	.word	0x00000000

004036dc <sysfont_glyphs>:
	...
  4036fc:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  40370c:	00000030 00000000 00000000 006c006c     0...........l.l.
  40371c:	006c006c 00000000 00000000 00000000     l.l.............
	...
  403734:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  403744:	00000028 00000000 00000000 003c0010     (.............<.
  403754:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  40376c:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  40377c:	00000088 00000000 00000000 00900060     ............`...
  40378c:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  4037a4:	00100010 00000010 00000000 00000000     ................
	...
  4037c0:	00100008 00200020 00200020 00200020     .... . . . . . .
  4037d0:	00080010 00000000 00000000 00100020     ............ ...
  4037e0:	00080008 00080008 00080008 00200010     .............. .
  4037f0:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  403818:	00100010 00fe0010 00100010 00000010     ................
	...
  403840:	00300010 00000020 00000000 00000000     ..0. ...........
  403850:	00000000 007c0000 00000000 00000000     ......|.........
	...
  403874:	00300000 00000030 00000000 00000000     ..0.0...........
  403884:	00080000 00100008 00200010 00400020     .......... . .@.
  403894:	00000040 00000000 00000000 00780000     @.............x.
  4038a4:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  4038bc:	00100000 00500030 00100010 00100010     ....0.P.........
  4038cc:	0000007c 00000000 00000000 00700000     |.............p.
  4038dc:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  4038f4:	00700000 00080088 00080030 00880008     ..p.....0.......
  403904:	00000070 00000000 00000000 00080000     p...............
  403914:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  40392c:	00780000 00800080 000800f0 00080008     ..x.............
  40393c:	000000f0 00000000 00000000 00300000     ..............0.
  40394c:	00800040 008800f0 00880088 00000070     @...........p...
	...
  403964:	00f80000 00100008 00200010 00400020     .......... . .@.
  403974:	00000040 00000000 00000000 00700000     @.............p.
  403984:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  40399c:	00700000 00880088 00780088 00100008     ..p.......x.....
  4039ac:	00000060 00000000 00000000 00000000     `...............
  4039bc:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  4039d8:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  4039e8:	00000040 00000000 00000000 00100008     @...............
  4039f8:	00400020 00100020 00000008 00000000      .@. ...........
	...
  403a14:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  403a2c:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  403a44:	00300000 00080048 00200010 00000000     ..0.H..... .....
  403a54:	00000020 00000000 00000000 00000000      ...............
  403a64:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  403a7c:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  403a8c:	00000044 00000000 00000000 00f80000     D...............
  403a9c:	00840084 008400f8 00840084 000000f8     ................
	...
  403ab4:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  403ac4:	0000003c 00000000 00000000 00f00000     <...............
  403ad4:	00840088 00840084 00880084 000000f0     ................
	...
  403aec:	00f80000 00800080 008000f0 00800080     ................
  403afc:	000000f8 00000000 00000000 00f80000     ................
  403b0c:	00800080 008000f8 00800080 00000080     ................
	...
  403b24:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  403b34:	00000038 00000000 00000000 00880000     8...............
  403b44:	00880088 008800f8 00880088 00000088     ................
	...
  403b5c:	00f80000 00200020 00200020 00200020     .... . . . . . .
  403b6c:	000000f8 00000000 00000000 00f80000     ................
  403b7c:	00080008 00080008 00080008 000000f0     ................
	...
  403b94:	00840000 00900088 00d000a0 00840088     ................
  403ba4:	00000084 00000000 00000000 00800000     ................
  403bb4:	00800080 00800080 00800080 000000fc     ................
	...
  403bcc:	00840000 00cc00cc 00b400b4 00840084     ................
  403bdc:	00000084 00000000 00000000 00840000     ................
  403bec:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  403c04:	00780000 00840084 00840084 00840084     ..x.............
  403c14:	00000078 00000000 00000000 00f80000     x...............
  403c24:	00840084 00f80084 00800080 00000080     ................
	...
  403c3c:	00780000 00840084 00840084 00840084     ..x.............
  403c4c:	00200078 00000018 00000000 00f80000     x. .............
  403c5c:	00840084 00f80084 00840088 00000084     ................
	...
  403c74:	007c0000 00800080 00180060 00040004     ..|.....`.......
  403c84:	000000f8 00000000 00000000 00f80000     ................
  403c94:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  403cac:	00840000 00840084 00840084 00840084     ................
  403cbc:	00000078 00000000 00000000 00840000     x...............
  403ccc:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  403ce4:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  403cf4:	00000050 00000000 00000000 00880000     P...............
  403d04:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  403d1c:	00880000 00880088 00500050 00200020     ........P.P. . .
  403d2c:	00000020 00000000 00000000 00fc0000      ...............
  403d3c:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  403d54:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  403d64:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  403d74:	00200020 00100020 00100010 00080008      . . ...........
	...
  403d8c:	00080038 00080008 00080008 00080008     8...............
  403d9c:	00080008 00000038 00000000 00280010     ....8.........(.
  403dac:	00000044 00000000 00000000 00000000     D...............
	...
  403dd4:	00000038 00000000 00000000 00200000     8............. .
  403de4:	00000010 00000000 00000000 00000000     ................
	...
  403e00:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  403e18:	00800080 00f80080 00840084 00840084     ................
  403e28:	000000f8 00000000 00000000 00000000     ................
  403e38:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  403e50:	00040004 007c0004 00840084 008c0084     ......|.........
  403e60:	00000074 00000000 00000000 00000000     t...............
  403e70:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  403e88:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  403e98:	000000fc 00000000 00000000 00000000     ................
  403ea8:	007c0000 00840084 00840084 0004007c     ..|.........|...
  403eb8:	00000078 00000000 00800080 00b80080     x...............
  403ec8:	008400c4 00840084 00000084 00000000     ................
  403ed8:	00000000 00100000 00700000 00100010     ..........p.....
  403ee8:	00100010 0000007c 00000000 00000000     ....|...........
  403ef8:	00080000 00780000 00080008 00080008     ......x.........
  403f08:	00080008 00700008 00000000 00800080     ......p.........
  403f18:	00880080 00a00090 008800d0 00000088     ................
	...
  403f30:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  403f40:	000000f8 00000000 00000000 00000000     ................
  403f50:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  403f6c:	00b80000 008400c4 00840084 00000084     ................
	...
  403f88:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  403fa4:	00b80000 008400c4 00840084 008000f8     ................
  403fb4:	00000080 00000000 00000000 007c0000     ..............|.
  403fc4:	00840084 00840084 0004007c 00000004     ........|.......
	...
  403fdc:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  403ff8:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  404014:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  404030:	00880000 00880088 00880088 0000007c     ............|...
	...
  40404c:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  404068:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  404084:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  4040a0:	00840000 00480084 00300048 00200010     ......H.H.0... .
  4040b0:	00000040 00000000 00000000 00f80000     @...............
  4040c0:	00100008 00400020 000000f8 00000000     .... .@.........
  4040d0:	00000000 00200010 00100020 00200020     ...... . ... . .
  4040e0:	00200010 00100020 00000000 00000000     .. . ...........
  4040f0:	00100010 00100010 00000000 00100010     ................
  404100:	00100010 00000000 00000000 00100020     ............ ...
  404110:	00200010 00100010 00100020 00200010     .. ..... ..... .
  404120:	00000000 20202020 20202020 20202020     ....            
  404130:	00000020 72666f43 62612065 6f747265      ...Cofre aberto
  404140:	00000000 72666f43 65662065 64616863     ....Cofre fechad
  404150:	0000006f 0000002a 33323131 00000000     o...*...1123....
  404160:	716f6c42 64616575 0000006f              Bloqueado...

0040416c <_global_impure_ptr>:
  40416c:	20400030                                0.@ 

00404170 <_init>:
  404170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404172:	bf00      	nop
  404174:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404176:	bc08      	pop	{r3}
  404178:	469e      	mov	lr, r3
  40417a:	4770      	bx	lr

0040417c <__init_array_start>:
  40417c:	004035bd 	.word	0x004035bd

00404180 <__frame_dummy_init_array_entry>:
  404180:	00400165                                e.@.

00404184 <_fini>:
  404184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404186:	bf00      	nop
  404188:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40418a:	bc08      	pop	{r3}
  40418c:	469e      	mov	lr, r3
  40418e:	4770      	bx	lr

00404190 <__fini_array_start>:
  404190:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 36dc 0040 0e0a 7d20               .....6@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <flag_redraw>:
20400020:	0001 0000                                   ....

20400024 <password>:
20400024:	3030 3030 0000 0000 0000 0000               0000........

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__atexit_recursive_mutex>:
20400458:	0700 2040                                   ..@ 
